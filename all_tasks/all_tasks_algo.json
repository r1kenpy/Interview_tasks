[
    {
        "ID": 153,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Для каждого слова строим хештаблицу: буква -&gt; количество таких букв в слове. Сравниваем счетчики.</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br/>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">boolean</span> <span class=\"hljs-title function_\">areAnagrams</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> s, <span class=\"hljs-built_in\">String</span> t</span>) {<br/>        <span class=\"hljs-title class_\">Map</span>&lt;<span class=\"hljs-title class_\">Character</span>, <span class=\"hljs-title class_\">Integer</span>&gt; m1 = <span class=\"hljs-title function_\">toMap</span>(s);<br/>        <span class=\"hljs-title class_\">Map</span>&lt;<span class=\"hljs-title class_\">Character</span>, <span class=\"hljs-title class_\">Integer</span>&gt; m2 = <span class=\"hljs-title function_\">toMap</span>(t);<br/>        <br/>        <span class=\"hljs-keyword\">for</span> (char c : m1.<span class=\"hljs-title function_\">keys</span>()) {<br/>            <span class=\"hljs-keyword\">if</span> (m1.<span class=\"hljs-title function_\">get</span>(c) != m2.<span class=\"hljs-title function_\">get</span>(c))<br/>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br/>            <span class=\"hljs-keyword\">else</span><br/>                m2.<span class=\"hljs-title function_\">remove</span>(c);<br/>        }<br/>        <br/>        <span class=\"hljs-keyword\">return</span> m2.<span class=\"hljs-title function_\">isEmpty</span>();<br/>    }<br/>    <br/>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title class_\">Map</span>&lt;<span class=\"hljs-title class_\">Character</span>, <span class=\"hljs-title class_\">Integer</span>&gt; <span class=\"hljs-title function_\">toMap</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> word</span>) {<br/>        <span class=\"hljs-title class_\">Map</span>&lt;<span class=\"hljs-title class_\">Character</span>, <span class=\"hljs-title class_\">Integer</span>&gt; map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br/>        <span class=\"hljs-keyword\">for</span> (char c : word.<span class=\"hljs-title function_\">toCharArray</span>()) {<br/>            int cnt = map.<span class=\"hljs-title function_\">getOrDefault</span>(c, <span class=\"hljs-number\">0</span>);<br/>            map.<span class=\"hljs-title function_\">put</span>(c, cnt + <span class=\"hljs-number\">1</span>);<br/>        }<br/>        <span class=\"hljs-keyword\">return</span> map;<br/>    }<br/>}<br/><br/></pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def is_anagram(s: str, t: str) -&gt; bool:<br/>    dict1, dict2 = {}, {}<br/>    for ch in s:<br/>        dict1[ch] = dict1.get(ch, 0) + 1<br/>    for ch in t:<br/>        dict2[ch] = dict2.get(ch, 0) + 1<br/>    return dict1 == dict2<br/><br/></pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 83,
                "title": "Хеш таблица"
            },
            {
                "ID": 61,
                "title": "Структуры данных"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:57:56Z",
        "interviewCount": 1498,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Определить, являются ли две строки анаграммами. </span></p><p><span style=\"color: rgb(52, 73, 94);\">Строка А является анаграммой строки Б, если можно переставить местами символы в строке А и получить строку Б.</span></p><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-title class_\">Input</span>: a=<span class=\"hljs-string\">\"лапоть\"</span>, b=<span class=\"hljs-string\">\"пальто\"</span>\n<span class=\"hljs-title class_\">Output</span>: <span class=\"hljs-literal\">true</span>\n\n</pre>",
        "time": 30,
        "title": "Anagrams"
    },
    {
        "ID": 141,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Необходимо отсортировать встречи по времени начала и мержить пересекающиеся интервалы в один большой. Механика мержа - если следующая встреча началась до завершения текущей, объединяем в одну встречу. Иначе - начинаем новую.</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meeting</span> {\n    <span class=\"hljs-built_in\">int</span> start;\n    <span class=\"hljs-built_in\">int</span> end;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;Interval&gt; <span class=\"hljs-title\">merge</span>(<span class=\"hljs-params\">List&lt;Interval&gt; meetings</span>)</span> {\n    Collections.sort(meetings, (m1, m2) -&gt; Integer.compare(m1.start, m2.start));\n\n    List&lt;Interval&gt; result = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n\n    Interval curr = intervals.<span class=\"hljs-keyword\">get</span>(<span class=\"hljs-number\">0</span>);\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; intervals.size(); i++) {\n        Interval next = intervals.<span class=\"hljs-keyword\">get</span>(i);\n\n        <span class=\"hljs-keyword\">if</span> (next.start &gt; curr.end) {\n            result.<span class=\"hljs-keyword\">add</span>(curr);\n            curr = next;\n        } <span class=\"hljs-keyword\">else</span> {\n            curr.end = Math.max(curr.end, next.end);\n        }\n    }\n    result.<span class=\"hljs-keyword\">add</span>(curr);\n\n    <span class=\"hljs-keyword\">return</span> result;\n}\n</pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def <span class=\"hljs-title function_ invoke__\">merge</span>(<span class=\"hljs-attr\">intervals</span>: List[List[<span class=\"hljs-keyword\">int</span>]]) -&gt; List[List[<span class=\"hljs-keyword\">int</span>]]:\n    intervals.<span class=\"hljs-title function_ invoke__\">sort</span>(key=lambda <span class=\"hljs-attr\">x</span>: x[<span class=\"hljs-number\">0</span>])\n\n    merged = []\n    <span class=\"hljs-keyword\">for</span> interval in intervals:\n        <span class=\"hljs-keyword\">if</span> not merged <span class=\"hljs-keyword\">or</span> merged[-<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>] &lt; interval[<span class=\"hljs-number\">0</span>]:\n            merged.<span class=\"hljs-title function_ invoke__\">append</span>(interval)\n        <span class=\"hljs-keyword\">else</span>:\n            merged[-<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>] = <span class=\"hljs-title function_ invoke__\">max</span>(merged[-<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>], interval[<span class=\"hljs-number\">1</span>])\n\n    <span class=\"hljs-keyword\">return</span> merged\n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 78,
                "title": "Массив"
            },
            {
                "ID": 61,
                "title": "Структуры данных"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:46:53Z",
        "interviewCount": 991,
        "question": "<p><u>Сложность: </u><strong><u>MEDIUM</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Дан массив&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">meetings</code><span style=\"color: rgb(52, 73, 94);\">, в котором каждый элемент&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">meeting[i]</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;- это пара двух чисел&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">[startTime, endTime]</code><span style=\"color: rgb(52, 73, 94);\">. Необходимо объединить все накладывающиеся друг на друга встречи и вернуть массив с объединенными встречами, покрывающих те же временные слоты.</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> [[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">6</span>], [<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">10</span>], [<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">18</span>]]\n<span class=\"hljs-attr\">Output:</span> [[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">6</span>], [<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">10</span>], [<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">18</span>]]\n<span class=\"hljs-attr\">Explanation:</span> <span class=\"hljs-string\">Интервалы</span> [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>] <span class=\"hljs-string\">и</span> [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">6</span>] <span class=\"hljs-string\">пересекаются</span> <span class=\"hljs-string\">=&gt;</span> <span class=\"hljs-string\">объединяем</span> <span class=\"hljs-string\">в</span> [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">6</span>]<span class=\"hljs-string\">.</span>\n\n</pre>",
        "time": 30,
        "title": "Merge intervals"
    },
    {
        "ID": 139,
        "answers": [
            {
                "content": "<p><strong>Решение:</strong></p><p>Исходный массив по условию отсортирован, но в нём могут быть и отрицательные числа. </p><p><br></p><p>Чтобы получить решение за O(N) необходимо: </p><ul><li>либо найти минимальный по модулю элемент (линейно или бин поиском), и затем двигаться двумя указателями к краям массива, </li><li>либо двигаться от значений на краях массива (они самые большие по модулю) к середине (к минимальным по модулю). </li></ul><p>Второй вариант более компактный и представлен ниже.</p><p><br></p><p><strong>P.S.</strong> В условии намеренно не говорится о том, что числа могут быть отрицательными. Это можно понять по типу данных (int), либо кандидат может явно уточнить условие. Ожидается, что кандидат либо подумает об этом заранее, либо заметит на этапе тестирования своей идеи.</p><p><strong>P.P.S.</strong> Решения вида&nbsp;<code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">return arr.map(x -&gt; x*x).sorted()</code>&nbsp;не принимаются. Здорово, что кандидат знает библиотечные функции сортировки, но суть задания в том, чтобы сделать сортировку самостоятельно. В крайнем случае можно аргументировать необходимость самостоятельного решения тем, что библиотечная функция сортирует за NlogN, а задачу нужно решить за N.</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span>[] <span class=\"hljs-built_in\">sortedSquares</span>(<span class=\"hljs-type\">int</span>[] sortedArr) {\n    <span class=\"hljs-type\">int</span>[] squares = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[sortedArr.length];\n\n    <span class=\"hljs-type\">int</span> l = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">int</span> r = sortedArr.length - <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-type\">int</span> idx = r;\n\n    <span class=\"hljs-keyword\">while</span> (l &lt;= r) {\n        <span class=\"hljs-keyword\">if</span> (Math.<span class=\"hljs-built_in\">abs</span>(sortedArr[l]) &lt;= Math.<span class=\"hljs-built_in\">abs</span>(sortedArr[r]))\n            squares[idx--] = <span class=\"hljs-built_in\">sqr</span>(sortedArr[r--]);\n        <span class=\"hljs-keyword\">else</span>\n            squares[idx--] = <span class=\"hljs-built_in\">sqr</span>(sortedArr[l++]);\n    }\n\n    <span class=\"hljs-keyword\">return</span> squares;\n}\n\n</pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def sorted_squares(arr: List[<span class=\"hljs-type\">int</span>]) -&gt; List[<span class=\"hljs-type\">int</span>]:\n    result = [None] * <span class=\"hljs-built_in\">len</span>(arr)\n    left, right = <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(arr) - <span class=\"hljs-number\">1</span>\n    ﻿<span class=\"hljs-keyword\">for</span> index in <span class=\"hljs-keyword\">range</span>(<span class=\"hljs-built_in\">len</span>(arr) - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>):\n        <span class=\"hljs-keyword\">if</span> abs(arr[left]) &gt; abs(arr[right]):\n            result[index] = arr[left] ** <span class=\"hljs-number\">2</span>\n            left += <span class=\"hljs-number\">1</span>\n        ﻿<span class=\"hljs-keyword\">else</span>:\n            result[index] = arr[right] ** <span class=\"hljs-number\">2</span>\n            right -= <span class=\"hljs-number\">1</span>\n        \n        index -= <span class=\"hljs-number\">1</span>\n        \n    <span class=\"hljs-keyword\">return</span> result\n</pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sorted_squares</span><span class=\"hljs-params\">(in []<span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> {\n  k := <span class=\"hljs-number\">0</span>\n  j := <span class=\"hljs-built_in\">len</span>(in) - <span class=\"hljs-number\">1</span>\n  out := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(in))\n\n  <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-keyword\">range</span> in {\n    <span class=\"hljs-keyword\">if</span> in[k] * in[k] &gt; in[j] * in[j] {\n      out[<span class=\"hljs-built_in\">len</span>(out)-i<span class=\"hljs-number\">-1</span>] = in[k] * in[k]\n      k++\n    } <span class=\"hljs-keyword\">else</span> {\n      out[<span class=\"hljs-built_in\">len</span>(out)-i<span class=\"hljs-number\">-1</span>] = in[j] * in[j]\n      j--\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> out\n}\n\n</pre><p><br></p><p>Тесты:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">TestSquare</span><span class=\"hljs-params\">(t *testing.T)</span></span> {\n  testCases := []<span class=\"hljs-keyword\">struct</span> {\n    in        []<span class=\"hljs-type\">int</span>\n    expected []<span class=\"hljs-type\">int</span>\n  }{\n    {[]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>}, []<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>}},\n    {[]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">2</span>}, []<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">4</span>}},\n    {[]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>}, []<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>}},\n    {[]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">2</span>}, []<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>}},\n    {[]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">-10</span>, <span class=\"hljs-number\">-10</span>, <span class=\"hljs-number\">-5</span>, <span class=\"hljs-number\">-4</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">10</span>}, []<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">49</span>, <span class=\"hljs-number\">64</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>}},\n  }\n  <span class=\"hljs-keyword\">for</span> _, tc := <span class=\"hljs-keyword\">range</span> testCases {\n    t.Run(fmt.Sprintf(<span class=\"hljs-string\">\"%v\"</span>, tc.in), <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(t *testing.T)</span></span> {\n    actual := square(tc.in)\n\n    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-keyword\">range</span> actual {\n      <span class=\"hljs-keyword\">if</span> actual[i] != tc.expected[i] {\n        t.Errorf(<span class=\"hljs-string\">\"square(%v) == %v; != %v\"</span>, tc.in, actual, tc.expected)    \n      }\n      }\n    })\n  }\n}\n\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 78,
                "title": "Массив"
            },
            {
                "ID": 61,
                "title": "Структуры данных"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:44:59Z",
        "interviewCount": 941,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Дан отсортированный массив чисел. Нужно вернуть отсортированный массив квадратов этих чисел.</span></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Пример:</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">Input: nums = [0, 1, 1, 6, 12, 20]\nOutput: squares = [0, 1, 1, 36, 144, 400]\n\n</pre><p><br></p>",
        "time": 30,
        "title": "Sorted squares"
    },
    {
        "ID": 147,
        "answers": [
            {
                "content": "<p><strong>Решение</strong></p><p>Открывающиеся скобки помещаем на вершину стека. </p><p>Встретив закрывающуюся скобку - проверяем что было на вершине стека:</p><ul><li>Если скобки не совпадают - последовательность неверная. </li><li>Если совпадают - идём дальше.</li></ul><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> boolean <span class=\"hljs-title\">isValid</span><span class=\"hljs-params\">(String s)</span> </span>{\n        Stack&lt;Character&gt; stack = <span class=\"hljs-keyword\">new</span> Stack&lt;&gt;();\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">char</span> c : s.<span class=\"hljs-built_in\">toCharArray</span>()) {\n            <span class=\"hljs-keyword\">if</span> (c == <span class=\"hljs-string\">')'</span> || c == <span class=\"hljs-string\">']'</span> || c == <span class=\"hljs-string\">'}'</span>) {\n                <span class=\"hljs-keyword\">if</span> (stack.<span class=\"hljs-built_in\">isEmpty</span>()) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n\n                <span class=\"hljs-type\">char</span> top = stack.<span class=\"hljs-built_in\">pop</span>();\n\n                <span class=\"hljs-keyword\">if</span> (c == <span class=\"hljs-string\">')'</span> &amp;&amp; top != <span class=\"hljs-string\">'('</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                <span class=\"hljs-keyword\">if</span> (c == <span class=\"hljs-string\">']'</span> &amp;&amp; top != <span class=\"hljs-string\">'['</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                <span class=\"hljs-keyword\">if</span> (c == <span class=\"hljs-string\">'}'</span> &amp;&amp; top != <span class=\"hljs-string\">'{'</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            } <span class=\"hljs-keyword\">else</span> {\n                stack.<span class=\"hljs-built_in\">push</span>(c);\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> stack.<span class=\"hljs-built_in\">isEmpty</span>();\n    }\n}\n\n</pre><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> Solution:\n\n    def is_valid(<span class=\"hljs-keyword\">self</span>, s: str) -&gt; <span class=\"hljs-type\">bool</span>:\n        stack = []\n        dict = { <span class=\"hljs-string\">\"]\"</span>:<span class=\"hljs-string\">\"[\"</span>, <span class=\"hljs-string\">\"}\"</span>:<span class=\"hljs-string\">\"{\"</span>, <span class=\"hljs-string\">\")\"</span>:<span class=\"hljs-string\">\"(\"</span> }\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-type\">char</span> <span class=\"hljs-keyword\">in</span> s:\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-type\">char</span> <span class=\"hljs-keyword\">in</span> dict.values():\n                stack.append(<span class=\"hljs-type\">char</span>)\n            elif <span class=\"hljs-type\">char</span> <span class=\"hljs-keyword\">in</span> dict.keys():\n                <span class=\"hljs-keyword\">if</span> stack == [] or dict[<span class=\"hljs-type\">char</span>] != stack.pop():\n                    <span class=\"hljs-keyword\">return</span> False\n            <span class=\"hljs-keyword\">else</span>:\n                <span class=\"hljs-keyword\">return</span> False\n        <span class=\"hljs-keyword\">return</span> stack == []\n\n</pre><p><br></p><p>Тесты:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">TestIsBracketsCorrect</span><span class=\"hljs-params\">(t *testing.T)</span></span> {\n    testCases := []<span class=\"hljs-keyword\">struct</span> {\n        in       <span class=\"hljs-type\">string</span>\n        expected <span class=\"hljs-type\">bool</span>\n    }{\n        {<span class=\"hljs-string\">\"(hello)\"</span>, <span class=\"hljs-literal\">true</span>},\n        {<span class=\"hljs-string\">\")hello(\"</span>, <span class=\"hljs-literal\">false</span>},\n        {<span class=\"hljs-string\">\"{hello}\"</span>, <span class=\"hljs-literal\">true</span>},\n        {<span class=\"hljs-string\">\"}hello{\"</span>, <span class=\"hljs-literal\">false</span>},\n        {<span class=\"hljs-string\">\"[hello]\"</span>, <span class=\"hljs-literal\">true</span>},\n        {<span class=\"hljs-string\">\"]hello[\"</span>, <span class=\"hljs-literal\">false</span>},\n        {<span class=\"hljs-string\">\"hello\"</span>, <span class=\"hljs-literal\">true</span>},\n        {<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-literal\">true</span>},\n        {<span class=\"hljs-string\">\"(a+b)[0] = {123}\"</span>, <span class=\"hljs-literal\">true</span>},\n        {<span class=\"hljs-string\">\"(a+b)[0] = {123{}\"</span>, <span class=\"hljs-literal\">false</span>},\n        {<span class=\"hljs-string\">\"}\"</span>, <span class=\"hljs-literal\">false</span>},\n        {<span class=\"hljs-string\">\"(})\"</span>, <span class=\"hljs-literal\">false</span>},\n        {<span class=\"hljs-string\">\"({[hello]})\"</span>, <span class=\"hljs-literal\">true</span>},\n        {<span class=\"hljs-string\">\"((a+b)+(b+a))\"</span>, <span class=\"hljs-literal\">true</span>},\n        {<span class=\"hljs-string\">\"[(a+b)+(b+a)]\"</span>, <span class=\"hljs-literal\">true</span>},\n        {<span class=\"hljs-string\">\"[(a+b)+(b+a])\"</span>, <span class=\"hljs-literal\">false</span>},\n        {<span class=\"hljs-string\">\"(abc(q{a{s(sd[qweq]sd)d}sw}e)[zxc[w21]]) x (bca[c[q{s{d(da[adasd]sd)a}da}we]xz](ewq))\"</span>, <span class=\"hljs-literal\">true</span>},\n        {<span class=\"hljs-string\">\"( (*{) (}*) )\"</span>, <span class=\"hljs-literal\">false</span>},\n    }\n    <span class=\"hljs-keyword\">for</span> _, tc := <span class=\"hljs-keyword\">range</span> testCases {\n        t.Run(tc.in, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(t *testing.T)</span></span> {\n            actual := isBracketsCorrect(tc.in)\n\n            <span class=\"hljs-keyword\">if</span> actual != tc.expected {\n                t.Errorf(<span class=\"hljs-string\">\"isBracketsCorrect(%q) = %v; != %v\"</span>, tc.in, actual, tc.expected)\n            }\n        })\n    }\n}\n\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 81,
                "title": "Стек"
            },
            {
                "ID": 61,
                "title": "Структуры данных"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:53:17Z",
        "interviewCount": 902,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Дана строка, содержащая символы-скобки&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">( , { , [ , ) , } , ]</code><span style=\"color: rgb(52, 73, 94);\">. </span></p><p><span style=\"color: rgb(52, 73, 94);\">Необходимо определить, ялвяется ли последовательность скобок корректной</span></p><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">((</span> { [ ] } { } <span class=\"hljs-string\">))</span>\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">(</span> { <span class=\"hljs-string\">)</span> } [ ]\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-literal\">false</span>\n\n</pre>",
        "time": 30,
        "title": "Valid parenthesis"
    },
    {
        "ID": 106,
        "answers": [
            {
                "content": "<p>Исходный массив отсортирован, но в нём могут быть и отрицательные числа. </p><p><br></p><p>Чтобы получить ответ за O(N) необходимо </p><ul><li>либо найти минимальный по модулю элемент и двигаться двумя указателями к краям массива, </li><li>либо двигаться от краёв к середине. </li></ul><p>Второй вариант более компактный и представлен ниже.</p><p><br></p><p>P.S. В условии намеренно не упоминаются отрицательные числа.</p><p>P.P.S. решения вида&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">return arr.map(x -&gt; x*x).sorted()</code>&nbsp;не принимаются</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span>[] <span class=\"hljs-built_in\">sortedSquares</span>(<span class=\"hljs-type\">int</span>[] sortedArr) {\n    <span class=\"hljs-type\">int</span>[] squares = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[sortedArr.length];\n\n    <span class=\"hljs-type\">int</span> l = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">int</span> r = sortedArr.length - <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-type\">int</span> idx = r;\n\n    <span class=\"hljs-keyword\">while</span> (l &lt;= r) {\n        <span class=\"hljs-keyword\">if</span> (Math.<span class=\"hljs-built_in\">abs</span>(sortedArr[l]) &lt;= Math.<span class=\"hljs-built_in\">abs</span>(sortedArr[r]))\n            squares[idx--] = <span class=\"hljs-built_in\">sqr</span>(sortedArr[r--]);\n        <span class=\"hljs-keyword\">else</span>\n            squares[idx--] = <span class=\"hljs-built_in\">sqr</span>(sortedArr[l++]);\n    }\n\n    <span class=\"hljs-keyword\">return</span> squares;\n}\n\n</pre><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def <span class=\"hljs-title function_\">sorted_squares</span><span class=\"hljs-params\">(sorted_arr: List[<span class=\"hljs-type\">int</span>])</span> -&gt; List[<span class=\"hljs-type\">int</span>]:\n    squares = [<span class=\"hljs-number\">0</span>] * len(sorted_arr)\n\n    l, r, idx = <span class=\"hljs-number\">0</span>, len(sorted_arr) - <span class=\"hljs-number\">1</span>, len(sorted_arr) - <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">while</span> l &lt;= r:\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-title function_\">abs</span><span class=\"hljs-params\">(sorted_arr[l])</span> &lt;= abs(sorted_arr[r]):\n            squares[idx] = sorted_arr[r] ** <span class=\"hljs-number\">2</span>\n            r = r - <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            squares[idx] = sorted_arr[l] ** <span class=\"hljs-number\">2</span>\n            l = l + <span class=\"hljs-number\">1</span>\n\n        idx -= <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> squares\n\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 62,
                "title": "Сортировки"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:10:44Z",
        "interviewCount": 820,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Дан отсортированный массив чисел. </span></p><p><span style=\"color: rgb(52, 73, 94);\">Нужно вернуть отсортированный массив квадратов этих чисел.</span></p><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">nums</span> <span class=\"hljs-string\">=</span> [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">20</span>]\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-string\">squares</span> <span class=\"hljs-string\">=</span> [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">36</span>, <span class=\"hljs-number\">144</span>, <span class=\"hljs-number\">400</span>]\n\n</pre>",
        "time": 30,
        "title": "Sorted squares"
    },
    {
        "ID": 47,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">rleCompress</span>(<span class=\"hljs-params\">String input</span>)</span> {\n        StringBuilder <span class=\"hljs-keyword\">out</span> = <span class=\"hljs-keyword\">new</span> StringBuilder();\n\n        <span class=\"hljs-built_in\">int</span> repeat = <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; input.length(); i++) {\n            <span class=\"hljs-built_in\">char</span> ch = input.charAt(i);\n\n            <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">0</span>) {\n                <span class=\"hljs-keyword\">out</span>.append(ch);\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (ch == input.charAt(i - <span class=\"hljs-number\">1</span>)) {\n                repeat++;\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">out</span>.append(repeat);\n                <span class=\"hljs-keyword\">out</span>.append(ch);\n                repeat = <span class=\"hljs-number\">1</span>;\n            }\n        }\n        <span class=\"hljs-keyword\">out</span>.append(repeat);\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">out</span>.toString();\n    }\n}\n\n</pre><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def compress(input: str) -&gt; str:\n    answer <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">\"\"</span>\n    \n    <span class=\"hljs-keyword\">repeat</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(len(input)):\n        <span class=\"hljs-keyword\">if</span> i <span class=\"hljs-operator\">==</span> <span class=\"hljs-number\">0</span>:\n            answer <span class=\"hljs-operator\">+=</span> input[i]\n        elif input[i] <span class=\"hljs-operator\">==</span> input[i<span class=\"hljs-operator\">-</span><span class=\"hljs-number\">1</span>]:\n            <span class=\"hljs-keyword\">repeat</span> <span class=\"hljs-operator\">+=</span> <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            answer <span class=\"hljs-operator\">+=</span> str(<span class=\"hljs-keyword\">repeat</span>)\n            answer <span class=\"hljs-operator\">+=</span> input[i]\n            <span class=\"hljs-keyword\">repeat</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>\n        \n    answer <span class=\"hljs-operator\">+=</span> str(<span class=\"hljs-keyword\">repeat</span>)\n\n    <span class=\"hljs-keyword\">return</span> answer\n\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 67,
                "title": "Compression"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T18:31:51Z",
        "interviewCount": 770,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p>Дан массив символов - буквы английского алфавита. </p><p>Символы часто повторяются - один символ подряд несколько раз.</p><p><br></p><p>Нужно реализовать RLE сжатие - писать символ в output только один раз, а следом за ним - число повторений.</p><p><br></p><p><strong>Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">AAAAABBBCDDDDEEF</span>\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-string\">A5B3C1D4E2F1</span>\n\n</pre>",
        "time": 30,
        "title": "Run Length Encoding (RLE)"
    },
    {
        "ID": 136,
        "answers": [
            {
                "content": "<p>Ищем два минимальных, либо два максимальных элемента.</p><p>Тут важные моменты:</p><ul><li>учесть возможность отрицательных чисел</li><li>нормальная инициализация минимумов-максимумов</li><li>нормальная обработка всех кейсов с длиной листа &gt;= 2</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">def max_product_in_array(nums: List[int]) -&gt; int:<br/>    if len(nums) == 2:<br/>        return nums[0] * nums[1]<br/>    <br/>    pos1 = pos2 = neg1 = neg2 = 0<br/><br/>    for num in nums:<br/>        if num &gt; 0:<br/>            if num &gt; pos1:<br/>                pos1, pos2 = num, pos1<br/>            elif num &gt; pos2:<br/>                pos2 = num<br/>        elif num &lt; 0:<br/>            if num &lt; neg1:<br/>                neg1, neg2 = num, neg1<br/>            elif num &lt; neg2:<br/>                neg2 = num<br/><br/>    return max(pos1 * pos2, neg1 * neg2)<br/><br/></pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 78,
                "title": "Массив"
            },
            {
                "ID": 61,
                "title": "Структуры данных"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:41:19Z",
        "interviewCount": 741,
        "question": "<p><a href=\"http://platform.gp.o3.ru/committee/#/algo/structs/array?id=%d0%a1%d0%bb%d0%be%d0%b6%d0%bd%d0%be%d1%81%d1%82%d1%8c-easy\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(52, 73, 94);\"><u>Сложность: </u><strong><u>EASY</u></strong></a></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Дан массив чисел, содержащий минимум два элемента. Нужно найти максимальное произведение двух элементов в этом массиве.</span></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Пример:</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">nums</span> <span class=\"hljs-string\">=</span> [<span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-5</span>, <span class=\"hljs-number\">4</span>]\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-number\">16</span>\n<span class=\"hljs-attr\">Explanation:</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-string\">*</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-number\">16</span>\n\n</pre>",
        "time": 30,
        "title": "Max product in array"
    },
    {
        "ID": 86,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">В конструкторе строим массив с кумулятивными суммами. Для данного примера он выглядел бы так:</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">[0, 0.1, 0.3, 1.0]\n/a,  b ,  c ,  Ø /\n</pre><p><br></p><p>Далее, можно вызывать random() и искать полученное значение в массиве.</p><p>К примеру, выпало значение 0.05 --&gt; получили нулевой индекс в массиве --&gt; значит используем символ \"a\".</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Sampler</span> {\n    \n    <span class=\"hljs-built_in\">double</span>[] cumSum;\n    String[] labels;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Sampler</span>(<span class=\"hljs-params\">List&lt;Pair&lt;String, Double&gt;&gt; input</span>)</span> {\n        cumSum = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">double</span>[input.size() + <span class=\"hljs-number\">1</span>];\n        labels = <span class=\"hljs-keyword\">new</span> String[input.size()];\n        \n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; input.size(); i++) {\n            labels[i] = input.<span class=\"hljs-keyword\">get</span>(i).getFirst();\n            cumSum[i + <span class=\"hljs-number\">1</span>] = cumSum[i] + input.<span class=\"hljs-keyword\">get</span>(i).getSecond();\n        }\n    }\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">sample</span>()</span> {\n        <span class=\"hljs-built_in\">double</span> x = Math.random();\n        \n        <span class=\"hljs-built_in\">int</span> idx = search(cumSum, x); <span class=\"hljs-comment\">// linear or binary</span>\n        \n        <span class=\"hljs-keyword\">return</span> labels[idx];\n    }\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">search</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span>[] arr, <span class=\"hljs-built_in\">double</span> x</span>)</span> {\n        <span class=\"hljs-built_in\">int</span> l = <span class=\"hljs-number\">0</span>, r = arr.length - <span class=\"hljs-number\">1</span>;\n        \n        <span class=\"hljs-keyword\">while</span> (l &lt; r) {\n            <span class=\"hljs-built_in\">int</span> mid = (l + r) / <span class=\"hljs-number\">2</span>;\n            <span class=\"hljs-built_in\">double</span> val = arr[m];\n            \n            <span class=\"hljs-keyword\">if</span> (x &gt; val) {\n                l = m + <span class=\"hljs-number\">1</span>;\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (x &lt; val) {\n                r = m - <span class=\"hljs-number\">1</span>;\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">return</span> m;\n            }\n        }\n        \n        <span class=\"hljs-keyword\">return</span> l &gt; <span class=\"hljs-number\">0</span> ? l - <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>;\n    }\n}\n\n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 66,
                "title": "Математика"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T18:51:08Z",
        "interviewCount": 545,
        "question": "<p><u>Сложность: </u><strong><u>MEDIUM</u></strong></p><p><br></p><p>Дан список пар вида <code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">[[\"a\", 0.1], [\"b\", 0.2], [\"c\", 0.7]]</code>.</p><p><br></p><p>В парах первый элемент — некоторый уникальный объект, второй элемент — его вероятность.</p><p><br></p><p>Нужно написать класс, принимающий указанный массив в конструкторе. </p><p>Класс должен содержать метод&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">sample()</code>. </p><p>Этот метод должен возвращать случайный объект из массива с заданными вероятностями. </p><p><br></p><p>Т.е. в примере выше в 10% случаев метод должен возвращать&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">\"a\"</code>, в 20% случаев —&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">\"b\"</code>, и в 70% случаев —&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">\"c\"</code>.</p>",
        "time": 45,
        "title": "Probabilistic sampling"
    },
    {
        "ID": 154,
        "answers": [
            {
                "content": "<p>Сохраняем в хештаблице разницу между&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">target</code>&nbsp;и текущим элементом массива. </p><p>В качестве значения пишем индекс текущего элемента.</p><p><br></p><p>Для каждого элемента ищем в этой хештаблице недостающую пару. Если она найдена - победа.</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span>[] <span class=\"hljs-title\">twoSum</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span>[] nums, <span class=\"hljs-built_in\">int</span> target</span>)</span> {\n        Map&lt;Integer, Integer&gt; complement2idx = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.length; i++) {\n            <span class=\"hljs-built_in\">int</span> num = nums[i];\n\n            <span class=\"hljs-keyword\">if</span> (complement2idx.containsKey(target - num)) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[] {complement2idx.<span class=\"hljs-keyword\">get</span>(target - num), i};\n            } <span class=\"hljs-keyword\">else</span> {\n                comp2idx.put(num, i);\n            }\n        }\n\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalStateException(<span class=\"hljs-string\">\"Should not happen\"</span>);\n    }\n}\n\n</pre><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def <span class=\"hljs-title function_\">two_sum</span><span class=\"hljs-params\">(nums: List[<span class=\"hljs-type\">int</span>], target: <span class=\"hljs-type\">int</span>)</span> -&gt; List[<span class=\"hljs-type\">int</span>]:\n    seen = {}\n    <span class=\"hljs-keyword\">for</span> i, value in <span class=\"hljs-title function_\">enumerate</span><span class=\"hljs-params\">(nums)</span>:\n        complement = target - nums[i]\n           \n        <span class=\"hljs-keyword\">if</span> complement in seen:\n            <span class=\"hljs-keyword\">return</span> [i, seen[complement]]\n        <span class=\"hljs-keyword\">else</span>:\n            seen[value] = i\n\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 83,
                "title": "Хеш таблица"
            },
            {
                "ID": 61,
                "title": "Структуры данных"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:58:55Z",
        "interviewCount": 522,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Дан массив чисел&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">numbers</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;и число&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">target</code><span style=\"color: rgb(52, 73, 94);\">. </span></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Необходимо найти пару чисел, сумма которых даёт&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">target</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;и вернуть индексы этих элементов в массиве. </span></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Гарантируется, что входные данные подобраны правильным образом и решение обязательно будет.</span></p><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">numbers</span> <span class=\"hljs-string\">=</span> [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">15</span>]<span class=\"hljs-string\">,</span> <span class=\"hljs-string\">target</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-number\">9</span>\n<span class=\"hljs-attr\">Output:</span> [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>]\n<span class=\"hljs-attr\">Explanation:</span> <span class=\"hljs-string\">числа</span> <span class=\"hljs-string\">на</span> <span class=\"hljs-string\">позициях</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">и</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">дают</span> <span class=\"hljs-string\">в</span> <span class=\"hljs-string\">сумме</span> <span class=\"hljs-string\">target</span>\n\n</pre><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Follow-up:</strong><span style=\"color: rgb(52, 73, 94);\"> то же самое для трёх чисел.</span></p>",
        "time": 30,
        "title": "Two sum"
    },
    {
        "ID": 1824,
        "answers": [
            {
                "content": "<p>\"Big O notation\" показывает эффективность алгоритма в зависимости от размера входных данных.</p><p><br></p><p>O(n) означает, что алгоритм зависит от размера входных данных линейно, т.е. если кол-во данных вырастет в два раза, то время работы алгоритма тоже вырастет в два раза.</p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p><strong>O(n)</strong> является верхним пределом эффективности работы алгоритма с точки зрения памяти / времени исполнения.</p><p><br></p><p><strong>O(1)</strong> - константное время исполнения, т.е. время не зависит от размера входных данных. </p><p><strong>Пример</strong>: чтение элемента массива по индеесу или чтение по ключу из хештаблицы, в которой нет коллизий.</p><p><br></p><p><strong>O(logN)</strong> логарифмическое время исполнения, т.е. при росте размера входных данных в 2^N раз, время исполнения вырастет на N условных единиц.</p><p><strong>Пример</strong>: бинарный поиск элемента в массиве, поиск элемента в бинарном дереве поиска.</p><p><br></p><p><strong>O(n)</strong> линейное время исполнения, т.е. при росте входных данных в N раз, время исполнения увеличится в N раз.</p><p><strong>Пример:</strong> обход списка</p><p><br></p><p><strong>O(n * log(n))</strong>. </p><p><strong>Пример:</strong> сортировка массива</p><p><br></p><p><strong>O(n ^ 2) </strong>квадратичная сложность</p><p><strong>Пример:</strong> двойной проход в цикле по массиву, как в сортировке пузырьком.</p><p><br></p><p>Запись <strong>O(4 * n)</strong> не является общепринятой. Принято не указывать константы в определении Big O. Вероятно данной записью авторы хотели подчеркнуть, что на один элемент входных данных приходится 4 операции.</p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2023-07-04T08:30:53Z",
        "interviewCount": 508,
        "question": "<p>Иногда говорят \"алгоритм работает за O(n)\".</p><ol><li>Что это значит? Что такое О, что такое n?</li><li>Какие O(...) ты знаешь? Можешь привести примеры?</li><li>Можно ли сказать, что сложность алгоритма <strong>O(4 * n)</strong>? Что это значит?</li></ol>",
        "time": 3,
        "title": "Что такое O(n)?"
    },
    {
        "ID": 128,
        "answers": [
            {
                "content": "<p>У этой задачи есть два варианта решения — одно, попроще, это когда при встрече \"[\" ищется соотвествующая закрывающая скобка, что приводит к повторному перебору символов во вложенных конструкциях (после захода в рукурсию), и так эту задачу решает 95% кандидатов.</p><p><br></p><p>Go:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">decode_str</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> {\n\tres := <span class=\"hljs-string\">\"\"</span>\n\tcurr_num := <span class=\"hljs-number\">0</span>\n\tdepth := <span class=\"hljs-number\">0</span>\n\tbuf := <span class=\"hljs-string\">\"\"</span> <span class=\"hljs-comment\">// contains '[]' contents</span>\n\n\n\t<span class=\"hljs-keyword\">for</span> _, ch := <span class=\"hljs-keyword\">range</span> s {\n\t\t<span class=\"hljs-keyword\">if</span> depth == <span class=\"hljs-number\">0</span> &amp;&amp; ch &gt;= <span class=\"hljs-string\">'0'</span> &amp;&amp; ch &lt;= <span class=\"hljs-string\">'9'</span> {\n\t\t\tcurr_num = curr_num*<span class=\"hljs-number\">10</span> + <span class=\"hljs-type\">int</span>(ch-<span class=\"hljs-string\">'0'</span>)\n\t\t\t<span class=\"hljs-keyword\">continue</span>\n\t\t}\n\n\t\t<span class=\"hljs-keyword\">if</span> ch == <span class=\"hljs-string\">'['</span> {\n\t\t\tdepth++\n\t\t\t<span class=\"hljs-keyword\">if</span> depth == <span class=\"hljs-number\">1</span> { <span class=\"hljs-comment\">// don't add '[' in the 0 nesting level</span>\n\t\t\t\t<span class=\"hljs-keyword\">continue</span>\n\t\t\t}\n\t\t}\n\n\t\t<span class=\"hljs-keyword\">if</span> ch == <span class=\"hljs-string\">']'</span> {\n\t\t\tdepth--\n\t\t\t<span class=\"hljs-keyword\">if</span> depth == <span class=\"hljs-number\">0</span> {\n\t\t\t\tres += strings.Repeat(decode_str(buf), curr_num)\n\t\t\t\tbuf = <span class=\"hljs-string\">\"\"</span>\n\t\t\t\tcurr_num = <span class=\"hljs-number\">0</span>\n\t\t\t\t<span class=\"hljs-keyword\">continue</span>\n\t\t\t}\n\t\t}\n\n\t\t<span class=\"hljs-keyword\">if</span> depth == <span class=\"hljs-number\">0</span> {\n\t\t\tres += <span class=\"hljs-type\">string</span>(ch)\n\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\tbuf += <span class=\"hljs-type\">string</span>(ch)\n\t\t}\n\t}\n\n\t<span class=\"hljs-keyword\">return</span> res\n}\n</pre>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Решение на 19 грейд — это написание потокового парсера, который умеет заходить в рекурсию «вслепую», как только встречает \"[\"</p><p><br></p><p>Java:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\n\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">decodeString</span><span class=\"hljs-params\">(String s)</span> {\n        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\n\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">repeats</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-keyword\">for</span> (; i &lt; s.length(); i++) {\n            <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> s.charAt(i);\n\n            <span class=\"hljs-keyword\">if</span> (Character.isDigit(c)) {\n                repeats = <span class=\"hljs-number\">10</span> * repeats + (c - <span class=\"hljs-string\">'0'</span>);\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (c == <span class=\"hljs-string\">']'</span>) {\n                <span class=\"hljs-keyword\">return</span> sb.toString();\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (c == <span class=\"hljs-string\">'['</span>) {\n                i++;\n\n                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">subProblem</span> <span class=\"hljs-operator\">=</span> decodeString(s);\n\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; repeats; j++) {\n                    sb.append(subProblem);\n                }\n\n                repeats = <span class=\"hljs-number\">0</span>;\n            } <span class=\"hljs-keyword\">else</span> {\n                sb.append(c);\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> sb.toString();\n    }\n}\n</pre><p><br></p><p>Хитрый вариант на Python:</p><pre class=\"ql-syntax\" spellcheck=\"false\">def decode_string(input: str) -&gt; str:\n    stack = []\n    curr_num = <span class=\"hljs-number\">0</span>\n    curr_str = <span class=\"hljs-string\">''</span>\n    \n    for ch in input:\n        if ch == <span class=\"hljs-string\">'['</span>:\n            stack.<span class=\"hljs-built_in\">append</span>(curr_str)\n            stack.<span class=\"hljs-built_in\">append</span>(curr_num)\n            curr_str = <span class=\"hljs-string\">''</span>\n            curr_num = <span class=\"hljs-number\">0</span>\n        elif ch == <span class=\"hljs-string\">']'</span>:\n            num = stack.<span class=\"hljs-built_in\">pop</span>()\n            prev_str = stack.<span class=\"hljs-built_in\">pop</span>()\n            curr_str = prev_str + num * curr_str\n        elif ch.<span class=\"hljs-built_in\">isdigit</span>():\n            curr_num = <span class=\"hljs-number\">10</span> * curr_num + <span class=\"hljs-built_in\">int</span>(ch)\n        else:\n            curr_str += ch\n    \n    return curr_str\n</pre><p><br></p><p>Go:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"fmt\"</span>\n\t<span class=\"hljs-string\">\"strings\"</span>\n)\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\t<span class=\"hljs-keyword\">var</span> decode_str <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span>\n\ti := <span class=\"hljs-number\">0</span>\n\n\tdecode_str = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> {\n\t\tres := <span class=\"hljs-string\">\"\"</span>\n\t\tcurr_num := <span class=\"hljs-number\">0</span>\n\n\t\t<span class=\"hljs-keyword\">for</span> ; i &lt; <span class=\"hljs-built_in\">len</span>(s); i++ {\n\t\t\t<span class=\"hljs-keyword\">if</span> s[i] &gt;= <span class=\"hljs-string\">'0'</span> &amp;&amp; s[i] &lt;= <span class=\"hljs-string\">'9'</span> {\n\t\t\t\tcurr_num = curr_num*<span class=\"hljs-number\">10</span> + <span class=\"hljs-type\">int</span>(s[i]-<span class=\"hljs-string\">'0'</span>)\n\t\t\t\t<span class=\"hljs-keyword\">continue</span>\n\t\t\t}\n\n\t\t\t<span class=\"hljs-keyword\">if</span> s[i] == <span class=\"hljs-string\">'['</span> {\n\t\t\t\ti++\n\t\t\t\tres += strings.Repeat(decode_str(s), curr_num)\n\t\t\t\tcurr_num = <span class=\"hljs-number\">0</span>\n\t\t\t\t<span class=\"hljs-keyword\">continue</span>\n\t\t\t}\n\n\t\t\t<span class=\"hljs-keyword\">if</span> s[i] == <span class=\"hljs-string\">']'</span> {\n\t\t\t\t<span class=\"hljs-keyword\">return</span> res\n\t\t\t}\n\n\t\t\tres += <span class=\"hljs-type\">string</span>(s[i])\n\t\t}\n\n\t\t<span class=\"hljs-keyword\">return</span> res\n\t}\n\n\tfmt.Println(decode_str(<span class=\"hljs-string\">\"a1[b2[c]d12[e]]f0[z]\"</span>))\n}\n</pre>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 64,
                "title": "Строки"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:25:36Z",
        "interviewCount": 467,
        "question": "<p><u>Сложность: </u><strong><u>MEDIUM</u></strong></p><p><br></p><p>Дана закодированная строка следующего формата:&nbsp;<code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">k[encoded_text]</code></p><p>Здесь&nbsp;<code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">k</code>&nbsp;это число повторений строки&nbsp;<code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">encoded_text</code>.</p><p><br></p><p>Строка гарантированно имеет корректный формат: нет лишних пробелов, скобки всегда правильные и тд.</p><p><br></p><p>Необходимо декодировать строку</p><p><br></p><p><strong>Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">Input:  <span class=\"hljs-string\">\"3[a]2[bc]\"</span>\nOutput: <span class=\"hljs-string\">\"aaabcbc\"</span>\n\nInput:  <span class=\"hljs-string\">\"3[a2[c]]\"</span>\nOutput: <span class=\"hljs-string\">\"accaccacc\"</span>\n\nInput:  <span class=\"hljs-string\">\"2[abc]3[cd]ef\"</span>\nOutput: <span class=\"hljs-string\">\"abcabccdcdcdef\"</span>\n\n</pre>",
        "time": 45,
        "title": "Decode string"
    },
    {
        "ID": 74,
        "answers": [
            {
                "content": "<p>Можно проверить, что число делится на 2 без остатка в цикле, пока не дойдет до 1</p><p><br></p><p>ИЛИ</p><p><br></p><p>Можно посчитать кол-во единичек в двоичном представлении, у степеней двойки их число равно 1</p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">boolean</span> <span class=\"hljs-title function_\">isPowerOfTwo1</span>(<span class=\"hljs-params\">int n</span>) {\n        <span class=\"hljs-keyword\">if</span> (n &lt;= <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n\n        <span class=\"hljs-keyword\">do</span> {\n            <span class=\"hljs-keyword\">if</span> (n % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n\n            n = n / <span class=\"hljs-number\">2</span>;\n        } <span class=\"hljs-keyword\">while</span> (n &gt; <span class=\"hljs-number\">1</span>);\n\n        <span class=\"hljs-keyword\">return</span> n == <span class=\"hljs-number\">1</span>;\n    }\n    \n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">boolean</span> <span class=\"hljs-title function_\">isPowerOfTwo2</span>(<span class=\"hljs-params\">int n</span>) {\n        <span class=\"hljs-keyword\">return</span> n &gt; <span class=\"hljs-number\">0</span> &amp;&amp; <span class=\"hljs-title class_\">Integer</span>.<span class=\"hljs-title function_\">bitCount</span>(n) == <span class=\"hljs-number\">1</span>;\n    }\n}\n\n</pre><p><br></p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-string\">def</span> <span class=\"hljs-string\">is_power_of_two(n:</span> <span class=\"hljs-string\">int)</span> <span class=\"hljs-string\">-&gt;</span> <span class=\"hljs-attr\">bool:</span>\n﻿  <span class=\"hljs-string\">if</span> <span class=\"hljs-string\">n</span> <span class=\"hljs-string\">&lt;=</span> <span class=\"hljs-attr\">0:</span> <span class=\"hljs-string\">return</span> <span class=\"hljs-literal\">False</span>\n  <span class=\"hljs-string\">if</span> <span class=\"hljs-string\">n</span> <span class=\"hljs-string\">==</span> <span class=\"hljs-attr\">1:</span> <span class=\"hljs-string\">return</span> <span class=\"hljs-literal\">True</span>\n\n  <span class=\"hljs-string\">while</span> <span class=\"hljs-string\">n</span> <span class=\"hljs-type\">!=</span> <span class=\"hljs-attr\">1:</span>\n    <span class=\"hljs-string\">if</span> <span class=\"hljs-string\">n</span> <span class=\"hljs-string\">%</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-type\">!=</span> <span class=\"hljs-attr\">0:</span> \n      <span class=\"hljs-string\">return</span> <span class=\"hljs-literal\">False</span>\n    \n    <span class=\"hljs-string\">n</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">n</span> <span class=\"hljs-string\">/</span> <span class=\"hljs-number\">2</span>\n    \n  <span class=\"hljs-string\">return</span> <span class=\"hljs-string\">n</span> <span class=\"hljs-string\">==</span> <span class=\"hljs-number\">1</span>\n    \n</pre>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>Человек понимает битовое представление и кроме того что выше предлагает «срезать углы» для частной задачи в 32 бита сделав быстро работающее решение, что в целом обычно и требуется</p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">func is_power_of_two(n int) bool {\n\treturn n == <span class=\"hljs-number\">0</span>b00000000000000000000000000000001 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00000000000000000000000000000010 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00000000000000000000000000000100 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00000000000000000000000000001000 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00000000000000000000000000010000 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00000000000000000000000000100000 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00000000000000000000000001000000 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00000000000000000000000010000000 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00000000000000000000000100000000 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00000000000000000000001000000000 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00000000000000000000010000000000 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00000000000000000000100000000000 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00000000000000000001000000000000 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00000000000000000010000000000000 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00000000000000000100000000000000 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00000000000000001000000000000000 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00000000000000010000000000000000 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00000000000000100000000000000000 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00000000000001000000000000000000 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00000000000010000000000000000000 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00000000000100000000000000000000 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00000000001000000000000000000000 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00000000010000000000000000000000 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00000000100000000000000000000000 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00000001000000000000000000000000 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00000010000000000000000000000000 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00000100000000000000000000000000 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00001000000000000000000000000000 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00010000000000000000000000000000 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b00100000000000000000000000000000 <span class=\"hljs-string\">||</span>\n           n == <span class=\"hljs-number\">0</span>b01000000000000000000000000000000\n}\n</pre><p><br></p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>C/asm бекграунд</p><p><br></p><p>Тут уже идет либо инструкция POCNT</p><p><a href=\"https://www.felixcloutier.com/x86/popcnt\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.felixcloutier.com/x86/popcnt</a></p><p><br></p><p>либо более простое решение — любое число где есть только один бит-единица при вычитании 1 дает число вида 000011111, которое всегда дает 0 при AND с исходным числом</p><p><br></p><p>Пример</p><p>8 = 100b</p><p>8-1 = 11b</p><p>100b &amp; 11b = 0</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">is_power_of_two</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">bool</span> {\n\t<span class=\"hljs-keyword\">return</span> n &gt; <span class=\"hljs-number\">0</span> &amp;&amp; (n &amp; (n<span class=\"hljs-number\">-1</span>) == <span class=\"hljs-number\">0</span>)\n}\n</pre><p><br></p>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 66,
                "title": "Математика"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T18:47:09Z",
        "interviewCount": 443,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Для заданного числа&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">x</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;определить, является ли оно степенью двойки</span></p><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Пример:</strong></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">Input: x = 120\nOutput: false\n\nInput: x = 4096\nOutput: true\n\n</pre>",
        "time": 7,
        "title": "Power of two"
    },
    {
        "ID": 144,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Создаём два указателя, и делаем между ними зазор в N элементов. Синхронно смещаем эти указатели вдоль списка, пока правый не дойдет до конца. В этот момент левый будет указывать на элемент, который нужно удалить.</span></p><p>Возможно решение в два прохода - в первом посчитать количество элементов в списке&nbsp;<code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">L</code>, во втором пройти вправо&nbsp;<code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">L-n</code>&nbsp;элементов и удалить нужный.</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ListNode</span> {<br/>     <span class=\"hljs-type\">int</span> val;<br/>     ListNode next;<br/>}<br/><br/><span class=\"hljs-keyword\">public</span> ListNode <span class=\"hljs-title function_\">removeNthFromEnd</span><span class=\"hljs-params\">(ListNode head, <span class=\"hljs-type\">int</span> n)</span> {<br/>    <span class=\"hljs-type\">ListNode</span> <span class=\"hljs-variable\">dummy</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ListNode</span>(val=<span class=\"hljs-number\">0</span>, next=head);<br/>    <br/>    <span class=\"hljs-type\">ListNode</span> <span class=\"hljs-variable\">left</span> <span class=\"hljs-operator\">=</span> dummy, right = dummmy;<br/>    <br/>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt;= n; i++) { <span class=\"hljs-comment\">// create gap</span><br/>        right = right.next;<br/>    }<br/><br/>    <span class=\"hljs-keyword\">while</span> (right != <span class=\"hljs-literal\">null</span>) { <span class=\"hljs-comment\">// move to the desired element</span><br/>        left = left.next;<br/>        right = right.next;<br/>    }<br/>    <br/>    left.next = left.next.next; <span class=\"hljs-comment\">// deletion</span><br/>    <br/>    <span class=\"hljs-keyword\">return</span> dummy.next;<br/>}<br/><br/></pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def remove_nth_from_end(head: ListNode, n: int) -&gt; ListNode:<br/>    left, right = head, head<br/>    <br/>    for _ in range(n): <br/>        right = right.next<br/>    <br/>    if not right: # edge case with removing head <br/>        return head.next<br/>    <br/>    while right: <br/>        left, right = left.next, right.next<br/>    <br/>    left.next = left.next.next # deletion<br/>    <br/>    return head<br/><br/></pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 79,
                "title": "Связные списки"
            },
            {
                "ID": 61,
                "title": "Структуры данных"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:50:28Z",
        "interviewCount": 439,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Дан односвязный список. Нужно удалить N-й элемент с конца. Вернуть ссылку на&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">head</code><span style=\"color: rgb(52, 73, 94);\">.</span></p><p><br></p><p>Пример:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span>  [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>]<span class=\"hljs-string\">,</span> <span class=\"hljs-string\">n</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-attr\">Output:</span> [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>]\n\n</pre>",
        "time": 30,
        "title": "Remove Nth element from the end"
    },
    {
        "ID": 137,
        "answers": [
            {
                "content": "<p>Решение:</p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">func removeDuplicates(elements []int) []int {</div><div class=\"ql-code-block\" data-language=\"plain\">    seen := map[int]bool{}</div><div class=\"ql-code-block\" data-language=\"plain\">    result := []int{}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">    for v := range elements {</div><div class=\"ql-code-block\" data-language=\"plain\">        if seen[elements[v]] == false {</div><div class=\"ql-code-block\" data-language=\"plain\">            seen[elements[v]] = true</div><div class=\"ql-code-block\" data-language=\"plain\">            result = append(result, elements[v])</div><div class=\"ql-code-block\" data-language=\"plain\">        }</div><div class=\"ql-code-block\" data-language=\"plain\">    }</div><div class=\"ql-code-block\" data-language=\"plain\">    return result</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div></pre><p><br></p><p><br></p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">const removeDuplicates = (l: number[]): number[] =&gt; {</div><div class=\"ql-code-block\" data-language=\"plain\">  // but that case needs \"downlevelIteration\": true at tsconfig.json</div><div class=\"ql-code-block\" data-language=\"plain\">  return [...new Set(l)];</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">const removeDuplicates2 = (l: number[]): number[] =&gt; {</div><div class=\"ql-code-block\" data-language=\"plain\">  return l.reduce((unique: number[], item) =&gt; unique.includes(item) ? unique : [...unique, item], []);</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">const removeDuplicates3 = (l: number[]): number[] =&gt; {</div><div class=\"ql-code-block\" data-language=\"plain\">  return l.filter((x, index) =&gt; l.indexOf(x) === index);</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div></pre><p><br></p><p><br></p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">def remove_duplicates(l: List[int]) -&gt; List[int]:</div><div class=\"ql-code-block\" data-language=\"plain\">    return list(set(l))</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">def remove_duplicates_2(l: List[int]) -&gt; List[int]:</div><div class=\"ql-code-block\" data-language=\"plain\">    result = list()</div><div class=\"ql-code-block\" data-language=\"plain\">    [result.append(x) for x in l if x not in result]</div><div class=\"ql-code-block\" data-language=\"plain\">    return result</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div></pre><p><br></p><p>Тесты:</p><p><br></p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">import (</div><div class=\"ql-code-block\" data-language=\"plain\">  \"math\"</div><div class=\"ql-code-block\" data-language=\"plain\">    \"reflect\"</div><div class=\"ql-code-block\" data-language=\"plain\">    \"testing\"</div><div class=\"ql-code-block\" data-language=\"plain\">)</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">func TestRemoveDuplicatesCorrect(t *testing.T) {</div><div class=\"ql-code-block\" data-language=\"plain\">    testCases := []struct {</div><div class=\"ql-code-block\" data-language=\"plain\">        name     string</div><div class=\"ql-code-block\" data-language=\"plain\">        in       []int</div><div class=\"ql-code-block\" data-language=\"plain\">        expected []int</div><div class=\"ql-code-block\" data-language=\"plain\">    }{</div><div class=\"ql-code-block\" data-language=\"plain\">        {\"Two duplicates\", []int{1, 2, 2}, []int{1, 2}},</div><div class=\"ql-code-block\" data-language=\"plain\">        {\"Several duplicates\", []int{1, 2, 2, 3, 3}, []int{1, 2, 3}},</div><div class=\"ql-code-block\" data-language=\"plain\">        {\"Reversed order\", []int{2, 2, 1}, []int{2, 1}},</div><div class=\"ql-code-block\" data-language=\"plain\">        {\"Unsorted list\", []int{3, 3, 1, 2}, []int{3, 1, 2}},</div><div class=\"ql-code-block\" data-language=\"plain\">        {\"With minimum\", []int{3, 2, 1, 2, 3}, []int{3, 2, 1}},</div><div class=\"ql-code-block\" data-language=\"plain\">        {\"With two minimums\", []int{3, 2, 1, 2, 3, 2, 1, 2, 3}, []int{3, 2, 1}},</div><div class=\"ql-code-block\" data-language=\"plain\">        {\"Only one several times\", []int{4, 4, 4}, []int{4}},</div><div class=\"ql-code-block\" data-language=\"plain\">        {\"x32 Max and min, with sign\", []int{math.MaxInt32, math.MinInt32, math.MaxInt32, math.MinInt32}, []int{math.MaxInt32, math.MinInt32}},</div><div class=\"ql-code-block\" data-language=\"plain\">        {\"x64 Max and min, with sign\", []int{math.MaxInt64, math.MinInt64, math.MaxInt64, math.MinInt64}, []int{math.MaxInt64, math.MinInt64}},</div><div class=\"ql-code-block\" data-language=\"plain\">        {\"With sign\", []int{-1, 0, 1, -1}, []int{-1, 0, 1}},</div><div class=\"ql-code-block\" data-language=\"plain\">        {\"Empty\", []int{}, []int{}},</div><div class=\"ql-code-block\" data-language=\"plain\">    }</div><div class=\"ql-code-block\" data-language=\"plain\">    for _, tc := range testCases {</div><div class=\"ql-code-block\" data-language=\"plain\">        t.Run(tc.name, func(t *testing.T) {</div><div class=\"ql-code-block\" data-language=\"plain\">            actual := removeDuplicates(tc.in)</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">            if !reflect.DeepEqual(removeDuplicates(tc.in), tc.expected) {</div><div class=\"ql-code-block\" data-language=\"plain\">                t.Errorf(\"removeDuplicates(%q) = %v != %v\", tc.name, actual, tc.expected)</div><div class=\"ql-code-block\" data-language=\"plain\">            }</div><div class=\"ql-code-block\" data-language=\"plain\">        })</div><div class=\"ql-code-block\" data-language=\"plain\">    }</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div></pre><p><br></p><p><br></p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">describe('#removeDuplicates()', () =&gt; {</div><div class=\"ql-code-block\" data-language=\"plain\">  const TESTS = [</div><div class=\"ql-code-block\" data-language=\"plain\">  const TESTS = [</div><div class=\"ql-code-block\" data-language=\"plain\">    { orig: [1, 2, 2], exp: [1, 2] },</div><div class=\"ql-code-block\" data-language=\"plain\">    { orig: [1, 2, 2, 3, 3], exp: [1, 2, 3] },</div><div class=\"ql-code-block\" data-language=\"plain\">    { orig: [2, 2, 1], exp: [2, 1] },</div><div class=\"ql-code-block\" data-language=\"plain\">    { orig: [3, 3, 1, 2], exp: [3, 1, 2] },</div><div class=\"ql-code-block\" data-language=\"plain\">    { orig: [3, 2, 1, 2, 3], exp: [3, 2, 1] },</div><div class=\"ql-code-block\" data-language=\"plain\">    { orig: [3, 2, 1, 2, 3, 2, 1, 2, 3], exp: [3, 2, 1] },</div><div class=\"ql-code-block\" data-language=\"plain\">    { orig: [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER],</div><div class=\"ql-code-block\" data-language=\"plain\">      exp: [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER] },</div><div class=\"ql-code-block\" data-language=\"plain\">    { orig: [-1, 0, 1, -1], exp: [-1, 0, 1] },</div><div class=\"ql-code-block\" data-language=\"plain\">    { orig: [], exp: [] },</div><div class=\"ql-code-block\" data-language=\"plain\">  ];</div><div class=\"ql-code-block\" data-language=\"plain\">  ];</div><div class=\"ql-code-block\" data-language=\"plain\">  const FUNCS = [</div><div class=\"ql-code-block\" data-language=\"plain\">    removeDuplicates, removeDuplicates2, removeDuplicates3,</div><div class=\"ql-code-block\" data-language=\"plain\">  ]</div><div class=\"ql-code-block\" data-language=\"plain\">  FUNCS.forEach((f) =&gt; {</div><div class=\"ql-code-block\" data-language=\"plain\">    TESTS.forEach((t) =&gt; {</div><div class=\"ql-code-block\" data-language=\"plain\">      it(`${f.name} orig = ${t.orig}`, () =&gt; {</div><div class=\"ql-code-block\" data-language=\"plain\">        expect(f(t.orig)).toEqual(t.exp);</div><div class=\"ql-code-block\" data-language=\"plain\">      })</div><div class=\"ql-code-block\" data-language=\"plain\">    });</div><div class=\"ql-code-block\" data-language=\"plain\">  });</div><div class=\"ql-code-block\" data-language=\"plain\">});</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div></pre><p><br></p><p><br></p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">import pytest</div><div class=\"ql-code-block\" data-language=\"plain\">import sys</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># NB in case of set we will not save an order of appearance</div><div class=\"ql-code-block\" data-language=\"plain\">test_cases_set = [</div><div class=\"ql-code-block\" data-language=\"plain\">    ([1, 2, 2], [1, 2]),</div><div class=\"ql-code-block\" data-language=\"plain\">    ([1, 2, 2, 3, 3], [1, 2, 3]),</div><div class=\"ql-code-block\" data-language=\"plain\">    ([2, 2, 1], [1, 2]),</div><div class=\"ql-code-block\" data-language=\"plain\">    ([3, 3, 1, 2], [1, 2, 3]),</div><div class=\"ql-code-block\" data-language=\"plain\">    ([3, 2, 1, 2, 3], [1, 2, 3]),</div><div class=\"ql-code-block\" data-language=\"plain\">    ([3, 2, 1, 2, 3, 2, 1, 2, 3], [1, 2, 3]),</div><div class=\"ql-code-block\" data-language=\"plain\">    ([sys.maxsize], [sys.maxsize]),</div><div class=\"ql-code-block\" data-language=\"plain\">    ([-1, 0, 1, -1], [0 ,1, -1]),</div><div class=\"ql-code-block\" data-language=\"plain\">]</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">test_cases_extra = [</div><div class=\"ql-code-block\" data-language=\"plain\">    ([1, 2, 2], [1, 2]),</div><div class=\"ql-code-block\" data-language=\"plain\">    ([1, 2, 2, 3, 3], [1, 2, 3]),</div><div class=\"ql-code-block\" data-language=\"plain\">    ([2, 2, 1], [2, 1]),</div><div class=\"ql-code-block\" data-language=\"plain\">    ([3, 3, 1, 2], [3, 1, 2]),</div><div class=\"ql-code-block\" data-language=\"plain\">    ([3, 2, 1, 2, 3], [3, 2, 1]),</div><div class=\"ql-code-block\" data-language=\"plain\">    ([3, 2, 1, 2, 3, 2, 1, 2, 3], [3, 2, 1]),</div><div class=\"ql-code-block\" data-language=\"plain\">    ([sys.maxsize], [sys.maxsize]),</div><div class=\"ql-code-block\" data-language=\"plain\">    ([-1, 0, 1, -1], [-1, 0 ,1]),</div><div class=\"ql-code-block\" data-language=\"plain\">    ([\"a\", \"a\", 4, 4, 4], [\"a\", 4]),</div><div class=\"ql-code-block\" data-language=\"plain\">    ([[\"a\"], [\"a\"]], [[\"a\"]]),</div><div class=\"ql-code-block\" data-language=\"plain\">    ([{\"a\": 1}, {\"a\": 1}], [{\"a\": 1}]),</div><div class=\"ql-code-block\" data-language=\"plain\">    ([{\"a\": {\"b\": 2}}, {\"a\": {\"b\": 2}}], [{\"a\": {\"b\": 2}}]),</div><div class=\"ql-code-block\" data-language=\"plain\">    ([], []),</div><div class=\"ql-code-block\" data-language=\"plain\">    ([None], [None]),</div><div class=\"ql-code-block\" data-language=\"plain\">]</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">@pytest.mark.parametrize(\"value, out\", test_cases_set)</div><div class=\"ql-code-block\" data-language=\"plain\">def test_keys1(value, out):</div><div class=\"ql-code-block\" data-language=\"plain\">    assert removeDuplicates(value) == out</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">@pytest.mark.parametrize(\"value, out\", test_cases_extra)</div><div class=\"ql-code-block\" data-language=\"plain\">def test_keys2(value, out):</div><div class=\"ql-code-block\" data-language=\"plain\">    assert removeDuplicates2(value) == out</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div></pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 78,
                "title": "Массив"
            },
            {
                "ID": 61,
                "title": "Структуры данных"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:42:46Z",
        "interviewCount": 406,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Удалить все дубликаты из списка.</span></p><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>]\n<span class=\"hljs-attr\">Output:</span> [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n\n</pre>",
        "time": 30,
        "title": "Remove duplicates I"
    },
    {
        "ID": 150,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">boolean</span> <span class=\"hljs-title function_\">equals</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> s, <span class=\"hljs-built_in\">String</span> t</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">toStack</span>(s).<span class=\"hljs-title function_\">equals</span>(<span class=\"hljs-title function_\">toStack</span>(t));\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">Stack</span>&lt;<span class=\"hljs-title class_\">Character</span>&gt; <span class=\"hljs-title function_\">toStack</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> S</span>) {\n        <span class=\"hljs-title class_\">Stack</span>&lt;<span class=\"hljs-title class_\">Character</span>&gt; stack = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Stack</span>();\n        <span class=\"hljs-keyword\">for</span> (char c : S.<span class=\"hljs-title function_\">toCharArray</span>()) {\n            <span class=\"hljs-keyword\">if</span> (c != <span class=\"hljs-string\">'#'</span>) {\n                stack.<span class=\"hljs-title function_\">push</span>(c);\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!stack.<span class=\"hljs-title function_\">isEmpty</span>()) {\n                stack.<span class=\"hljs-title function_\">pop</span>();\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> stack;\n    }\n}\n\n</pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def compare(s: str, t: str) -&gt; bool:\n    def <span class=\"hljs-built_in\">build</span>(my_str):\n        answer = []\n        for ch in my_str:\n            if ch != <span class=\"hljs-string\">'#'</span>:\n                answer.<span class=\"hljs-built_in\">append</span>(ch)\n            elif answer:\n                answer.<span class=\"hljs-built_in\">pop</span>()\n        return <span class=\"hljs-string\">\"\"</span>.<span class=\"hljs-built_in\">join</span>(answer)\n    \n    return <span class=\"hljs-built_in\">build</span>(s) == <span class=\"hljs-built_in\">build</span>(t)\n\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 81,
                "title": "Стек"
            },
            {
                "ID": 61,
                "title": "Структуры данных"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:54:52Z",
        "interviewCount": 341,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Даны две строки, содержащие буквы английского алфавита и символ&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">#</code><span style=\"color: rgb(52, 73, 94);\">, соответствующий клавише backspace. Нужно сравнить две строки с учётом backspace и вернуть TRUE если они равны.</span></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Пример:</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-title class_\">Input</span>: s = <span class=\"hljs-string\">\"ab#c\"</span>, t = <span class=\"hljs-string\">\"ad#c\"</span>\n<span class=\"hljs-title class_\">Output</span>: <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-title class_\">Explanation</span>: <span class=\"hljs-title class_\">Both</span> s and t become <span class=\"hljs-string\">\"ac\"</span>\n\n</pre>",
        "time": 30,
        "title": "Compare strings with backspace button"
    },
    {
        "ID": 156,
        "answers": [
            {
                "content": "<p>Используем хештаблицу как основную структуру для кеша. Ключи в ней будут теми же, что и в LRU кеше, но со значениями сложнее - их мы оборачиваем в структуру Node - узел двусвязного списка. Node будет хранить ключ, значение, и ссылки на prev/next узлы.</p><p><br></p><p>Нам нужно реализовать работу с последовательностью операций, чтобы определять самый старый элемент. Здесь и нужен двусвязный список - элементы в нём располагаются в хронологическом порядке операций. Самый старый элемент будет в голове списка, новые и обновленные элементы будут перемещаться в хвост списка.</p><p><br></p><p>Если мы читаем по ключу не в первый раз, то нам может понадобиться переместить его из середины списка в хвост. Находим за O(1) нужный узел по ключу, за O(1) удаляем его из середины списка (обновляем ссылки соседних узлов) и перемещаем в конец.</p><p>Победа.</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LRUCache</span> {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\n        Node next;\n        Node prev;\n        <span class=\"hljs-type\">int</span> key;\n        <span class=\"hljs-type\">int</span> val;\n    }\n\n    <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">head</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>();\n    <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">tail</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>();\n    \n    <span class=\"hljs-type\">int</span> capacity;\n\n    Map&lt;Integer, Node&gt; data = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">LRUCache</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> capacity)</span> {\n        <span class=\"hljs-built_in\">this</span>.capacity = capacity;\n        \n        head.next = tail;\n        tail.prev = head;\n    }\n    \n    <span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> data.get(key);\n        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n            removeNode(n);\n            addLastUsed(n);\n            <span class=\"hljs-keyword\">return</span> n.val;\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">put</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key, <span class=\"hljs-type\">int</span> value)</span> {\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> data.get(key);\n        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-literal\">null</span>) {\n            n = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(key, value);\n            data.put(key, n);\n\n            addLastUsed(n);\n\n            <span class=\"hljs-keyword\">if</span> (data.size() &gt; capacity) {\n                n = removeNode(tail.prev);\n                data.remove(n.key);\n            }\n        } <span class=\"hljs-keyword\">else</span> {\n            n.val = value;\n            removeNode(n);\n            addLastUsed(n);\n        }\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addLastUsed</span><span class=\"hljs-params\">(Node n)</span> {\n        n.next = head.next;\n        head.next.prev = n;\n\n        head.next = n;\n        n.prev = head;\n    }\n\n    <span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">removeNode</span><span class=\"hljs-params\">(Node n)</span> {\n        n.prev.next = n.next;\n        n.next.prev = n.prev;\n        <span class=\"hljs-keyword\">return</span> n;\n    }\n}\n\n</pre><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">class Node:\n    def <span class=\"hljs-built_in\">__init__</span>(self, key, value):\n        self.key = key\n        self.value = value\n        self.prev = None\n        self.next = None\n\nclass LRUCache:\n\n    def <span class=\"hljs-built_in\">__init__</span>(self, capacity: int):\n        self.dict = <span class=\"hljs-built_in\">dict</span>() # key to node\n        self.capacity = capacity\n        self.head = <span class=\"hljs-built_in\">Node</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n        self.tail = <span class=\"hljs-built_in\">Node</span>(-<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>)\n        self.head.next = self.tail\n        self.tail.prev = self.head\n\n    def <span class=\"hljs-built_in\">get</span>(self, key: int) -&gt; int:\n        if key in self.dict:\n            node = self.dict[key]\n            self.<span class=\"hljs-built_in\">remove_from_list</span>(node)\n            self.<span class=\"hljs-built_in\">insert_into_head</span>(node)\n            return node.value\n        else:\n            return -<span class=\"hljs-number\">1</span>\n\n    def <span class=\"hljs-built_in\">put</span>(self, key: int, value: int) -&gt; None:\n        if key in self.dict:       \n            node = self.dict[key]\n            self.<span class=\"hljs-built_in\">remove_from_list</span>(node)\n            self.<span class=\"hljs-built_in\">insert_into_head</span>(node)\n            node.value = value\n        else: \n            if <span class=\"hljs-built_in\">len</span>(self.dict) &gt;= self.capacity:\n                self.<span class=\"hljs-built_in\">remove_from_tail</span>()\n            node = <span class=\"hljs-built_in\">Node</span>(key, value)\n            self.dict[key] = node\n            self.<span class=\"hljs-built_in\">insert_into_head</span>(node)\n            \n    def <span class=\"hljs-built_in\">remove_from_list</span>(self, node):\n        node.prev.next = node.next\n        node.next.prev = node.prev\n    \n    def <span class=\"hljs-built_in\">insert_into_head</span>(self, node):\n        head_next = self.head.next \n        self.head.next = node \n        node.prev = self.head \n        node.next = head_next\n        head_next.prev = node\n    \n    def <span class=\"hljs-built_in\">remove_from_tail</span>(self):\n        if <span class=\"hljs-built_in\">len</span>(self.dict) == <span class=\"hljs-number\">0</span>: \n            return\n        tail_node = self.tail.prev\n        del self.dict[tail_node.key]\n        self.<span class=\"hljs-built_in\">remove_from_list</span>(tail_node)\n\n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 83,
                "title": "Хеш таблица"
            },
            {
                "ID": 61,
                "title": "Структуры данных"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:59:55Z",
        "interviewCount": 332,
        "question": "<p><u>Сложность: </u><strong><u>MEDIUM</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Реализовать LRU cache. Должен поддерждивать вставку, чтение и удаление элементов. </span></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Кеш имеет фиксированный максимальный размер. </span></p><p><span style=\"color: rgb(52, 73, 94);\">Если после вставки нового элемента превышается максимально допустимый размер кеша, из него нужно удалить самый старый элемент.</span></p><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">cache = <span class=\"hljs-keyword\">new</span> LRU(capacity=<span class=\"hljs-number\">2</span>)\n\ncache.put(A, <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// cache is {A=1}</span>\ncache.put(B, <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// cache is {A=1, B=2}</span>\ncache.<span class=\"hljs-keyword\">get</span>(A);    <span class=\"hljs-comment\">// return 1</span>\ncache.put(C, <span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// {A=1, C=3}, element B=2 was evicted</span>\ncache.<span class=\"hljs-keyword\">get</span>(B);    <span class=\"hljs-comment\">// returns -1 (not found)</span>\ncache.put(D, <span class=\"hljs-number\">4</span>); <span class=\"hljs-comment\">// {D=4, C=3}</span>\ncache.<span class=\"hljs-keyword\">get</span>(A);    <span class=\"hljs-comment\">// return -1 (not found)</span>\ncache.<span class=\"hljs-keyword\">get</span>(C);    <span class=\"hljs-comment\">// return 3</span>\ncache.<span class=\"hljs-keyword\">get</span>(D);    <span class=\"hljs-comment\">// return 4</span>\n\n</pre>",
        "time": 45,
        "title": "LRU cache"
    },
    {
        "ID": 909,
        "additional": "<p>Какая алгоритмическая сложность?</p><p>Можно ли решить за линейное время?</p><p>Может ли быть на входе кириллица? Алгоритм адаптирован под это?</p>",
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">// по сути заводим мапу: символ - индекс. И ведем левую границу предполагаемой подстроки. <br/>// если находим символ в мапе и его индекм слева от границы - не обращаем внимание, обновляем индекс символа. <br/>// если находим символ и он справа от границы - значит он не уникален - запоминаем длину, сдвигаем левую границу<br/><br/>package main<br/><br/>import \"fmt\"<br/><br/>func findLenSubstring(input string) int {<br/>   inputRune := []rune(input)<br/>   if len(inputRune) == 1 {<br/>      return 1<br/>   }<br/><br/>   runeIndex := make(map[rune]int)<br/>   var left, maxLength int<br/><br/>   for i, ch := range inputRune {<br/>      if ind, ok := runeIndex[ch]; !ok {<br/>         runeIndex[ch] = i<br/>      } else if ind &lt; left {<br/>         runeIndex[ch] = i<br/>      } else {<br/>         if maxLength &lt; i - left {<br/>            maxLength = i - left<br/><br/>         }<br/>         left = runeIndex[ch] + 1<br/>         runeIndex[ch] = i<br/>      }<br/>   }<br/><br/>   return maxLength<br/>}<br/><br/>func main() {<br/>   fmt.Println(findLenSubstring(\"аааббвгдааа\"))<br/>   fmt.Println(findLenSubstring(\"абвадгв\"))<br/>   fmt.Println(findLenSubstring(\"а\"))<br/>   fmt.Println(findLenSubstring(\"a\"))<br/>   fmt.Println(findLenSubstring(\"ааааа\"))<br/>   fmt.Println(findLenSubstring(\"\"))<br/>}<br/></pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 64,
                "title": "Строки"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-12-08T11:55:14Z",
        "interviewCount": 312,
        "question": "<p>Дана строка, найти длину ее максимальной подстроки, в которой все буквы уникальные.&nbsp;</p><p><br></p><p>Например,&nbsp;</p><p>Если дано:</p><p><strong>аааббвгдааа</strong></p><p>то максимальной подстрокой с уникальными буквами является:</p><p><strong>бвгда</strong></p><p>программа выводит:</p><p><strong>5</strong></p><p>&nbsp;</p><p>Если дано:</p><p><strong>абвадгв</strong></p><p>то максимальной подстрокой с уникальными буквами является:</p><p><strong>бвадг</strong></p><p>программа выводит:</p><p><strong>5﻿</strong></p><p>&nbsp;&nbsp;</p><p>Программа должна быть минимальной по дополнительной памяти и времени.</p>",
        "time": 25,
        "title": "Найти длину максимальной подстроки"
    },
    {
        "ID": 918,
        "answers": [
            {
                "content": "<p><strong>Bubble Sort / Сортировка пузырьком</strong></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>время O(n^2)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>память O(1)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>перебираем в двух вложенных циклах элементы</li></ol><p><br></p><p><strong>QuickSort / Быстрая сортировка</strong></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>трудности с оценкой сложности</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>трудности с описанием алгоритма</li></ol><p><br></p><p><strong>MergeSort / Сортировка слиянием</strong></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>трудности с оценкой сложности</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>трудности с описанием алгоритма</li></ol>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p><strong>QuickSort / Быстрая сортировка</strong></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>время O(n * log(n))</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>память O(log n) - из-за использования программного стека в рекурсии</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>партицирует массив на основе `pivot` и рекурсивно сортирует подмассивы</li></ol><p><br></p><p><strong>MergeSort / Сортировка слиянием</strong></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>время O(n * log(n))</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>память O(n) - из-за созданий копий массива</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>делит массив пополам, сортирует каждую часть и затем мерджит результаты в отдельный массив</li></ol><p><br></p><p><strong>Selection sort , Insertion Sort / Сортировка вставкой </strong></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>время O(n^2)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>память O(1)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>selection эффективен на маленьких массивах</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>insertion хорошо работает на почти сортированных данных</li></ol><p><br></p><p><strong>Heap sort / Сортировка на куче</strong></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>время O(n * log(n))</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>память O(1)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>использует структуру данных Heap</li></ol><p><br></p><p><br></p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p><strong>MergeSort / Сортировка слиянием</strong></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>дополнительно: сохранение относительного порядка элементов (с равным значением ключа сортировки)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>дополнительно: можно использовать для сортировки во внешней памяти</li></ol><p><br></p><p><strong>QuickSort / Быстрая сортировка</strong></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>дополнительно: в худшем случае может быть O(n^2)</li></ol><p><br></p><p><strong>Radix Sort</strong></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>время O(n*k)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>память O(n+k)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>k — количество цифр в максимальном числе</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>подходит только для чисел</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>сортирует в несколько проходов, каждый раз по i-й цифре в числе</li></ol><p><br></p><p><strong>Counting Sort</strong></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>время O(n+k)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>память O(k)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>k — диапазон значений ключа</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>создаем массив из k элементов, проходим по исходному массиву и инкрементим по индексу `idx = srcArrValue - minArrValue` кол-во встречаемости элемента, вторым проходом заполняем финальный массив</li></ol>",
                "difficulty": "GRADE_19"
            },
            {
                "content": "<p><strong>QuickSort / Быстрая сортировка</strong></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>кандидат может объяснить в каком случае сложность получается O(n^2)</li></ol><p><br></p><p>Кандидат может объяснить почему не бывает generic алгоритмов сортировки работающих быстрее O(n * log(n))</p>",
                "difficulty": "GRADE_20"
            }
        ],
        "blocks": [
            {
                "ID": 62,
                "title": "Сортировки"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-12-20T09:53:32Z",
        "interviewCount": 308,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Какие алгоритмы сортировки знаешь?</span></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">﻿Какова их сложность в терминах O(n) по времени и памяти? Как они устроены и какие у них особенности?</span></p>",
        "time": 5,
        "title": "Алгоритмы сортировки"
    },
    {
        "ID": 65,
        "answers": [
            {
                "content": "<p>Тут есть несколько путей</p><ul><li>посортировать список и найти пропущенное число</li><li>можно просуммировать всё, и сравнить с эталонной суммой арифметической прогрессии. Разница равна недостающему числу.</li><li>сделать XOR всех элементов и их индексов между собой. Результатом будет пропущенное число.</li></ul><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">missingNumber</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] nums)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">missing</span> <span class=\"hljs-operator\">=</span> nums.length;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; nums.length; i++) {\n            missing ^= i ^ nums[i];\n        }\n        <span class=\"hljs-keyword\">return</span> missing;\n    }\n}\n\n</pre><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def missing_number(nums: List[<span class=\"hljs-type\">int</span>]) -&gt; <span class=\"hljs-type\">int</span>:\n    missing = <span class=\"hljs-built_in\">len</span>(nums)\n    <span class=\"hljs-keyword\">for</span> i in <span class=\"hljs-keyword\">range</span>(<span class=\"hljs-built_in\">len</span>(nums)):\n        missing ^= i ^ nums[i]\n    <span class=\"hljs-keyword\">return</span> missing\n\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 68,
                "title": "Битовая арифметика"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T18:37:26Z",
        "interviewCount": 293,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Дан массив&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">nums</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;содержащий&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">n</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;уникальных чисел в диапазоне&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">[0, n]</code><span style=\"color: rgb(52, 73, 94);\">. </span></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Нужно найти число, которого не хватает в этом массиве.</span></p><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">nums</span> <span class=\"hljs-string\">=</span> [<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>]\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-number\">8</span>\n\n</pre>",
        "time": 30,
        "title": "Missing number"
    },
    {
        "ID": 145,
        "answers": [
            {
                "content": "<p>Имеем последовательные элементы&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">prev -&gt; curr -&gt; next</code></p><p><br></p><p>В начале алгоритма&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">prev=null</code>:&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">null curr -&gt; next</code></p><p><br></p><p>Делаем так, чтобы&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">curr</code>&nbsp;ссылался на&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">prev</code>:&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">null &lt;- curr next</code></p><p><br></p><p>Перемещаем всё на 1 элемент вправо и повторяем.</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ListNode</span> {\n     <span class=\"hljs-type\">int</span> val;\n     ListNode next;\n}\n\n<span class=\"hljs-keyword\">public</span> ListNode <span class=\"hljs-title function_\">reverseList</span><span class=\"hljs-params\">(ListNode head)</span> {\n    <span class=\"hljs-type\">ListNode</span> <span class=\"hljs-variable\">curr</span> <span class=\"hljs-operator\">=</span> head;\n    <span class=\"hljs-type\">ListNode</span> <span class=\"hljs-variable\">prev</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;\n\n    <span class=\"hljs-keyword\">while</span> (curr.next != <span class=\"hljs-literal\">null</span>) {\n        <span class=\"hljs-type\">ListNode</span> <span class=\"hljs-variable\">next</span> <span class=\"hljs-operator\">=</span> curr.next;\n\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n    }\n        \n    curr.next = prev;\n\n    <span class=\"hljs-keyword\">return</span> curr;\n}\n\n</pre><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>:\n    def <span class=\"hljs-title function_\">__init__</span><span class=\"hljs-params\">(self, val, next)</span>:\n        self.val = val\n        self.next = next\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span>:        \n    def <span class=\"hljs-title function_\">reverse_linked_list</span><span class=\"hljs-params\">(self, head: Node)</span> -&gt; Node:\n        curr, prev = head, None\n        <span class=\"hljs-keyword\">while</span> curr.next:\n            next_node = curr.next        \n            curr.next = <span class=\"hljs-type\">prev</span>\n            <span class=\"hljs-variable\">prev</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">curr</span>\n            <span class=\"hljs-variable\">curr</span> <span class=\"hljs-operator\">=</span> next_node\n    \n        <span class=\"hljs-keyword\">return</span> curr\n\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 79,
                "title": "Связные списки"
            },
            {
                "ID": 61,
                "title": "Структуры данных"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:51:10Z",
        "interviewCount": 278,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Дан односвязный список - ссылка на его&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">head</code><span style=\"color: rgb(52, 73, 94);\">. Нужно развернуть этот список и вернуть ссылку на новый&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">head</code><span style=\"color: rgb(52, 73, 94);\">.</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span>  [<span class=\"hljs-number\">1</span> <span class=\"hljs-string\">-&gt;</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-string\">-&gt;</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-string\">-&gt;</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-string\">-&gt;</span> <span class=\"hljs-number\">5</span>]\n<span class=\"hljs-attr\">Output:</span> [<span class=\"hljs-number\">5</span> <span class=\"hljs-string\">-&gt;</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-string\">-&gt;</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-string\">-&gt;</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-string\">-&gt;</span> <span class=\"hljs-number\">1</span>]\n</pre>",
        "time": 30,
        "title": "Reverse a linked list"
    },
    {
        "ID": 1825,
        "answers": [
            {
                "content": "<p>Т.к. файл не получится загрузить в RAM и использовать метод sort(), придётся сортировать его по частям.</p><p><br></p><p>Файл нужно \"разбить\" на части такого размера, чтобы можно было загрузить одну часть в RAM целиком. Эту часть файла можно отсортировать и записать на диск. Такую операцию нужно проделать для всех частей файла.</p><p><br></p><p>Когда имеется K отсортированных частей файла, их можно соединять между собой с помощью алгоритма merge sort. В данном случае это будет external merge sort, т.е. в RAM будут зачитываться кусочки, мерджиться, а результат будет снова записываться на диск.</p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Помимо основного решения, описанного выше, кандидат может рассказать про space complexity алгоритмов сортировки.</p><p><br></p><p>Для первичной сортировки частей файла в RAM подойдут только алгоритмы не требующие доп памяти, например quick sort.</p><p><br></p><p>Алгоритм merge sort требует O(n) дополнительной памяти, поэтому не подойдет для первого этапа. </p><p><br></p><p>Во втором этапе (merge сортированных кусочков файла, каждый из которых размера K), при использовании классического merge sort, загрузить в RAM можно только K/4 от каждого кусочка (два кусочка займут половину RAM, и merge sort требует еще столько же места в RAM для своей работы, т.к. пишет новые данные в новое место). </p><p>В теории можно исхитриться и написать in place merge sort в исходных массивах и грузить в RAM по K/2.</p>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 62,
                "title": "Сортировки"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2023-07-04T08:33:06Z",
        "interviewCount": 277,
        "question": "<p>У вас есть текстовый файл, в котором сохранены названия товаров. Каждое название записано в отдельной строке, строка заканчивается символом переноса каретки <strong>\\r\\n.</strong></p><p><br></p><p>Размер файла <strong>32 Gb</strong>.</p><p>Оперативная память вашего приложения <strong>4 Gb</strong>.</p><p><br></p><p>Таким образом, файл нельзя целиком загрузить в оперативную память.</p><p><br></p><p>Задача — отсортировать строки в файле в лексикографическом порядке.</p><p><br></p><p>----------------</p><p><br></p><p><strong>Дополнительный вопрос, если решена основная задача:</strong></p><p>Во второй части решения происходит merge sort кусочков исходного файла. Если размер одного кусочка равен 4Gb и мы сливаем за один раз два кусочка исходного файла, то какую часть каждого из кусочков можно загрузить в RAM для последующей сортировки?</p>",
        "time": 5,
        "title": "Сортировка во внешней памяти"
    },
    {
        "ID": 917,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Использовать двоичный поиск.</span></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Сложность: O(log(n)).</span></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 63,
                "title": "Поиск"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-12-20T09:51:08Z",
        "interviewCount": 269,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Как найти индекс элемента в отсортированном массиве?</span></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Какова сложность этого алгоритма в терминах O(n)?</span></p>",
        "time": 5,
        "title": "Двоичный поиск / Binary Search"
    },
    {
        "ID": 112,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Считаем частотность элементов за </span><strong style=\"color: rgb(52, 73, 94);\">O(N)</strong><span style=\"color: rgb(52, 73, 94);\">. </span></p><p><span style=\"color: rgb(52, 73, 94);\">Делаем bucket sort по частотности за </span><strong style=\"color: rgb(52, 73, 94);\">O(N). </strong><span style=\"color: rgb(52, 73, 94);\">(требует O(N) дополнительной памяти)</span></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Собираем топ K результатов после bucket sort.</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;Integer&gt; <span class=\"hljs-title\">topKFrequent</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span>[] nums, <span class=\"hljs-built_in\">int</span> k</span>)</span> {\n        Map&lt;Integer, Integer&gt; freqs = <span class=\"hljs-keyword\">new</span> HashMap&lt;Integer, Integer&gt;();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> num : nums) {\n            freqs.put(num, <span class=\"hljs-number\">1</span> + freqs.getOrDefault(num, <span class=\"hljs-number\">0</span>));\n        }\n\n        List[] buckets = <span class=\"hljs-keyword\">new</span> List[nums.length + <span class=\"hljs-number\">1</span>];\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> key : freqs.keySet()) {\n            <span class=\"hljs-built_in\">int</span> freq = freqs.<span class=\"hljs-keyword\">get</span>(key);\n            <span class=\"hljs-keyword\">if</span> (buckets[freq] == <span class=\"hljs-literal\">null</span>) {\n                buckets[freq] = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n            }\n            buckets[freq].<span class=\"hljs-keyword\">add</span>(key);\n        }\n\n        List&lt;Integer&gt; top = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> j = buckets.length - <span class=\"hljs-number\">1</span>; j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; k &gt; <span class=\"hljs-number\">0</span>; j--) {\n            List&lt;Integer&gt; bucket = (List&lt;Integer&gt;) buckets[j];\n\n            <span class=\"hljs-keyword\">if</span> (bucket != <span class=\"hljs-literal\">null</span>) {\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> num : bucket) {\n                    top.<span class=\"hljs-keyword\">add</span>(num);\n\n                    <span class=\"hljs-keyword\">if</span> (--k == <span class=\"hljs-number\">0</span>) {\n                        <span class=\"hljs-keyword\">break</span>;\n                    }\n                }\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> top;\n    }\n}\n\n</pre><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def top_k_frequent(nums: List[<span class=\"hljs-type\">int</span>], k: <span class=\"hljs-type\">int</span>) -&gt; List[<span class=\"hljs-type\">int</span>]:\n    number_count = collections.defaultdict(<span class=\"hljs-type\">int</span>)    \n    <span class=\"hljs-keyword\">for</span> num in nums:\n        number_count[num] += <span class=\"hljs-number\">1</span>\n\n    buckets = [[] <span class=\"hljs-keyword\">for</span> _ in <span class=\"hljs-keyword\">range</span>(<span class=\"hljs-number\">1</span> + <span class=\"hljs-built_in\">len</span>(nums))]\n    <span class=\"hljs-keyword\">for</span> num, freq in number_count.items():\n        buckets[freq].<span class=\"hljs-built_in\">append</span>(num)\n    \n    top_numbers = []\n    <span class=\"hljs-keyword\">for</span> i in <span class=\"hljs-keyword\">range</span>(<span class=\"hljs-built_in\">len</span>(buckets) - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>):\n        <span class=\"hljs-keyword\">if</span> buckets[i]:\n            <span class=\"hljs-keyword\">for</span> num in buckets[i]:\n                top_numbers.<span class=\"hljs-built_in\">append</span>(num)\n    <span class=\"hljs-keyword\">return</span> top_numbers[:k]\n\n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 62,
                "title": "Сортировки"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:15:18Z",
        "interviewCount": 265,
        "question": "<p><u>Сложность: </u><strong><u>MEDIUM</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Дан массив чисел&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">arr</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;и число&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">k</code><span style=\"color: rgb(52, 73, 94);\">. </span></p><p><span style=\"color: rgb(52, 73, 94);\">Необходимо вернуть&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">k</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;самых часто встречающихся элементов массива.</span></p><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span>  <span class=\"hljs-string\">arr=[1,1,1,1,2,3,3,3,4,4],</span> <span class=\"hljs-string\">k=3</span>\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-string\">res=[1,3,4]</span>\n\n</pre>",
        "time": 45,
        "title": "Top K frequent elements in array"
    },
    {
        "ID": 1817,
        "answers": [
            {
                "content": "<p><strong>Решение с использованием Set</strong></p><p><span style=\"color: var(--text-500);\">Итерируемся по строке и добавляем символы в Set, если их там еще нет. Если символ есть, значит у нас появилась пара для палиндрома. В таком случае увеличиваем счетчик максимальной длины на 2 и удаляем символ из Set. </span></p><p><br></p><p><span style=\"color: var(--text-500);\">В центр палиндрома можно поставить любой символ без пары, поэтому если в Set остались символы, увеличиваем счетчик на 1.</span></p><p><br></p><p><strong>Решение на Kotlin:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\">fun <span class=\"hljs-title\">getLongestPalindromeLength</span>(<span class=\"hljs-params\">input: String</span>): Int</span> {\n    val chars = HashSet&lt;Character&gt;()\n    <span class=\"hljs-keyword\">var</span> maxLength = <span class=\"hljs-number\">0</span>\n\n    input.forEach { ch -&gt;\n        <span class=\"hljs-keyword\">if</span> (chars.contains(ch)) {\n            maxLength += <span class=\"hljs-number\">2</span>\n            chars.<span class=\"hljs-keyword\">remove</span>(ch)\n        } <span class=\"hljs-keyword\">else</span> {\n            chars.<span class=\"hljs-keyword\">add</span>(<span class=\"hljs-built_in\">ch</span>)\n        }\n    }\n\n    <span class=\"hljs-keyword\">if</span> (chars.size &gt; <span class=\"hljs-number\">0</span>) \n        maxLength += <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> maxLength\n}\n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 712,
                "title": "Множество"
            },
            {
                "ID": 61,
                "title": "Структуры данных"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2023-06-27T17:30:53Z",
        "interviewCount": 264,
        "question": "<p><u style=\"color: rgb(0, 26, 52);\">Сложность: </u><strong style=\"color: rgb(0, 26, 52);\"><u>EASY</u></strong></p><p><br></p><p>Для заданной строки необходимо определить длину самого большого палиндрома, который можно составить из ее символов. </p><p><br></p><p>Палиндром — это слово, которое одинаково читается с начала и с конца, например \"шалаш\" или \"потоп\".</p><p><br></p><p><strong>Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">aaabbbccccdd</span>\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-number\">11</span> <span class=\"hljs-string\">(палиндром</span> <span class=\"hljs-string\">dccbaaabccd)</span>\n</pre>",
        "time": 15,
        "title": "Longest palindrome"
    },
    {
        "ID": 124,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">reverseString</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> s</span>) {\n        char[] chars = s.<span class=\"hljs-title function_\">toCharArray</span>();\n      \n        int N = chars.<span class=\"hljs-property\">length</span>;\n        \n        <span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i * <span class=\"hljs-number\">2</span> &lt; N; i++) {\n            char tmp = chars[i];\n            chars[i] = chars[N - <span class=\"hljs-number\">1</span> - i];\n            chars[N - <span class=\"hljs-number\">1</span> - i] = tmp;\n        }\n        \n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(chars);\n    }\n}\n</pre><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\">def <span class=\"hljs-title\">reverse_string</span>(<span class=\"hljs-params\">s: str</span>) -&gt; str:\n    s_list</span> = list(s)\n    left, right = <span class=\"hljs-number\">0</span>, len(s) - <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">while</span> left &lt; right:\n        s_list[left], s_list[right] = s_list[right], s_list[left]\n        left, right = left + <span class=\"hljs-number\">1</span>, right - <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">''</span>.<span class=\"hljs-keyword\">join</span>(s_list)﻿\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 64,
                "title": "Строки"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:22:26Z",
        "interviewCount": 262,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Дана строка, нужно вернуть её буквы в обратном порядке.</span></p><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Пример</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">perfection</span>\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-string\">noitcefrep</span>\n</pre>",
        "time": 15,
        "title": "Reverse a string"
    },
    {
        "ID": 1816,
        "answers": [
            {
                "content": "<p>Создаем linkedHashMap, в качестве ключа у которой будет символ, а в качестве значения его индекс. Если при попытке добавить очередной символ в мапу мы видим, что он уже есть - сбрасываем индекс в -1. Достаем из мапы первый элемент у которого индекс != -1.</p><p><br></p><p><strong>Kotlin:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">fun <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> {\n    println(firstUniqueCharIndex(<span class=\"hljs-string\">\"abcbaad\"</span>))\n    println(firstUniqueCharIndex(<span class=\"hljs-string\">\"aabb\"</span>))\n}\n\n<span class=\"hljs-keyword\">private</span> const <span class=\"hljs-type\">val</span> <span class=\"hljs-variable\">INVALID_INDEX</span> <span class=\"hljs-operator\">=</span> -<span class=\"hljs-number\">1</span>\n\nfun <span class=\"hljs-title function_\">firstUniqueCharIndex</span><span class=\"hljs-params\">(str: String)</span>: Int {\n    <span class=\"hljs-type\">val</span> <span class=\"hljs-variable\">charIndexes</span> <span class=\"hljs-operator\">=</span> mutableMapOf&lt;Char, Int&gt;()\n\n    str.forEachIndexed { index, <span class=\"hljs-type\">char</span> -&gt;\n        <span class=\"hljs-keyword\">if</span> (charIndexes[<span class=\"hljs-type\">char</span>] == <span class=\"hljs-literal\">null</span>) {\n            charIndexes[<span class=\"hljs-type\">char</span>] = index\n        } <span class=\"hljs-keyword\">else</span> {\n            charIndexes[<span class=\"hljs-type\">char</span>] = INVALID_INDEX\n        }\n    }\n\n    <span class=\"hljs-keyword\">return</span> charIndexes.values.firstOrNull { it != INVALID_INDEX } ?: INVALID_INDEX\n}\n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 83,
                "title": "Хеш таблица"
            },
            {
                "ID": 61,
                "title": "Структуры данных"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2023-06-27T17:09:16Z",
        "interviewCount": 250,
        "question": "<p><u style=\"color: rgb(0, 26, 52);\">Сложность: </u><strong style=\"color: rgb(0, 26, 52);\"><u>EASY</u></strong></p><p><br></p><p>Дана строка s. Нужно найти первый не повторяющийся символ в строке и вернуть его индекс. <span style=\"color: var(--text-500);\">Если такого символа нет, вернуть -1.</span></p><p><br></p><p><strong>Пример:</strong></p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">abcbaad</span>\n<span class=\"hljs-attr\">Output:</span> 2\n</pre>",
        "time": 15,
        "title": "First unique char in string"
    },
    {
        "ID": 140,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">В этой задаче есть элементы dynamic programming: принятие решения на шаге X зависит от предыдущего состояния и текущего элемента: если сумма&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">nums[i] + rollingSum</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;лучше (больше) текущего элемента&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">num[i]</code><span style=\"color: rgb(52, 73, 94);\">, то элемент включается в&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">rollingSum</code><span style=\"color: rgb(52, 73, 94);\">, иначе начинаем накапливать новый подмассив. Вторым действием обновляем глобальный максимум.</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">public <span class=\"hljs-built_in\">int</span> maxSubArray(<span class=\"hljs-built_in\">int</span>[] nums) {<br/>    <span class=\"hljs-built_in\">int</span> maxSum = nums[<span class=\"hljs-number\">0</span>]; // <span class=\"hljs-keyword\">global</span> <span class=\"hljs-built_in\">sum</span><br/>    <span class=\"hljs-built_in\">int</span> rollingSum = nums[<span class=\"hljs-number\">0</span>]; // <span class=\"hljs-built_in\">sum</span> of continuous sub array<br/><br/>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; nums.length; i++) {<br/>        rollingSum = Math.<span class=\"hljs-built_in\">max</span>(rollingSum + nums[i], nums[i]);<br/>        maxSum = Math.<span class=\"hljs-built_in\">max</span>(maxSum, rollingSum);<br/>    }<br/><br/>    <span class=\"hljs-keyword\">return</span> maxSum;<br/>}<br/><br/></pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def max_sub_array(nums: List[int]) -&gt; int:<br/>    rolling_sum = max_sum = nums[0]<br/>    for num in nums[1:]:<br/>        rolling_sum = max(rolling_sum + num, num)<br/>        max_sum = max(max_sum, rolling_sum)<br/>    return max_sum<br/><br/></pre><p><br></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 78,
                "title": "Массив"
            },
            {
                "ID": 61,
                "title": "Структуры данных"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:46:02Z",
        "interviewCount": 245,
        "question": "<p><u>Сложность: </u><strong><u>MEDIUM</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Дан массив чисел. Нужно найти в нём последовательный под-массив, который имеет наибольшую сумму элементов. Вернуть эту сумму.</span></p><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">nums</span> <span class=\"hljs-string\">=</span> [<span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-5</span>, <span class=\"hljs-number\">4</span>]\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-number\">6</span>\n<span class=\"hljs-attr\">Explanation:</span> <span class=\"hljs-string\">sub-array</span> <span class=\"hljs-string\">=</span> [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]<span class=\"hljs-string\">,</span>  <span class=\"hljs-string\">sum</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-number\">6</span><span class=\"hljs-string\">.</span>\n\n</pre>",
        "time": 30,
        "title": "Max sub-array"
    },
    {
        "ID": 123,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br/>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">checkReturnToOrigin</span><span class=\"hljs-params\">(String moves)</span> {<br/>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br/>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">y</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br/><br/>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">char</span> c : moves.toCharArray()) {<br/>            <span class=\"hljs-keyword\">switch</span> (c) {<br/>                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'U'</span> -&gt; y++;<br/>                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'D'</span> -&gt; y--;<br/>                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'L'</span> -&gt; x--;<br/>                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'R'</span> -&gt; x++;<br/>            }<br/>        }<br/><br/>        <span class=\"hljs-type\">return</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span>= <span class=\"hljs-number\">0</span> &amp;&amp; y == <span class=\"hljs-number\">0</span>;<br/>    }<br/>}<br/><br/></pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def check_return_to_origin(moves: str) -&gt; bool:<br/>    c = collections.Counter(moves)<br/>    return c['L'] == c['R'] and c['U'] == c['D']<br/><br/></pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 64,
                "title": "Строки"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:21:35Z",
        "interviewCount": 237,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p>Робот стоит в точке&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">(0,0)</code>&nbsp;в 2D пространстве. </p><p>Роботу подаются команды движения -&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">U,D,L,R</code>&nbsp;(вверх/вниз/влево/вправо)</p><p><br></p><p>Необходимо вычислить, вернется ли робот в исходную точку после выполнения всех команд.</p><p><br></p><p><strong>Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">UD</span>\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">RRDD</span>\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-literal\">false</span>\n\n</pre>",
        "time": 30,
        "title": "Robot returns to origin"
    },
    {
        "ID": 143,
        "answers": [
            {
                "content": "<p>Для каждого website поддерживается очередь, хранящая таймстампы скачанных страниц. </p><p>Более поздние добавляются в конец очереди.</p><p>В момент, когда нужно отдать результаты за последние 10 минут, из начала очереди удаляются устаревшие таймстампы. </p><p>Затем считаются счётчики.</p><p><br></p><p>P.S. В решении опущены моменты, связанные с необходимостью регулярной очистки очередей от устаревших сообщений.</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TopWebsiteResultsProvider</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">ResultListener</span> {\n    \n    <span class=\"hljs-title class_\">Map</span>&lt;<span class=\"hljs-title class_\">String</span>, <span class=\"hljs-title class_\">Dequeue</span>&lt;<span class=\"hljs-title class_\">Long</span>&gt;&gt; site2time = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;(); \n    \n    <span class=\"hljs-meta\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">onAfterPageDownload</span>(<span class=\"hljs-params\">DownloadedPage page</span>) {\n        <span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">Long</span>&gt; timestamps = site2time.<span class=\"hljs-title function_\">get</span>(page.<span class=\"hljs-property\">website</span>);\n        <span class=\"hljs-keyword\">if</span> (timestamps == <span class=\"hljs-literal\">null</span>) {\n            site2time.<span class=\"hljs-title function_\">put</span>(page.<span class=\"hljs-property\">website</span>, timestamps = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcurrentLinkedList</span>&lt;&gt;());\n        }\n        \n        timestamps.<span class=\"hljs-title function_\">enqueue</span>(page.<span class=\"hljs-property\">timestamp</span>);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">TopResults</span>&gt; <span class=\"hljs-title function_\">getTopWebsites</span>() {\n        long now = <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-title function_\">currentTimestamp</span>();\n        long start = now - <span class=\"hljs-number\">10</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span>; <span class=\"hljs-comment\">// 10 min ago</span>\n        \n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-title class_\">Dequeue</span>&lt;<span class=\"hljs-title class_\">Long</span>&gt; timestamps : site2time.<span class=\"hljs-title function_\">value</span>())\n            <span class=\"hljs-keyword\">while</span> (timestamps.<span class=\"hljs-title function_\">peek</span>() &lt; start)\n                timestamps.<span class=\"hljs-title function_\">dequeue</span>();\n        \n        <span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">TopResults</span>&gt; result = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-title class_\">String</span> website : site2time.<span class=\"hljs-title function_\">keys</span>()) {\n            long count = site2time.<span class=\"hljs-title function_\">get</span>(website).<span class=\"hljs-title function_\">size</span>();\n            result.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TopResults</span>(website, count));\n        }\n        \n        <span class=\"hljs-title class_\">Collections</span>.<span class=\"hljs-title function_\">sort</span>(topResults, <span class=\"hljs-title function_\">comparingInt</span>(<span class=\"hljs-title class_\">TopResult</span>::getCount));\n        \n        <span class=\"hljs-keyword\">return</span> result;\n    }\n}\n\n</pre><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">import time\n\n<span class=\"hljs-keyword\">class</span> DownloadPage:\n    def __init__(<span class=\"hljs-keyword\">self</span>, website: str, timestamp: <span class=\"hljs-type\">int</span>, data: str) -&gt; None:\n        <span class=\"hljs-keyword\">self</span>.website = website\n        <span class=\"hljs-keyword\">self</span>.timestamp = timestamp\n        <span class=\"hljs-keyword\">self</span>.data = data\n\n<span class=\"hljs-keyword\">class</span> TopWebsiteResultsProvider:\n    \n    def __init__(<span class=\"hljs-keyword\">self</span>):\n        <span class=\"hljs-keyword\">self</span>.site2time = dict()\n\n    def on_after_page_download(<span class=\"hljs-keyword\">self</span>, page: DownloadPage) -&gt; None:\n        site2time.setdefault(page.website, deque()).append(page.timestamp)\n        \n    def get_top_websites(<span class=\"hljs-keyword\">self</span>) -&gt; List:\n        start = time.time() - <span class=\"hljs-number\">10</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span>\n        \n        <span class=\"hljs-keyword\">for</span> timestamps <span class=\"hljs-keyword\">in</span> site2time.values():\n            <span class=\"hljs-keyword\">while</span> timestamps and timestamps[<span class=\"hljs-number\">-1</span>] &lt; start:\n                timestamps.popleft()\n                \n        top_results = []\n        <span class=\"hljs-keyword\">for</span> website, timestamps <span class=\"hljs-keyword\">in</span> site2time.items():\n            top_results.add(dict({<span class=\"hljs-string\">'website'</span>: website, <span class=\"hljs-string\">'count'</span>: len(timestamps)}))\n        \n        top_results = sort(top_results, lambda r: r[<span class=\"hljs-string\">'count'</span>], reverse = True)\n\n        <span class=\"hljs-keyword\">return</span> top_results\n\n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 82,
                "title": "Очередь"
            },
            {
                "ID": 61,
                "title": "Структуры данных"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:49:35Z",
        "interviewCount": 200,
        "question": "<p><u>Сложность: </u><strong><u>MEDIUM</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">У нас есть web crawler, который скачивает страницы с популярных social media платформ. </span></p><p><span style=\"color: rgb(52, 73, 94);\">Скачанные web страницы отправляются в очередь сообщений. </span></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Результат выглядит так:</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-title class_\">DownloadedPage</span> {\n    <span class=\"hljs-title class_\">String</span> website; <span class=\"hljs-comment\">// e.g. \"twitter.com\", \"facebook.com\", \"github.com\"</span>\n    long timestamp;\n    <span class=\"hljs-title class_\">JSON</span> data;   <span class=\"hljs-comment\">// contains url, html and meta info</span>\n}\n\n</pre><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Мы можем слушать очередь результатов. </span></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Наша задача - предоставить API, которое будет возвращать список сайтов и кол-во результатов, скачанное для этих сайтов за последние 10 минут.</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TopWebsiteResultsProvider</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">ResultListener</span> {\n    \n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">onAfterPageDownload</span>(<span class=\"hljs-params\">DownloadedPage page</span>) {\n        <span class=\"hljs-comment\">// ...</span>\n    }\n    \n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">TopResults</span>&gt; <span class=\"hljs-title function_\">getTopWebsites</span>() {\n        <span class=\"hljs-comment\">// ...</span>\n    }\n}\n\n</pre><p><br></p><p><strong>Пример ответа метода getTopResults:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">facebook.com 452000\ntwitter.com  321000\nlinkedin.com 289000\ngithub.com   190050\nkaggle.com   110400\n\n</pre>",
        "time": 45,
        "title": "Number of results in last N minutes"
    },
    {
        "ID": 108,
        "answers": [
            {
                "content": "<p><strong style=\"color: rgb(52, 73, 94);\">Заполняем с конца.</strong></p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">merge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr1, <span class=\"hljs-type\">int</span> m, <span class=\"hljs-type\">int</span>[] arr2, <span class=\"hljs-type\">int</span> n)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> m - <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// arr1 pointer</span>\n        ﻿<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> n - <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// arr2 pointer</span>\n        ﻿<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> m + n - <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// result array insert position</span>\n\n        <span class=\"hljs-keyword\">while</span> (i &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; j &gt;= <span class=\"hljs-number\">0</span>) {\n            nums1[r--] = (nums1[i] &lt; nums2[j])\n                    ? nums2[i--]\n                    : nums1[j--];\n        }\n        \n        <span class=\"hljs-keyword\">while</span> (j &gt;= <span class=\"hljs-number\">0</span>) nums1[r--] = arr2[j--];\n    }\n}\n\n</pre><p><br></p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def <span class=\"hljs-title function_ invoke__\">merge</span>(<span class=\"hljs-attr\">nums1</span>: List[<span class=\"hljs-keyword\">int</span>], <span class=\"hljs-attr\">m</span>: <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-attr\">nums2</span>: List[<span class=\"hljs-keyword\">int</span>], <span class=\"hljs-attr\">n</span>: <span class=\"hljs-keyword\">int</span>) -&gt; None:\n    <span class=\"hljs-keyword\">while</span> m &gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> n &gt; <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">if</span> nums1[m-<span class=\"hljs-number\">1</span>] &gt;= nums2[n-<span class=\"hljs-number\">1</span>]:\n            nums1[m+n-<span class=\"hljs-number\">1</span>] = nums1[m-<span class=\"hljs-number\">1</span>]\n            m -= <span class=\"hljs-number\">1</span><span class=\"hljs-keyword\">else</span>:\n            nums1[m+n-<span class=\"hljs-number\">1</span>] = nums2[n-<span class=\"hljs-number\">1</span>]\n            n -= <span class=\"hljs-number\">1</span>\n    \n    <span class=\"hljs-keyword\">if</span> n &gt; <span class=\"hljs-number\">0</span>:\n        nums1[:n] = nums2[:n]\n\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 62,
                "title": "Сортировки"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:13:03Z",
        "interviewCount": 191,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Даны отсортированные массивы&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">arr1</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;и&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">arr2</code><span style=\"color: rgb(52, 73, 94);\">. </span></p><p><span style=\"color: rgb(52, 73, 94);\">Массив&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">arr1</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;содержит&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">m</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;отсортированных элементов, за которыми идут&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">n</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;нулей. </span></p><p><span style=\"color: rgb(52, 73, 94);\">Массив&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">arr2</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;содержит&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">n</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;отсортированных элементов. </span></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Нужно смержить два массива и сохранить результат внутри массива&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">arr1</code></p><p><br></p><p><strong>Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">arr1=[1,3,5,7,0,0,0,0],</span> <span class=\"hljs-string\">m=4,</span> <span class=\"hljs-string\">arr2=[2,4,6,8],</span> <span class=\"hljs-string\">n=4</span>\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-string\">arr1=[1,2,3,4,5,6,7,8]</span>\n\n</pre>",
        "time": 30,
        "title": "Merge sorted arrays"
    },
    {
        "ID": 138,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">removeDuplicates</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] nums)</span> {<br/>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">idx</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br/>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> num : nums) {<br/>        <span class=\"hljs-keyword\">if</span> (idx == <span class=\"hljs-number\">0</span> || num &gt; nums[idx-<span class=\"hljs-number\">1</span>]) {<br/>            nums[idx++] = num;<br/>        }<br/>    }<br/>    <span class=\"hljs-keyword\">return</span> idx;<br/>}<br/><br/></pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def remove_duplicates(nums: List[int]) -&gt; int:     <br/>    length = 0<br/>    if len(nums) == 0: <br/>        return length<br/>    for i in range(1, len(nums)):<br/>        if nums[length] &lt; nums[i]:<br/>            length += 1<br/>            nums[length] = nums[i]<br/>    return length + 1    <br/><br/></pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 78,
                "title": "Массив"
            },
            {
                "ID": 61,
                "title": "Структуры данных"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:43:37Z",
        "interviewCount": 172,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Дан отсортированный массив чисел, в котором есть дубли элементов. Нужно убрать дубли in-place (прямо в исходном массиве) и вернуть размер получившегося массива.</span></p><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">nums</span> <span class=\"hljs-string\">=</span> [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-number\">5</span><span class=\"hljs-string\">,</span> <span class=\"hljs-string\">nums</span> <span class=\"hljs-string\">=</span> [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-string\">_</span>,<span class=\"hljs-string\">_</span>,<span class=\"hljs-string\">_</span>,<span class=\"hljs-string\">_</span>,<span class=\"hljs-string\">_</span>]\n<span class=\"hljs-attr\">Explanation:</span> <span class=\"hljs-string\">В</span> <span class=\"hljs-string\">данном</span> <span class=\"hljs-string\">массиве</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-string\">уникальных</span> <span class=\"hljs-string\">элементов.</span> \n<span class=\"hljs-string\">Расположите</span> <span class=\"hljs-string\">их</span> <span class=\"hljs-string\">на</span> <span class=\"hljs-string\">первых</span> <span class=\"hljs-string\">пяти</span> <span class=\"hljs-string\">позициях</span> <span class=\"hljs-string\">в</span> <span class=\"hljs-string\">исходном</span> <span class=\"hljs-string\">массиве</span> <span class=\"hljs-string\">и</span> <span class=\"hljs-string\">верните</span> <span class=\"hljs-string\">число</span> <span class=\"hljs-number\">5</span><span class=\"hljs-string\">.</span>\n<span class=\"hljs-string\">Последующие</span> <span class=\"hljs-string\">элементы</span> <span class=\"hljs-string\">в</span> <span class=\"hljs-string\">исходном</span> <span class=\"hljs-string\">массиве</span> <span class=\"hljs-string\">могут</span> <span class=\"hljs-string\">быть</span> <span class=\"hljs-string\">любыми.</span>\n\n</pre>",
        "time": 30,
        "title": "Remove duplicates II (in-place)"
    },
    {
        "ID": 98,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Запускаем DFS поиск из каждой точки матрицы. </span></p><p><span style=\"color: rgb(52, 73, 94);\">Запоминаем клетки, которые уже просмативали, чтобы не повторяться. </span></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Сложность - </span><strong style=\"color: rgb(52, 73, 94);\">O(m*n)</strong></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\n    <span class=\"hljs-type\">int</span>[][] g;\n    <span class=\"hljs-type\">int</span> m;\n    <span class=\"hljs-type\">boolean</span>[] seen;\n    \n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">numIslands</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[][] grid)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">islands</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        g = grid;\n        m = g.length;\n        seen = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">boolean</span>[g.length * g[<span class=\"hljs-number\">0</span>].length];\n        \n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; g.length; i++)\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; g[i].length; j++)\n                islands += explore(i, j);\n            \n        <span class=\"hljs-keyword\">return</span> islands;\n    }\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">explore</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span> {\n        <span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-number\">0</span> || i == g.length || j &lt; <span class=\"hljs-number\">0</span> || j == g[i].length || isSeen(i, j))\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n        \n        mark(i, j);\n        \n        explore(i+<span class=\"hljs-number\">1</span>, j);\n        explore(i-<span class=\"hljs-number\">1</span>, j);\n        explore(i, j+<span class=\"hljs-number\">1</span>);\n        explore(i, j-<span class=\"hljs-number\">1</span>);\n        \n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    }\n    \n    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isSeen</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span> {\n        <span class=\"hljs-keyword\">return</span> seen[i * m + j];\n    }\n    \n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">mark</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span> {\n        seen[i * m + j] = <span class=\"hljs-literal\">true</span>;\n    }\n}\n\n</pre><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> Solution:\n    def num_islands(<span class=\"hljs-keyword\">self</span>, grid: List[List[<span class=\"hljs-type\">int</span>]]) -&gt; <span class=\"hljs-type\">int</span>:\n        <span class=\"hljs-keyword\">if</span> not grid:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n            \n        count = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(len(grid)):\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(len(grid[<span class=\"hljs-number\">0</span>])):\n                <span class=\"hljs-keyword\">if</span> grid[i][j] == <span class=\"hljs-string\">'1'</span>:\n                    <span class=\"hljs-keyword\">self</span>.dfs(grid, i, j)\n                    count += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">return</span> count\n    \n    def dfs(<span class=\"hljs-keyword\">self</span>, grid: List[List[<span class=\"hljs-type\">int</span>]], i: <span class=\"hljs-type\">int</span>, j: <span class=\"hljs-type\">int</span>) -&gt; None:\n        <span class=\"hljs-keyword\">if</span> i&lt;<span class=\"hljs-number\">0</span> or j&lt;<span class=\"hljs-number\">0</span> or i&gt;=len(grid) or j&gt;=len(grid[<span class=\"hljs-number\">0</span>]) or grid[i][j] != <span class=\"hljs-string\">'1'</span>:\n            <span class=\"hljs-keyword\">return</span>\n        grid[i][j] = <span class=\"hljs-string\">'#'</span>\n        <span class=\"hljs-keyword\">self</span>.dfs(grid, i+<span class=\"hljs-number\">1</span>, j)\n        <span class=\"hljs-keyword\">self</span>.dfs(grid, i<span class=\"hljs-number\">-1</span>, j)\n        <span class=\"hljs-keyword\">self</span>.dfs(grid, i, j+<span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">self</span>.dfs(grid, i, j<span class=\"hljs-number\">-1</span>)\n\n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 63,
                "title": "Поиск"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:00:55Z",
        "interviewCount": 146,
        "question": "<p><u>Сложность: </u><strong><u>MEDIUM</u></strong></p><p><u>Тип: </u><strong><u>DFS</u></strong></p><p><br></p><p>Дана 2D матрица&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">grid</code>&nbsp;размера&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">m x n</code>&nbsp;со значениями двух типов:&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">1</code>&nbsp;представляет землю,&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">0</code>&nbsp;представляет воду.</p><p><br></p><p>Необходимо посчитать количество островов. </p><p>Островом считаются клетки с типом земля, связанные между собой горизонтально или вертикально.</p><p><br></p><p><strong>Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">Input:\n[\n  [<span class=\"hljs-meta\">1, 1, 0, 0, 0</span>], \n  [<span class=\"hljs-meta\">1, 1, 0, 0, 0</span>], \n  [<span class=\"hljs-meta\">0, 0, 1, 0, 0</span>], \n  [<span class=\"hljs-meta\">0, 0, 0, 1, 1</span>]\n]\nOutput: <span class=\"hljs-number\">3</span>\nExplanation: три острова - А, B, C\n[\n  [<span class=\"hljs-meta\">A A . . .</span>] \n  [<span class=\"hljs-meta\">A A . . .</span>] \n  [. . B . .] \n  [. . . C C]\n]\n\n</pre>",
        "time": 45,
        "title": "Number of islands"
    },
    {
        "ID": 127,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br/>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">reverseVowels</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> s</span>) {<br/>        char[] chars = s.<span class=\"hljs-title function_\">toCharArray</span>();<br/>        int l = <span class=\"hljs-number\">0</span>;<br/>        int r = chars.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>;<br/><br/>        <span class=\"hljs-keyword\">while</span> (l &lt; r) {<br/>            <span class=\"hljs-keyword\">while</span> (!<span class=\"hljs-title function_\">isVowel</span>(chars[l]) &amp;&amp; l &lt; r) l++;<br/>            <span class=\"hljs-keyword\">while</span> (!<span class=\"hljs-title function_\">isVowel</span>(chars[r]) &amp;&amp; l &lt; r) r--;<br/><br/>            <span class=\"hljs-keyword\">if</span> (l &lt; r) {<br/>                char tmp = chars[l];<br/>                chars[l] = chars[r];<br/>                chars[r] = tmp;<br/>                l++;<br/>                r--;<br/>            }<br/>        }<br/><br/>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(chars);<br/>    }<br/><br/>    <span class=\"hljs-built_in\">boolean</span> <span class=\"hljs-title function_\">isVowel</span>(<span class=\"hljs-params\">char c</span>) {<br/>        <span class=\"hljs-keyword\">return</span> c == <span class=\"hljs-string\">'a'</span> || c == <span class=\"hljs-string\">'e'</span> || c ==<span class=\"hljs-string\">'o'</span> || c == <span class=\"hljs-string\">'u'</span> || c == <span class=\"hljs-string\">'i'</span>;<br/>    }<br/>}<br/><br/></pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def reverse_vowels(s: str) -&gt; str:<br/>    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}<br/>    L = list(s)<br/>    i, j = 0, len(L) - 1<br/><br/>    while i &lt; j:<br/>        while i &lt; j and L[i] not in vowels:<br/>            i += 1<br/>        while j &gt; i and L[j] not in vowels:<br/>            j -= 1<br/>        L[i], L[j] = L[j], L[i] <br/>        i += 1<br/>        j -= 1<br/>    return ''.join(L)<br/><br/></pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 64,
                "title": "Строки"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:24:48Z",
        "interviewCount": 114,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Дана строка, состоящая из букв английского алфавита в нижнем регистре. </span></p><p><span style=\"color: rgb(52, 73, 94);\">Нужно вернуть строку, в которой гласные будут распологаться в обратном порядке</span></p><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">hello</span> <span class=\"hljs-string\">world</span>\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-string\">hollo</span> <span class=\"hljs-string\">werld</span>\n\n<span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">wonderful</span> <span class=\"hljs-string\">life</span>\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-string\">wendirful</span> <span class=\"hljs-string\">lefo</span>\n\n</pre>",
        "time": 30,
        "title": "Reverse vowels in a string"
    },
    {
        "ID": 1815,
        "answers": [
            {
                "content": "<p>Складываем все символы второй строки в мапу, где ключ это символ, а значение - это количество вхождений символа.</p><p class=\"ql-align-right\"><br></p><p>Итерируемся по первой строке и уменьшаем счетчик в мапе. Если счетчик равен нулю - удаляем значение.Искомый символ тот, который не найден в мапе.</p><p class=\"ql-align-right\"><br></p><p><strong>Kotlin:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">fun <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> {\n    println(diffChar(<span class=\"hljs-string\">\"abcde\"</span>, <span class=\"hljs-string\">\"abcd\"</span>))\n    println(diffChar(<span class=\"hljs-string\">\"aabccd\"</span>, <span class=\"hljs-string\">\"aabcd\"</span>))\n    println(diffChar(<span class=\"hljs-string\">\"y\"</span>, <span class=\"hljs-string\">\"\"</span>))\n\n}\n\n\n\nfun <span class=\"hljs-title function_\">diffChar</span><span class=\"hljs-params\">(str1: String, str2: String)</span>: Char {\n\n    <span class=\"hljs-type\">val</span> <span class=\"hljs-variable\">charsCount</span> <span class=\"hljs-operator\">=</span> hashMapOf&lt;Char, Int&gt;()\n\n    str2.forEach { <span class=\"hljs-type\">char</span> -&gt;\n        <span class=\"hljs-type\">val</span> <span class=\"hljs-variable\">prevCount</span> <span class=\"hljs-operator\">=</span> charsCount[<span class=\"hljs-type\">char</span>] ?: <span class=\"hljs-number\">0</span>\n        charsCount[<span class=\"hljs-type\">char</span>] = prevCount + <span class=\"hljs-number\">1</span>\n    }\n\n    str1.forEach { <span class=\"hljs-type\">char</span> -&gt;\n        <span class=\"hljs-type\">val</span> <span class=\"hljs-variable\">prevCount</span> <span class=\"hljs-operator\">=</span> charsCount[<span class=\"hljs-type\">char</span>] ?: <span class=\"hljs-keyword\">return</span> charif (prevCount &gt; <span class=\"hljs-number\">1</span>) {\n            charsCount[<span class=\"hljs-type\">char</span>] = prevCount - <span class=\"hljs-number\">1</span>\n        } <span class=\"hljs-keyword\">else</span> {\n            charsCount.remove(<span class=\"hljs-type\">char</span>)\n        }\n    }\n\n    <span class=\"hljs-keyword\">throw</span> IllegalStateException(<span class=\"hljs-string\">\"Wrong input strings\"</span>)\n}\n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 83,
                "title": "Хеш таблица"
            },
            {
                "ID": 61,
                "title": "Структуры данных"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2023-06-27T17:05:47Z",
        "interviewCount": 106,
        "question": "<p><u style=\"color: rgb(0, 26, 52);\">Сложность: </u><strong style=\"color: rgb(0, 26, 52);\"><u>EASY</u></strong></p><p><br></p><p>Есть конвеер по которому движутся кубики. На каждом кубике напечатан один символ. В процессе движения по конвееру потерялся один кубик. Нужно определить, с каким символом он был, если известен входный и выходной набор символов на кубиках конвеера.</p><p class=\"ql-align-right\"><br></p><p><strong>Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">bcaeda,</span> <span class=\"hljs-string\">aabcd</span>\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-string\">e</span>\n</pre>",
        "time": 15,
        "title": "Find the difference"
    },
    {
        "ID": 71,
        "answers": [
            {
                "content": "<p>Решение:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">ReverseInt</span><span class=\"hljs-params\">(a <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-params\">(b <span class=\"hljs-keyword\">int</span>)</span></span> {<br/>  <span class=\"hljs-keyword\">for</span> a &gt; <span class=\"hljs-number\">0</span> {<br/>    k := a % <span class=\"hljs-number\">10</span><br/>    b = b*<span class=\"hljs-number\">10</span> + k<br/>    a = a / <span class=\"hljs-number\">10</span><br/>  }<br/>  <span class=\"hljs-keyword\">return</span><br/>}<br/><br/></pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">int <span class=\"hljs-title class_\">ReverseNumber</span>(int <span class=\"hljs-built_in\">number</span>)<br/>{<br/>  <span class=\"hljs-keyword\">var</span> reversed = <span class=\"hljs-number\">0</span>;<br/>  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-built_in\">number</span> &gt; <span class=\"hljs-number\">0</span>)<br/>  {<br/>    <span class=\"hljs-keyword\">var</span> modulo = <span class=\"hljs-built_in\">number</span> % <span class=\"hljs-number\">10</span>;<br/>    reversed = reversed * <span class=\"hljs-number\">10</span> + modulo;<br/>    <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-built_in\">number</span> / <span class=\"hljs-number\">10</span>;<br/>  }<br/><br/>  <span class=\"hljs-keyword\">return</span> reversed;<br/>}<br/><br/></pre><p><br></p><p>Тесты:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">TestReverseInt</span><span class=\"hljs-params\">(t *testing.T)</span></span> {<br/>  arg := <span class=\"hljs-number\">475</span><br/>  expected := <span class=\"hljs-number\">574</span><br/>  actual := ReverseInt(arg)<br/>  <span class=\"hljs-keyword\">if</span> actual != expected {<br/>    t.Errorf(<span class=\"hljs-string\">\"Error in ReverseInt(%v): expected %v but actual %v\"</span>, arg, expected, actual)<br/>  }<br/>}<br/><br/><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">TestReverseString</span><span class=\"hljs-params\">(t *testing.T)</span></span> {<br/>  arg := <span class=\"hljs-string\">\"123456789123456789\"</span><br/>  expected := <span class=\"hljs-string\">\"987654321987654321\"</span><br/>  actual := ReverseString(arg)<br/>  <span class=\"hljs-keyword\">if</span> actual != expected {<br/>    t.Errorf(<span class=\"hljs-string\">\"Error in ReverseString(%v): expected %v but actual %v\"</span>, arg, expected, actual)<br/>  }<br/>}<br/><br/></pre><p><br></p><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 66,
                "title": "Математика"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T18:45:54Z",
        "interviewCount": 82,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Дано натуральное число (например 123). Нужно написать метод, который принимает это число и возвращает число наоборот - (в данном случае 321).<span class=\"ql-cursor\">﻿</span></span></p>",
        "time": 15,
        "title": "Reverse a number"
    },
    {
        "ID": 107,
        "answers": [
            {
                "content": "<p><strong style=\"color: rgb(52, 73, 94);\">Counting sort</strong></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span>[] <span class=\"hljs-title\">sort</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span>[] colours</span>)</span> {\n        <span class=\"hljs-built_in\">int</span> count0 = <span class=\"hljs-number\">0</span>, count1 = <span class=\"hljs-number\">0</span>, count2 = <span class=\"hljs-number\">0</span>;\n        \n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> color : colours) {\n            <span class=\"hljs-keyword\">if</span> (color == <span class=\"hljs-number\">0</span>) count0++;\n            <span class=\"hljs-keyword\">if</span> (color == <span class=\"hljs-number\">1</span>) count1++;\n            <span class=\"hljs-keyword\">if</span> (color == <span class=\"hljs-number\">2</span>) count2++;\n        }\n        \n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; colours.length; i++) {\n            <span class=\"hljs-keyword\">if</span> (i &lt; count0) {colours[i] = <span class=\"hljs-number\">0</span>;}\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (i &lt; count0 + count1) {colours[i] = <span class=\"hljs-number\">1</span>;}\n            <span class=\"hljs-keyword\">else</span> {colours[i] = <span class=\"hljs-number\">2</span>;}\n        }\n    }\n}\n\n</pre><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def <span class=\"hljs-title function_\">sort</span><span class=\"hljs-params\">(colours: List[<span class=\"hljs-type\">int</span>])</span> -&gt; List[<span class=\"hljs-type\">int</span>]:\n    c0 = c1 = c2 = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span> c in colours:\n        <span class=\"hljs-keyword\">if</span> c == <span class=\"hljs-number\">0</span>: \n            c0 += <span class=\"hljs-number\">1</span>\n        elif c == <span class=\"hljs-number\">1</span>:\n            c1 += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            c2 += <span class=\"hljs-number\">1</span>\n            \n    <span class=\"hljs-keyword\">for</span> i in <span class=\"hljs-title function_\">range</span><span class=\"hljs-params\">(len(colours)</span>):\n        <span class=\"hljs-keyword\">if</span> i &lt; c0:\n            colours[i] = <span class=\"hljs-number\">0</span>\n        elif i &lt; c0 + c1:\n            colours[i] = <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            colours[i] = <span class=\"hljs-number\">2</span>\n            \n    <span class=\"hljs-keyword\">return</span> colours\n\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 62,
                "title": "Сортировки"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:12:11Z",
        "interviewCount": 73,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Дан массив&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">colours</code><span style=\"color: rgb(52, 73, 94);\">, каждый элемент которого соответствует одному из трёх цветов:</span></p><ul><li><span style=\"color: rgb(52, 73, 94);\">красный (0), </span></li><li><span style=\"color: rgb(52, 73, 94);\">зелёный (1),</span></li><li><span style=\"color: rgb(52, 73, 94);\">синий (2). </span></li></ul><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Необходимо отсортировать массив.</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]\n<span class=\"hljs-attr\">Output:</span> [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]\n</pre>",
        "time": 30,
        "title": "Sort colors"
    },
    {
        "ID": 152,
        "answers": [
            {
                "content": "<p>Идём справа налево. Храним в стеке температуру дней, находящихся справа. Если температура N-1 дня выше температуры дня, находящегося на вершине стека - выкидываем верхушку стека. Повторяем пока не найдем ответ для N-1 дня.</p><p>Инвариант стека: температуры растут от вершины ко дну стека</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br/><br/>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span>[] <span class=\"hljs-built_in\">dailyTemperatures</span>(<span class=\"hljs-type\">int</span>[] T) {<br/>        <span class=\"hljs-type\">int</span>[] days = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[T.length];<br/><br/>        <span class=\"hljs-comment\">// indices of days with higher temperature than current day</span><br/>        Stack&lt;Integer&gt; stack = <span class=\"hljs-keyword\">new</span> Stack&lt;&gt;();<br/><br/>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = T.length - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {<br/><br/>            <span class=\"hljs-comment\">// if current day temperature is higher than temperature of day to the right</span><br/>            <span class=\"hljs-keyword\">while</span> (stack.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">0</span> &amp;&amp; T[i] &gt;= T[stack.<span class=\"hljs-built_in\">peek</span>()]) {<br/>                <span class=\"hljs-comment\">// drop day to the right, because we would use current day instead</span><br/>                stack.<span class=\"hljs-built_in\">pop</span>();<br/>            }<br/><br/>            days[i] = stack.<span class=\"hljs-built_in\">isEmpty</span>()<br/>                    ? <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">// that means no higher temperature in next days</span><br/>                    : stack.<span class=\"hljs-built_in\">peek</span>() - i; <span class=\"hljs-comment\">// top of the stack is day with T higher than current</span><br/><br/>            stack.<span class=\"hljs-built_in\">push</span>(i);<br/>        }<br/><br/>        <span class=\"hljs-keyword\">return</span> days;<br/>    }<br/>}<br/><br/></pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def daily_temperatures(temps: List[int]) -&gt; List[int]:<br/>    days = [0] * len(temps)<br/>    stack = []<br/>    <br/>    for idx in range(len(temps) - 1, -1, -1):<br/>        while stack and temps[stack[-1]] &lt;= temps[idx]:<br/>            stack.pop()<br/>        <br/>        days[idx] = stack[-1] - idx if stack else 0<br/>        <br/>        stack.append(idx)<br/><br/>    return days<br/><br/></pre><p><br></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 81,
                "title": "Стек"
            },
            {
                "ID": 61,
                "title": "Структуры данных"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:55:47Z",
        "interviewCount": 65,
        "question": "<p><u>Сложность: </u><strong><u>MEDIUM</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Дан массив&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">temperatures</code><span style=\"color: rgb(52, 73, 94);\">, каждый элемент - температура в день&nbsp;</span><span class=\"ql-font-monospace\" style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">i</span><span style=\"color: rgb(52, 73, 94);\">&nbsp;</span></p><p><span style=\"color: rgb(52, 73, 94);\">Необходимо вернуть массив&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">answer</code><span style=\"color: rgb(52, 73, 94);\">, каждый элемент которого говорит: сколько дней нужно ждать после дня </span><span style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\" class=\"ql-font-monospace\">i</span><span style=\"color: rgb(52, 73, 94);\">, чтобы получить более высокую температуру.</span></p><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span>  [<span class=\"hljs-number\">73</span>,<span class=\"hljs-number\">74</span>,<span class=\"hljs-number\">75</span>,<span class=\"hljs-number\">71</span>,<span class=\"hljs-number\">69</span>,<span class=\"hljs-number\">72</span>,<span class=\"hljs-number\">76</span>,<span class=\"hljs-number\">73</span>]\n<span class=\"hljs-attr\">Output:</span> [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>]\n\n<span class=\"hljs-attr\">Input:</span>  [<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">60</span>,<span class=\"hljs-number\">90</span>]\n<span class=\"hljs-attr\">Output:</span> [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>]\n</pre><p><br></p><p>В первом примере, answer[2] = 4 для temperatures[2]=75, т.к. ближайший более теплый день — temperatures[6]=76.</p>",
        "time": 45,
        "title": "Higher temperatures"
    },
    {
        "ID": 96,
        "answers": [
            {
                "content": "<p>Решение без <strong>follow-up</strong> условий:</p><p><br></p><p>Можно создать HashSet&lt;Integer&gt; и складывать в него увиденные значения.</p><p>Как только встретим элемент, который уже был в хешсете — это дубликат.</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">findDuplicate</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span>[] nums</span>)</span> {\n        HashSet&lt;Integer&gt; <span class=\"hljs-keyword\">set</span> = <span class=\"hljs-keyword\">new</span> HashSet&lt;&gt;();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> num : nums) {\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">set</span>.contains(num)) {\n                <span class=\"hljs-keyword\">return</span> num;\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">set</span>.<span class=\"hljs-keyword\">add</span>(num);\n            }\n        }\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalStateException(<span class=\"hljs-string\">\"incorrect input\"</span>);\n    }\n}\n</pre><p><br></p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>Т.к. значения элементов находятся в&nbsp;<code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">[1,n]</code>&nbsp;- они являются допустимыми индексами в массиве.</p><p>Можно перемещаться по массиву как по связному списку: берём значение текущего элемента (e.g. 4) и переходим к элементу с индексом 4. Смотрим его значение (e.g. 8) и переходим к элементу с индексом 8.</p><p>Т.к. в массиве есть дубли, некоторые элементы будут указывать на один и тот же индекс. Это гарантирует, что в таком маршруте существует цикл.</p><p>Значит задача сводится к задаче найти цикл в связном списке. Используем стандартный подход hare/tortoise для поиска цикла.</p><p><br></p><p>Пример:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-type\">Массив</span>: [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">6</span>]<br/>Индекс: [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]<br/><br/>Дубль в массиве - <span class=\"hljs-built_in\">число</span> <span class=\"hljs-number\">1</span>.<br/><span class=\"hljs-keyword\">Если</span> перемещаться <span class=\"hljs-keyword\">по</span> индексам, найдём <span class=\"hljs-keyword\">цикл</span> <span class=\"hljs-number\">0</span> -&gt; <span class=\"hljs-number\">1</span> -&gt; <span class=\"hljs-number\">5</span> -&gt; <span class=\"hljs-number\">1</span><br/><br/></pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br/>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findDuplicate</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] nums)</span> {<br/>        <span class=\"hljs-comment\">// Find the intersection point of the two runners.</span><br/>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">tortoise</span> <span class=\"hljs-operator\">=</span> nums[<span class=\"hljs-number\">0</span>];<br/>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">hare</span> <span class=\"hljs-operator\">=</span> nums[<span class=\"hljs-number\">0</span>];<br/><br/>        <span class=\"hljs-keyword\">do</span> {<br/>            tortoise = nums[tortoise];<br/>            hare = nums[nums[hare]];<br/>        } <span class=\"hljs-keyword\">while</span> (tortoise != hare);<br/><br/>        <span class=\"hljs-comment\">// Find the \"entrance\" to the cycle.</span><br/>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">ptr1</span> <span class=\"hljs-operator\">=</span> nums[<span class=\"hljs-number\">0</span>];<br/>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">ptr2</span> <span class=\"hljs-operator\">=</span> hare;<br/>        <span class=\"hljs-keyword\">while</span> (ptr1 != ptr2) {<br/>            ptr1 = nums[ptr1];<br/>            ptr2 = nums[ptr2];<br/>        }<br/><br/>        <span class=\"hljs-keyword\">return</span> ptr1;<br/>    }<br/>}<br/><br/></pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def find_duplicate(nums: List[int]) -&gt; int:<br/>    tortoise = hare = nums[0]<br/><br/>    while True:<br/>        tortoise = nums[tortoise]<br/>        hare = nums[hare]<br/>        if tortoise == hare:<br/>            break<br/><br/>    ptr1, ptr2 = nums[0], hare<br/><br/>    while ptr1 != ptr2:<br/>        ptr1, ptr2 = nums[ptr1], nums[ptr2]<br/><br/>    return ptr1<br/><br/></pre><p><br></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 63,
                "title": "Поиск"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T18:58:11Z",
        "interviewCount": 57,
        "question": "<p><u>Сложность: </u><strong><u>MEDIUM</u></strong></p><p><u>Тип: </u><strong><u>Loop Detection</u></strong></p><p><br></p><p>Дан массив, содержащий&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">n+1</code>&nbsp;чисел, каждое число находится в диапазоне&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">[1,n]</code>.</p><p><br></p><p>Одно из чисел в этом массиве встречается более 1го раза. Нужно найти это число.</p><p><br></p><p><strong>Follow-up #1:</strong> Запрещается модифицировать (сортировать) исходный массив.</p><p><strong>Follow-up #2:</strong> запрещается использовать дополнительную память.</p><p><a href=\"https://www.youtube.com/watch?v=pKO9UjSeLew\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--theme-color,#42b983);\">https://www.youtube.com/watch?v=pKO9UjSeLew</a></p><p><br></p><p><strong>Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">arr=[3,1,3,4,2]</span>\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-number\">3</span>\n\n</pre>",
        "time": 45,
        "title": "Find a duplicate number"
    },
    {
        "ID": 148,
        "answers": [
            {
                "content": "<p>Необходимо работать с двумя стеками</p><ul><li>в первом стеке элементы лежат в естественном порядке.</li><li>во втором стеке хранятся минимальные элементы в стеке на момент вставки</li></ul><p><br></p><p>Минимальный элемент вычисляется в каждый момент времени, и его актуальность сохраняется после удаления элементов из стека</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MinStack</span> {\n\n    Stack&lt;Integer&gt; stack = <span class=\"hljs-keyword\">new</span> Stack&lt;&gt;();\n    Stack&lt;Integer&gt; mins = <span class=\"hljs-keyword\">new</span> Stack&lt;&gt;();\n    <span class=\"hljs-type\">int</span> min;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">push</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (stack.<span class=\"hljs-built_in\">isEmpty</span>() || x &lt; min) {\n            min = x;\n        }\n\n        stack.<span class=\"hljs-built_in\">push</span>(x);\n        mins.<span class=\"hljs-built_in\">push</span>(min);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">pop</span><span class=\"hljs-params\">()</span> </span>{\n        stack.<span class=\"hljs-built_in\">pop</span>();\n        mins.<span class=\"hljs-built_in\">pop</span>();\n\n        <span class=\"hljs-keyword\">if</span> (mins.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">0</span>) {\n            min = mins.<span class=\"hljs-built_in\">peek</span>();\n        }\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title\">top</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> stack.<span class=\"hljs-built_in\">peek</span>();\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title\">getMin</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (mins.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">NoSuchElementException</span>();\n        }\n        <span class=\"hljs-keyword\">return</span> mins.<span class=\"hljs-built_in\">peek</span>();\n    }\n}\n\n</pre><p><br></p><p><br></p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MinStack</span>:\n\n    def <span class=\"hljs-title function_\">__init__</span><span class=\"hljs-params\">(self)</span>:\n        self.stack = []\n        self.mins = []\n        self.min = <span class=\"hljs-number\">0</span>\n\n    def <span class=\"hljs-title function_\">push</span><span class=\"hljs-params\">(self, x: <span class=\"hljs-type\">int</span>)</span> -&gt; None:\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-title function_\">len</span><span class=\"hljs-params\">(self.stack)</span> == <span class=\"hljs-number\">0</span> or x &lt; self.min:\n            self.min = x\n        self.stack.append(x)\n        self.mins.append(self.min)\n\n    def <span class=\"hljs-title function_\">pop</span><span class=\"hljs-params\">(self)</span> -&gt; <span class=\"hljs-type\">int</span>:\n        self.stack.pop()\n        self.mins.pop()\n        \n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-title function_\">len</span><span class=\"hljs-params\">(self.mins)</span> &gt; <span class=\"hljs-number\">0</span>:\n            self.min = self.mins[-<span class=\"hljs-number\">1</span>]\n\n    def <span class=\"hljs-title function_\">top</span><span class=\"hljs-params\">(self)</span> -&gt; <span class=\"hljs-type\">int</span>:\n        <span class=\"hljs-keyword\">return</span> self.stack[-<span class=\"hljs-number\">1</span>]\n\n    def <span class=\"hljs-title function_\">get_min</span><span class=\"hljs-params\">(self)</span> -&gt; <span class=\"hljs-type\">int</span>:\n        <span class=\"hljs-keyword\">return</span> None <span class=\"hljs-keyword\">if</span> <span class=\"hljs-title function_\">len</span><span class=\"hljs-params\">(self.mins)</span> == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">else</span> self.min\n\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 81,
                "title": "Стек"
            },
            {
                "ID": 61,
                "title": "Структуры данных"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:54:12Z",
        "interviewCount": 50,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p>Реализовать MinStack, который поддерживает четыре операции</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MinStack</span> {\n    <span class=\"hljs-comment\">// insert value on top of stack  </span>\n    ﻿<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">push</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> val</span>)</span>;\n\n    <span class=\"hljs-comment\">// read value on top of stack</span>\n﻿    <span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">peek</span>()</span>;\n\n    <span class=\"hljs-comment\">// pop value from top of stack    </span>\n    ﻿<span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">pop</span>()</span>; \n\n    <span class=\"hljs-comment\">// read min value in stack    </span>\n    ﻿<span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">peekMin</span>()</span>;\n}\n</pre><p><br></p><p><strong>Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">stack = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">MinStack</span>();\n\nstack.<span class=\"hljs-built_in\">push</span>(<span class=\"hljs-number\">-2</span>); <span class=\"hljs-comment\">// [-2]</span>\nstack.<span class=\"hljs-built_in\">push</span>(<span class=\"hljs-number\">0</span>);  <span class=\"hljs-comment\">// [0, -2]</span>\nstack.<span class=\"hljs-built_in\">push</span>(<span class=\"hljs-number\">-3</span>); <span class=\"hljs-comment\">// [-3, 0, -2]</span>\nstack.<span class=\"hljs-built_in\">peekMin</span>(); <span class=\"hljs-comment\">// return -3</span>\nstack.<span class=\"hljs-built_in\">pop</span>();    <span class=\"hljs-comment\">// [0, -2]</span>\nstack.<span class=\"hljs-built_in\">peek</span>();    <span class=\"hljs-comment\">// return 0</span>\nstack.<span class=\"hljs-built_in\">peekMin</span>(); <span class=\"hljs-comment\">// return -2</span>\n\n</pre>",
        "time": 30,
        "title": "Min stack"
    },
    {
        "ID": 91,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findInsertPosition</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> x)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">l</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, r = arr.length - <span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-keyword\">while</span> (l &lt;= r) {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">mid</span> <span class=\"hljs-operator\">=</span> l + (r - l) / <span class=\"hljs-number\">2</span>;\n\n            <span class=\"hljs-keyword\">if</span> (arr[mid] &lt; x) {\n                l = mid + <span class=\"hljs-number\">1</span>;\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (arr[mid] &gt; x) {\n                r = mid - <span class=\"hljs-number\">1</span>;\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">return</span> mid;\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> l;\n    }\n}\n\n</pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def <span class=\"hljs-title function_ invoke__\">search_insert</span>(<span class=\"hljs-attr\">nums</span>: List[num], <span class=\"hljs-attr\">target</span>: <span class=\"hljs-keyword\">int</span>) -&gt; <span class=\"hljs-keyword\">int</span>:\n    l , r = <span class=\"hljs-number\">0</span>, <span class=\"hljs-title function_ invoke__\">len</span>(nums)-<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">while</span> l &lt;= r:\n        mid = l + (r-l) <span class=\"hljs-comment\">// 2</span>\n        <span class=\"hljs-keyword\">if</span> nums[mid] &lt; target:\n            l = mid + <span class=\"hljs-number\">1</span>\n        elif nums[mid] &gt; target:\n            r = mid - <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">return</span> mid\n    <span class=\"hljs-keyword\">return</span> l\n\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 63,
                "title": "Поиск"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T18:53:10Z",
        "interviewCount": 49,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><u>Тип: </u><strong><u>Binary Search</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Дан отсортированный массив&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">arr</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;и число&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">x</code><span style=\"color: rgb(52, 73, 94);\">. </span></p><p><span style=\"color: rgb(52, 73, 94);\">Найти позицию в массиве, на которую можно вставить число, сохранив порядок в массиве.</span></p><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">arr</span> <span class=\"hljs-string\">=</span> [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>]<span class=\"hljs-string\">,</span> <span class=\"hljs-string\">x</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-number\">5</span>\n\n</pre>",
        "time": 30,
        "title": "Find insert position"
    },
    {
        "ID": 110,
        "answers": [
            {
                "content": "<p><strong style=\"color: rgb(52, 73, 94);\">Решение c 2 проходами</strong></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span>[] <span class=\"hljs-title\">sortArrayByParity</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span>[] arr</span>)</span> {\n        <span class=\"hljs-built_in\">int</span>[] ans = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[arr.length];\n        <span class=\"hljs-built_in\">int</span> t = <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> num : arr)\n            <span class=\"hljs-keyword\">if</span> (num % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>)\n                ans[t++] = num;\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> num : arr)\n            <span class=\"hljs-keyword\">if</span> (num % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>)\n                ans[t++] = num;\n\n        <span class=\"hljs-keyword\">return</span> ans;\n    }\n}\n\n</pre><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def <span class=\"hljs-title function_\">sort_array_by_parity</span><span class=\"hljs-params\">(arr: List[<span class=\"hljs-type\">int</span>])</span> -&gt; List[<span class=\"hljs-type\">int</span>]:\n    <span class=\"hljs-keyword\">return</span> [x <span class=\"hljs-keyword\">for</span> x in arr <span class=\"hljs-keyword\">if</span> x % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>] + [x <span class=\"hljs-keyword\">for</span> x in arr <span class=\"hljs-keyword\">if</span> x % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>]\n\n</pre><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Решение in-place</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span>[] <span class=\"hljs-title\">sortArrayByParity</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span>[] A</span>)</span> {\n        <span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>, j = A.length - <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">while</span> (i &lt; j) {\n            <span class=\"hljs-keyword\">if</span> (A[i] % <span class=\"hljs-number\">2</span> &gt; A[j] % <span class=\"hljs-number\">2</span>) {\n                <span class=\"hljs-built_in\">int</span> tmp = A[i];\n                A[i] = A[j];\n                A[j] = tmp;\n            }\n\n            <span class=\"hljs-keyword\">if</span> (A[i] % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>) i++;\n            <span class=\"hljs-keyword\">if</span> (A[j] % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>) j--;\n        }\n\n        <span class=\"hljs-keyword\">return</span> A;\n    }\n}\n\n</pre><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"> def <span class=\"hljs-title function_\">sort_array_by_parity</span><span class=\"hljs-params\">(arr: List[<span class=\"hljs-type\">int</span>])</span> -&gt; List[<span class=\"hljs-type\">int</span>]:\n     i, j = <span class=\"hljs-number\">0</span>, len(arr) - <span class=\"hljs-number\">1</span>\n     <span class=\"hljs-keyword\">while</span> i &lt; j:\n         <span class=\"hljs-keyword\">if</span> arr[i] % <span class=\"hljs-number\">2</span> &gt; arr[j] % <span class=\"hljs-number\">2</span>:\n             arr[i], arr[j] = arr[j], arr[i]\n\n         <span class=\"hljs-keyword\">if</span> arr[i] % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>: i += <span class=\"hljs-number\">1</span>\n         <span class=\"hljs-keyword\">if</span> arr[j] % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>: j -= <span class=\"hljs-number\">1</span>\n\n     <span class=\"hljs-keyword\">return</span> arr\n\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 62,
                "title": "Сортировки"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:14:18Z",
        "interviewCount": 48,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p>Дан массив&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">int[] nums</code>. </p><p><br></p><p>Нужно отсортировать его так, чтобы сначала шли все четные числа, а затем все нечетные. </p><p>Если возможны несколько ответов, можно вернуть любой, удовлетворяющий условию.</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> [<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>]\n<span class=\"hljs-attr\">Output:</span> [<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>] <span class=\"hljs-string\">or</span> [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">7</span>]\n\n</pre>",
        "time": 30,
        "title": "Sort array by parity"
    },
    {
        "ID": 129,
        "answers": [
            {
                "content": "<p>Представлено рекурсивное решение.</p><p><br></p><p>Сначала проверяется что текущий символ соответствует паттерну (<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">booolean match = ...</code>)</p><p>Дальше развилка</p><ul><li>если в паттерне нет звездочки, проверяем следующие подстроки (ветка else)</li><li>иначе проверяем вариант где звездочка обнулила предыдущий символ паттерна (ветка if, до&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">||</code>) и вариант где мы заиспользовали совпавший символ.</li></ul><p><br></p><p>Это решение имеет экспоненциальную сложность в худшем сценарии, но оно более-менее понятное. </p><p><br></p><p>Существует решение на базе dynamic programming, работающее за O(N).</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">boolean</span> <span class=\"hljs-title function_\">isMatch</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> s, <span class=\"hljs-built_in\">String</span> p</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">isMatch</span>(s.<span class=\"hljs-title function_\">toCharArray</span>(), p.<span class=\"hljs-title function_\">toCharArray</span>(), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">boolean</span> <span class=\"hljs-title function_\">isMatch</span>(<span class=\"hljs-params\">char[] s, char[] p, int si, int pi</span>) {\n        <span class=\"hljs-keyword\">if</span> (pi == p.<span class=\"hljs-property\">length</span>) <span class=\"hljs-keyword\">return</span> si == s.<span class=\"hljs-property\">length</span>;\n\n        <span class=\"hljs-built_in\">boolean</span> match = si &lt; s.<span class=\"hljs-property\">length</span> &amp;&amp; (p[pi] == s[si] || p[pi] == <span class=\"hljs-string\">'.'</span>);\n\n        <span class=\"hljs-keyword\">if</span> (pi &lt; p.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span> &amp;&amp; p[pi+<span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">'*'</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">isMatch</span>(s, p, si, pi+<span class=\"hljs-number\">2</span>) || match &amp;&amp; <span class=\"hljs-title function_\">isMatch</span>(s, p, si+<span class=\"hljs-number\">1</span>, pi);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> match &amp;&amp; <span class=\"hljs-title function_\">isMatch</span>(s, p, si+<span class=\"hljs-number\">1</span>, pi+<span class=\"hljs-number\">1</span>);\n        }\n    }\n}\n\n</pre><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\">def <span class=\"hljs-title\">is_match</span>(<span class=\"hljs-params\">text: str, pattern: str</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> pattern:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">not</span> text\n\n    f_match</span> = <span class=\"hljs-built_in\">bool</span>(text) <span class=\"hljs-keyword\">and</span> pattern[<span class=\"hljs-number\">0</span>] <span class=\"hljs-keyword\">in</span> {text[<span class=\"hljs-number\">0</span>], <span class=\"hljs-string\">'.'</span>} <span class=\"hljs-meta\"># first char matches</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">if</span> <span class=\"hljs-title\">len</span>(<span class=\"hljs-params\">pattern</span>) &gt;</span>= <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">and</span> pattern[<span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">'*'</span>:\n        <span class=\"hljs-keyword\">return</span> is_match(text, pattern[<span class=\"hljs-number\">2</span>:]) <span class=\"hljs-function\"><span class=\"hljs-keyword\">or</span> f_match <span class=\"hljs-keyword\">and</span> <span class=\"hljs-title\">is_match</span>(<span class=\"hljs-params\">text[<span class=\"hljs-number\">1</span>:], pattern</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> f_match <span class=\"hljs-keyword\">and</span> <span class=\"hljs-title\">is_match</span>(<span class=\"hljs-params\">text[<span class=\"hljs-number\">1</span>:], pattern[<span class=\"hljs-number\">1</span>:]</span>)\n\n</span></pre>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 64,
                "title": "Строки"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:26:34Z",
        "interviewCount": 46,
        "question": "<p><u>Сложность: </u><strong><u>HARD</u></strong></p><p><br></p><p>Дана входная строка&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">s</code>&nbsp;и паттерн&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">p</code>.</p><p>Поддерживаются символы&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">.</code>&nbsp;и&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">*</code></p><ul><li><code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">.</code>&nbsp;матчится с любым символом</li><li><code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">*</code>&nbsp;матчит следующие 0..N символов строки равных предыдущему символу паттерна</li></ul><p><code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">s</code>&nbsp;содержит только буквы англ алфавита в нижнем регистре,&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">p</code>&nbsp;- те же буквы плюс символы точка/звездочка. </p><p><br></p><p>Гарантируется, что перед&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">*</code>&nbsp;всегда будет валидный символ.</p><p>Строка должна совпасть с паттерном целиком (недостаточно совпадений подстроки)</p><p><br></p><p><strong>Примеры:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-title class_\">Input</span>:  s = <span class=\"hljs-string\">\"aa\"</span>, p = <span class=\"hljs-string\">\"a\"</span>\n<span class=\"hljs-title class_\">Output</span>: <span class=\"hljs-literal\">false</span>\n\n<span class=\"hljs-title class_\">Input</span>:  s = <span class=\"hljs-string\">\"aa\"</span>, p = <span class=\"hljs-string\">\"a*\"</span>\n<span class=\"hljs-title class_\">Output</span>: <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-title class_\">Input</span>:  s = <span class=\"hljs-string\">\"ab\"</span>, p = <span class=\"hljs-string\">\".*\"</span>\n<span class=\"hljs-title class_\">Output</span>: <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-title class_\">Input</span>: s = <span class=\"hljs-string\">\"aab\"</span>, p = <span class=\"hljs-string\">\"c*a*b\"</span>\n<span class=\"hljs-title class_\">Output</span>: <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-title class_\">Explanation</span>: символ <span class=\"hljs-string\">'c'</span> обнулился с помощью *, <span class=\"hljs-string\">'a'</span> - задвоился\n\n</pre>",
        "time": 45,
        "title": "Regexp matching"
    },
    {
        "ID": 1833,
        "answers": [
            {
                "content": "<p><strong>Решение на Go</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n&nbsp;&nbsp;links := readGraph(<span class=\"hljs-string\">\"sample_graph.tsv\"</span>)\n&nbsp;&nbsp;vertexes := buildMap(links)\n&nbsp;&nbsp;shortestPath := BFS(<span class=\"hljs-string\">\"12\"</span>, <span class=\"hljs-string\">\"34\"</span>, vertexes)\n&nbsp;&nbsp;fmt.Println(shortestPath)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">buildMap</span><span class=\"hljs-params\">(links [][2]<span class=\"hljs-type\">string</span>)</span></span><span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>][]<span class=\"hljs-type\">string</span> {\n&nbsp; &nbsp; <span class=\"hljs-comment\">/* Переведем граф в карту вершина: ее соседи */</span>\n&nbsp; &nbsp; vertexes := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>][]<span class=\"hljs-type\">string</span>)\n\n&nbsp; &nbsp; <span class=\"hljs-keyword\">for</span> _, link := <span class=\"hljs-keyword\">range</span> links{\n&nbsp; &nbsp; &nbsp; &nbsp; vertexes[link[<span class=\"hljs-number\">0</span>]] = <span class=\"hljs-built_in\">append</span>(vertexes[link[<span class=\"hljs-number\">0</span>]], link[<span class=\"hljs-number\">1</span>])\n&nbsp; &nbsp; }\n\n&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> vertexes\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">BFS</span><span class=\"hljs-params\">(start <span class=\"hljs-type\">string</span>, end <span class=\"hljs-type\">string</span>, vertexes <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>][]<span class=\"hljs-type\">string</span>)</span></span>[]<span class=\"hljs-type\">string</span>{\n&nbsp; &nbsp; <span class=\"hljs-comment\">/*Будем искать поиском в ширину*/</span>\n﻿\n    <span class=\"hljs-comment\">/*Очередь обхода*/</span>\n&nbsp; &nbsp; queue := []<span class=\"hljs-type\">string</span>{start}\n\n    <span class=\"hljs-comment\">/*Из какого узла попали в узел при обходе для восстановления пути*/</span>\n&nbsp; &nbsp; visitedMap := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-type\">string</span>) \n\n&nbsp; &nbsp; <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">len</span>(queue) &gt; <span class=\"hljs-number\">0</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; vertex := queue[<span class=\"hljs-number\">0</span>]\n&nbsp; &nbsp; &nbsp; &nbsp; queue = queue[<span class=\"hljs-number\">1</span>:]\n\n&nbsp; &nbsp; &nbsp; &nbsp; neigbours := vertexes[vertex]\n\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">for</span> _, neigbour := <span class=\"hljs-keyword\">range</span> neigbours{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _, err := visitedMap[neigbour]\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> !err {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">/*Проверяем не были ли мы уже в этом узле, что бы не гулять по циклам */</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; visitedMap[neigbour] = vertex\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; queue = <span class=\"hljs-built_in\">append</span>(queue, neigbour)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> neigbour == end{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> findWay(start, end, visitedMap)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n\n&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findWay</span><span class=\"hljs-params\">(start <span class=\"hljs-type\">string</span>, end <span class=\"hljs-type\">string</span>, visitedMap <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-type\">string</span>)</span></span>[]<span class=\"hljs-type\">string</span>{\n&nbsp; &nbsp; <span class=\"hljs-comment\">/* Восстанавливаем путь */</span>\n&nbsp; &nbsp; path := []<span class=\"hljs-type\">string</span>{}\n&nbsp; &nbsp; current := end\n&nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; <span class=\"hljs-keyword\">for</span> current != start{\n&nbsp; &nbsp; &nbsp; &nbsp; path = <span class=\"hljs-built_in\">append</span>(path, current)\n&nbsp; &nbsp; &nbsp; &nbsp; current = visitedMap[current]\n&nbsp; &nbsp; }\n\n&nbsp; &nbsp; path = <span class=\"hljs-built_in\">append</span>(path, start)\n\n&nbsp; &nbsp; <span class=\"hljs-comment\">/* Мы восстановили пути из конечной точки в начальную - осталось его развернуть*/</span>\n\n&nbsp; &nbsp; <span class=\"hljs-keyword\">for</span> i, j := <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(path)<span class=\"hljs-number\">-1</span>; i &lt; j; i, j = i+<span class=\"hljs-number\">1</span>, j<span class=\"hljs-number\">-1</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; path[i], path[j] = path[j], path[i]\n&nbsp; &nbsp; }\n\n&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> path\n}\n</pre><p><br></p><p><br></p><p><strong>Решение на Java</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>[] args</span>) {\n    <span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">String</span>[]&gt; links = <span class=\"hljs-title function_\">readGraph</span>(<span class=\"hljs-string\">\"sample_graph.tsv\"</span>);\n    <span class=\"hljs-title class_\">Map</span>&lt;<span class=\"hljs-title class_\">String</span>, <span class=\"hljs-title class_\">Set</span>&lt;<span class=\"hljs-title class_\">String</span>&gt;&gt; src2dest = <span class=\"hljs-title function_\">buildRoutes</span>(links);\n    <span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">String</span>&gt; shortestPath = <span class=\"hljs-title function_\">bfs</span>(<span class=\"hljs-string\">\"12\"</span>, <span class=\"hljs-string\">\"34\"</span>, src2dest);\n    <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(shortestPath);\n}\n\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title class_\">Map</span>&lt;<span class=\"hljs-title class_\">String</span>, <span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">String</span>&gt;&gt; <span class=\"hljs-title function_\">buildRoutes</span>(<span class=\"hljs-params\">List&lt;<span class=\"hljs-built_in\">String</span>[]&gt; links</span>) {\n    <span class=\"hljs-title class_\">Map</span>&lt;<span class=\"hljs-title class_\">String</span>, <span class=\"hljs-title class_\">Set</span>&lt;<span class=\"hljs-title class_\">String</span>&gt;&gt; src2dest = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-title class_\">String</span>[] link : links) {\n        src2dest.<span class=\"hljs-title function_\">computeIfAbsent</span>(link[<span class=\"hljs-number\">0</span>], k -&gt; <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;&gt;()).<span class=\"hljs-title function_\">add</span>(link[<span class=\"hljs-number\">1</span>]);\n    }\n\n    <span class=\"hljs-keyword\">return</span> src2dest;\n}\n\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">String</span>&gt; <span class=\"hljs-title function_\">bfs</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> start, <span class=\"hljs-built_in\">String</span> end, <span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">Set</span>&lt;<span class=\"hljs-built_in\">String</span>&gt;&gt; src2dest</span>) {\n    <span class=\"hljs-title class_\">Queue</span>&lt;<span class=\"hljs-title class_\">String</span>&gt; queue = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedList</span>&lt;&gt;();\n    queue.<span class=\"hljs-title function_\">add</span>(start);\n    <span class=\"hljs-title class_\">Map</span>&lt;<span class=\"hljs-title class_\">String</span>, <span class=\"hljs-title class_\">String</span>&gt; visitedMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();\n\n    <span class=\"hljs-keyword\">while</span> (!queue.<span class=\"hljs-title function_\">isEmpty</span>()) {\n        <span class=\"hljs-title class_\">String</span> node = queue.<span class=\"hljs-title function_\">poll</span>();\n\n        <span class=\"hljs-title class_\">Set</span>&lt;<span class=\"hljs-title class_\">String</span>&gt; neighbors = src2dest.<span class=\"hljs-title function_\">getOrDefault</span>(node, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;&gt;());\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-title class_\">String</span> neighbor : neighbors) {\n            <span class=\"hljs-keyword\">if</span> (!visitedMap.<span class=\"hljs-title function_\">containsKey</span>(neighbor)) {\n                visitedMap.<span class=\"hljs-title function_\">put</span>(neighbor, node);\n                queue.<span class=\"hljs-title function_\">add</span>(neighbor);\n            }\n\n            <span class=\"hljs-keyword\">if</span> (neighbor.<span class=\"hljs-title function_\">equals</span>(end)) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">buildPath</span>(start, end, visitedMap);\n            }\n        }\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n}\n\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">String</span>&gt; <span class=\"hljs-title function_\">buildPath</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> start, <span class=\"hljs-built_in\">String</span> end, <span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">String</span>&gt; visitedMap</span>) {\n    <span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">String</span>&gt; path = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n    <span class=\"hljs-title class_\">String</span> current = end;\n\n    <span class=\"hljs-keyword\">while</span> (!current.<span class=\"hljs-title function_\">equals</span>(start)) {\n        path.<span class=\"hljs-title function_\">add</span>(current);\n        current = visitedMap.<span class=\"hljs-title function_\">get</span>(current);\n    }\n\n    path.<span class=\"hljs-title function_\">add</span>(start);\n\n    <span class=\"hljs-title class_\">Collections</span>.<span class=\"hljs-title function_\">reverse</span>(path);\n\n    <span class=\"hljs-keyword\">return</span> path;\n}\n</pre>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 63,
                "title": "Поиск"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2023-07-16T22:03:07Z",
        "interviewCount": 44,
        "question": "<p>Необходимо реализовать алгоритм, который находит кратчайший путь в графе. Граф задаётся списком рёбер, каждое из которых представляет собой две вершины графа. Расстояние между ребрами равно 1.</p>",
        "time": 45,
        "title": "Find shortest path in graph"
    },
    {
        "ID": 146,
        "answers": [
            {
                "content": "<p>Задачу можно решить разными способами, наиболее вероятные:</p><ul><li>В первый проход создать копии Node(val) для второго списка, попутно сохраняя маппинг из Node оригинального списка в Node нового списка. Пройтись по оригинальному списку второй раз, проставляя для узлов нового списка ссылки next/random, используя маппинг.</li><li>Запустить рекурсивное копирование списка (ниже)</li></ul><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-title class_\">Map</span>&lt;<span class=\"hljs-title class_\">Node</span>, <span class=\"hljs-title class_\">Node</span>&gt; mapping = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-title class_\">Node</span> <span class=\"hljs-title function_\">clone</span>(<span class=\"hljs-params\">Node node</span>){\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">null</span>) \n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n\n    <span class=\"hljs-keyword\">if</span> (mapping.<span class=\"hljs-title function_\">containsKey</span>(node)) \n        <span class=\"hljs-keyword\">return</span> mapping.<span class=\"hljs-title function_\">get</span>(node);\n    \n    <span class=\"hljs-title class_\">Node</span> copy = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(node.<span class=\"hljs-property\">val</span>);\n    mapping.<span class=\"hljs-title function_\">put</span>(node, copy);\n    copy.<span class=\"hljs-property\">next</span> = <span class=\"hljs-title function_\">clone</span>(node.<span class=\"hljs-property\">next</span>);\n    copy.<span class=\"hljs-property\">random</span> = <span class=\"hljs-title function_\">clone</span>(node.<span class=\"hljs-property\">random</span>);\n    \n    <span class=\"hljs-keyword\">return</span> copy;\n}\n</pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> Node:\n    def __init__(<span class=\"hljs-keyword\">self</span>, val: <span class=\"hljs-type\">int</span>, next: Node, random: Node) -&gt; None:\n        <span class=\"hljs-keyword\">self</span>.val = val\n        <span class=\"hljs-keyword\">self</span>.next = next\n        <span class=\"hljs-keyword\">self</span>.random = random\n\n<span class=\"hljs-keyword\">class</span> Solution:        \n    def copy_random_list(<span class=\"hljs-keyword\">self</span>, head: Node) -&gt; Node:\n        d = dict()\n        \n        def deep_copy(node):\n            <span class=\"hljs-keyword\">if</span> not node: returnif node <span class=\"hljs-keyword\">in</span> d: <span class=\"hljs-keyword\">return</span> d[node]\n            \n            d[node] = n = Node(node.val)\n            n.next = deep_copy(node.next)\n            n.random = deep_copy(node.random)\n            \n            <span class=\"hljs-keyword\">return</span> n\n        \n        <span class=\"hljs-keyword\">return</span> deep_copy(head)\n\n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 79,
                "title": "Связные списки"
            },
            {
                "ID": 61,
                "title": "Структуры данных"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:51:54Z",
        "interviewCount": 39,
        "question": "<p><u>Сложность: </u><strong><u>MEDIUM</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Дан связный список, у которого помимо ссылки&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">next</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;на следующий элемент, есть ещё ссылка&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">random</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;указывающая на какой-то случайный элемент списка.</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attribute\">class</span> Node {\n    <span class=\"hljs-attribute\">int</span> val;\n    <span class=\"hljs-attribute\">Node</span> next;\n    <span class=\"hljs-attribute\">Node</span> random;\n}\n</pre><p><br></p><p>Необходимо сделать полную копию данного списка. Т.е. для каждого узла <strong>A</strong> из оригинального списка должен быть создан узел <strong>A*</strong>, в котором ссылки <span class=\"ql-font-monospace\" style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">next</span> и <span class=\"ql-font-monospace\" style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">random</span> должны указывать на соответствующие узлы <strong>N*</strong> и <strong>R*</strong> в новом списке.</p>",
        "time": 30,
        "title": "Copy list with a random pointer"
    },
    {
        "ID": 105,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> {<br/><br/>    <span class=\"hljs-keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class=\"hljs-built_in\">int</span>[] nums) {<br/>        List&lt;List&lt;Integer&gt;&gt; answer = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();<br/>        backtrack(answer, <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;(), nums, <span class=\"hljs-number\">0</span>);<br/>        <span class=\"hljs-keyword\">return</span> answer;<br/>    }<br/>    <br/>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">backtrack</span>(<span class=\"hljs-params\">List&lt;List&lt;Integer&gt;&gt; answer, List&lt;Integer&gt; subset, <span class=\"hljs-built_in\">int</span>[] nums, <span class=\"hljs-built_in\">int</span> start</span>)</span> {<br/>        answer.<span class=\"hljs-keyword\">add</span>(<span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;(subset));<br/>        <br/>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = start; i &lt; nums.length; i++) {<br/>            subset.<span class=\"hljs-keyword\">add</span>(nums[i]);<br/>            backtrack(answer, subset, nums, i + <span class=\"hljs-number\">1</span>);<br/>            subset.<span class=\"hljs-keyword\">remove</span>(subset.size() - <span class=\"hljs-number\">1</span>);<br/>        }<br/>    }<br/>}<br/><br/></pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">class Solution:<br/>    def subsets(self, nums: List[int]) -&gt; List[List[int]]:<br/>        answer = []<br/>        self.backtrack(answer, [], nums, 0)<br/>        return answer<br/>    <br/>    def backtrack(self, answer: List[List[int]], subset: List[int], nums: List[int], start: int) -&gt; None:<br/>        answer.append(subset[:])<br/>        for i in range(start, len(nums)):<br/>            subset.append(nums[i])<br/>            self.backtrack(answer, subset, nums, i + 1)<br/>            del subset[-1]<br/><br/></pre><p><br></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 69,
                "title": "Рекурсия и back-tracking"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:09:20Z",
        "interviewCount": 31,
        "question": "<p><u>Сложность: </u><strong><u>MEDIUM</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Для данного массива чисел, содержащего уникальные значения, вернуть все возможные подмножества. </span></p><p><span style=\"color: rgb(52, 73, 94);\">Ответ не должен содержать дубли подмножеств.</span></p><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span>  [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]\n<span class=\"hljs-attr\">Output:</span> [[],[<span class=\"hljs-number\">1</span>],[<span class=\"hljs-number\">2</span>],[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>],[<span class=\"hljs-number\">3</span>],[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>],[<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>],[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]]\n\n</pre>",
        "time": 45,
        "title": "Subsets"
    },
    {
        "ID": 51,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">public class IndexerWorker {<br/>    @Inject<br/>    private WarehouseFacade warehouseAPI;<br/>    <br/>    private Semaphore semaphore = new Semaphore(50);<br/>    <br/>    public void index(Item item) {<br/>        // do some work, call some services<br/>        <br/>        semaphore.acquire();<br/>        int stocks = warehouseAPI.getNumberOfAvailableStocks(itemID);<br/>        semaphore.release();<br/>        <br/>        // do some other work, call another services<br/>    }<br/>}<br/><br/></pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 70,
                "title": "Concurrency"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T18:32:57Z",
        "interviewCount": 31,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">У нас есть API сервиса, который предоставляет информацию об остатках товаров на складах. </span></p><p><span style=\"color: rgb(52, 73, 94);\">Этот вызов довольно долгий, он опрашивает много складов и занимает несколько секунд.</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">WarehouseFacade</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getNumberOfAvailableStocks</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> itemID)</span>;\n}\n\n</pre><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">У нас есть сервис IndexerWorker, который использует данное API</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">IndexerWorker</span> {\n    <span class=\"hljs-meta\">@Inject</span>\n    ﻿<span class=\"hljs-keyword\">private</span> <span class=\"hljs-title class_\">WarehouseFacade</span> warehouseAPI;\n    \n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">index</span>(<span class=\"hljs-params\">Item item</span>) {\n        <span class=\"hljs-comment\">// do some work, call some services</span>\n\n        int stocks = warehouseAPI.<span class=\"hljs-title function_\">getNumberOfAvailableStocks</span>(itemID);\n        \n        <span class=\"hljs-comment\">// do some other work, call another services</span>\n    }\n}\n\n</pre><p><br></p><p>IndexerWorker вызывается из множества потоков, когда нужно пере-индексировать товар.</p><p><br></p><p>Владельцы сервиса WarehouseFacade попросили ограничить кол-во параллельных запросов к своему сервису - чтобы за раз было не больше 50 запросов. Как это можно реализовать?</p>",
        "time": 15,
        "title": "Semaphore"
    },
    {
        "ID": 102,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Для каждой буквы складываем в результат все возможные комбинации. </span></p><p><span style=\"color: rgb(52, 73, 94);\">Для следующей буквы, вынимаем все предыдущие комбинации и добавляем +1 букву.</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">String</span>&gt; <span class=\"hljs-title function_\">combinations</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span> digits</span>) {\n        <span class=\"hljs-title class_\">Deque</span>&lt;<span class=\"hljs-title class_\">String</span>&gt; answer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedList</span>&lt;<span class=\"hljs-title class_\">String</span>&gt;();\n\n        <span class=\"hljs-title class_\">String</span>[] mapping = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[] {\n                <span class=\"hljs-string\">\"0\"</span>, <span class=\"hljs-string\">\"1\"</span>, <span class=\"hljs-string\">\"abc\"</span>, <span class=\"hljs-string\">\"def\"</span>, <span class=\"hljs-string\">\"ghi\"</span>, <span class=\"hljs-string\">\"jkl\"</span>, <span class=\"hljs-string\">\"mno\"</span>, <span class=\"hljs-string\">\"pqrs\"</span>, <span class=\"hljs-string\">\"tuv\"</span>, <span class=\"hljs-string\">\"wxyz\"</span>\n        };\n        answer.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-string\">\"\"</span>);\n        \n        <span class=\"hljs-keyword\">while</span> (answer.<span class=\"hljs-title function_\">peek</span>().<span class=\"hljs-title function_\">length</span>() != digits.<span class=\"hljs-title function_\">length</span>()) {\n            <span class=\"hljs-title class_\">String</span> prefix = answer.<span class=\"hljs-title function_\">pollFirst</span>();\n            \n            char next = digits.<span class=\"hljs-title function_\">charAt</span>(prefix.<span class=\"hljs-title function_\">length</span>());\n            <span class=\"hljs-title class_\">String</span> nextLetters = mapping[next - <span class=\"hljs-string\">'0'</span>];\n            \n            <span class=\"hljs-keyword\">for</span> (char <span class=\"hljs-attr\">c</span>: nextLetters.<span class=\"hljs-title function_\">toCharArray</span>()) {\n                answer.<span class=\"hljs-title function_\">addLast</span>(prefix + c);\n            }\n        }\n        \n        <span class=\"hljs-keyword\">return</span> ans;\n    }\n}\n\n</pre><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def <span class=\"hljs-title function_\">letter_combinations</span><span class=\"hljs-params\">(digits: str)</span> -&gt; List[str]:\n    mapping = {\n        <span class=\"hljs-string\">'1'</span>: <span class=\"hljs-string\">''</span>,\n        <span class=\"hljs-string\">'2'</span>: <span class=\"hljs-string\">'abc'</span>,\n        <span class=\"hljs-string\">'3'</span>: <span class=\"hljs-string\">'def'</span>,\n        <span class=\"hljs-string\">'4'</span>: <span class=\"hljs-string\">'ghi'</span>,\n        <span class=\"hljs-string\">'5'</span>: <span class=\"hljs-string\">'jkl'</span>,\n        <span class=\"hljs-string\">'6'</span>: <span class=\"hljs-string\">'mno'</span>,\n        <span class=\"hljs-string\">'7'</span>: <span class=\"hljs-string\">'pqrs'</span>,\n        <span class=\"hljs-string\">'8'</span>: <span class=\"hljs-string\">'tuv'</span>,\n        <span class=\"hljs-string\">'9'</span>: <span class=\"hljs-string\">'wxyz'</span>,\n        <span class=\"hljs-string\">'0'</span>: <span class=\"hljs-string\">' '</span>\n    }\n    all_combinations = [<span class=\"hljs-string\">''</span>] <span class=\"hljs-keyword\">if</span> digits <span class=\"hljs-keyword\">else</span> []\n    <span class=\"hljs-keyword\">for</span> digit in digits:\n        current_combinations = []\n        <span class=\"hljs-keyword\">for</span> letter in mapping[digit]:\n            <span class=\"hljs-keyword\">for</span> combination in all_combinations:\n                current_combinations.append(combination + letter)\n        all_combinations = current_combinations\n        \n    <span class=\"hljs-keyword\">return</span> all_combinations\n\n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 69,
                "title": "Рекурсия и back-tracking"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:04:26Z",
        "interviewCount": 30,
        "question": "<p><u>Сложность: </u><strong><u>MEDIUM</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Есть кнопочный мобильный телефон:</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">[ 1     ] [ 2 abc ] [ 3 def ]\n[ 4 ghi ] [ 5 jkl ] [ 6 mno ]\n[ 7 pqrs] [ 8 tuv ] [ 9 wxyz]\n[ *     ] [ 0     ] [ #     ]\n\n</pre><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Дана строка, содержащая только символы от&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">0</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;до&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">9</code><span style=\"color: rgb(52, 73, 94);\">. </span></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Верните все возможные буквенные комбинации, которые могут получиться в результате нажатия на эти клавиши.</span></p><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">Input: digits = <span class=\"hljs-string\">\"23\"</span>\nOutput: [<span class=\"hljs-string\">\"ad\"</span>,<span class=\"hljs-string\">\"ae\"</span>,<span class=\"hljs-string\">\"af\"</span>,<span class=\"hljs-string\">\"bd\"</span>,<span class=\"hljs-string\">\"be\"</span>,<span class=\"hljs-string\">\"bf\"</span>,<span class=\"hljs-string\">\"cd\"</span>,<span class=\"hljs-string\">\"ce\"</span>,<span class=\"hljs-string\">\"cf\"</span>]\n</pre>",
        "time": 45,
        "title": "Letter Combinations of a Phone Number"
    },
    {
        "ID": 104,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Тот же принцип, что и в 1й задаче про permutations, но здесь подбирая кандидатов мы фильтруем дубли через Set.</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br/><br/>    <span class=\"hljs-keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"hljs-built_in\">permuteUnique</span>(<span class=\"hljs-type\">int</span>[] nums) {<br/>        Arrays.<span class=\"hljs-built_in\">sort</span>(nums);<br/>        List&lt;List&lt;Integer&gt;&gt; answer = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();<br/>        <span class=\"hljs-built_in\">backtrack</span>(answer, nums, <span class=\"hljs-number\">0</span>);<br/>        <span class=\"hljs-keyword\">return</span> answer;<br/>    }<br/>    <br/>    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">backtrack</span><span class=\"hljs-params\">(List&lt;List&lt;Integer&gt;&gt; answer, <span class=\"hljs-type\">int</span>[] nums, <span class=\"hljs-type\">int</span> start)</span> </span>{<br/>        <span class=\"hljs-keyword\">if</span> (start == nums.length) {<br/>            List&lt;Integer&gt; permutations = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();<br/>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> num : nums)<br/>                permutations.<span class=\"hljs-built_in\">add</span>(num);<br/>            <br/>            answer.<span class=\"hljs-built_in\">add</span>(permutations);<br/>        } <span class=\"hljs-keyword\">else</span> {<br/>            Set&lt;Integer&gt; set = <span class=\"hljs-keyword\">new</span> HashSet&lt;&gt;();<br/>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = start; i &lt; nums.length; i++) {<br/>                <span class=\"hljs-keyword\">if</span> (set.<span class=\"hljs-built_in\">contains</span>(nums[i])) { <span class=\"hljs-comment\">// if element was really added</span><br/>                    <span class=\"hljs-built_in\">swap</span>(i, start, nums);<br/>                    <span class=\"hljs-built_in\">backtrack</span>(answer, nums, start + <span class=\"hljs-number\">1</span>);<br/>                    <span class=\"hljs-built_in\">swap</span>(i, start, nums);<br/>                }<br/>            }<br/>        }<br/>    }<br/>    <br/>    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j, <span class=\"hljs-type\">int</span>[] arr)</span> </span>{<br/>        <span class=\"hljs-type\">int</span> tmp = arr[i];<br/>        arr[i] = arr[j];<br/>        arr[j] = tmp;<br/>    }<br/>}<br/><br/></pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">class Solution:<br/>    def permute(self, nums: List[int]) -&gt; List[List[int]]:<br/>        nums.sort()<br/>        answer = []<br/>        self.backtrack(answer, nums, 0)<br/>        return answer<br/><br/>    def backtrack(self, answer: List[List[int]], nums: List[int], start: int) -&gt; None:<br/>        if start == len(nums):<br/>            answer.append(nums[:])<br/>        else:<br/>            seen = set()<br/>            for i in range(start, len(nums)):<br/>                if nums[i] not in seen:<br/>                    seen.add(nums[i])<br/>                    self.swap(i, start, nums)<br/>                    self.backtrack(answer, nums, start + 1)<br/>                    self.swap(i, start, nums)<br/>            <br/>    def swap(self, i: int, j: int, arr: List[int]) -&gt; None:<br/>        tmp = arr[i]<br/>        arr[i] = arr[j]<br/>        arr[j] = tmp<br/><br/></pre><p><br></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 69,
                "title": "Рекурсия и back-tracking"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:06:59Z",
        "interviewCount": 28,
        "question": "<p><u>Сложность: </u><strong><u>MEDIUM</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Для данного массива чисел сгенерировать все возможные уникальные перестановки. </span></p><p><span style=\"color: rgb(52, 73, 94);\">В массиве могут быть дубли.</span></p><p><br></p><p><strong>Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">Input: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\nOutput: [\n    [<span class=\"hljs-meta\">1,2,3</span>], [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>],\n    [<span class=\"hljs-meta\">2,1,3</span>], [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>],\n    [<span class=\"hljs-meta\">3,1,2</span>], [<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>]\n]\n\n</pre>",
        "time": 45,
        "title": "Unique permutations"
    },
    {
        "ID": 58,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Поток типа&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">hydrogen</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;даёт 1 квоту потоку типа&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">oxygen</code><span style=\"color: rgb(52, 73, 94);\">, поэтому нужно накопить два&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">hydrogen</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;потока для того, чтобы&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">oxygen</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;мог что-то напечатать. </span></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Поток типа&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">oxygen</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;ждёт две квоты, и затем релизит квоты для потоков типа&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">hydrogen</code><span style=\"color: rgb(52, 73, 94);\">.</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">H2O</span> {\n\n    <span class=\"hljs-type\">Semaphore</span> <span class=\"hljs-variable\">h</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Semaphore</span>(<span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-type\">Semaphore</span> <span class=\"hljs-variable\">o</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Semaphore</span>(<span class=\"hljs-number\">2</span>);\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">hydrogen</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> InterruptedException {\n        h.acquire(<span class=\"hljs-number\">1</span>);\n        System.out.println(<span class=\"hljs-string\">\"H\"</span>);\n        o.release(<span class=\"hljs-number\">1</span>);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">oxygen</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> InterruptedException {\n        o.acquire(<span class=\"hljs-number\">2</span>);\n        System.out.println(<span class=\"hljs-string\">\"O\"</span>);\n        h.release(<span class=\"hljs-number\">2</span>);\n    }\n}\n\n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 70,
                "title": "Concurrency"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T18:35:18Z",
        "interviewCount": 25,
        "question": "<p><u>Сложность: </u><strong><u>MEDIUM</u></strong></p><p><br></p><p>Есть два вида потоков -&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">кислород</code>&nbsp;и&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">водород</code>. </p><p>Основной метод потока печатает один символ -&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">H</code>&nbsp;либо&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">O</code>.</p><p><br></p><p>В программе одновременно запускается большое число потоков обоих типов. </p><p><br></p><p>Потоки нужно синхронизировать таким образом, чтобы в напечатанной строке последовательные тройки символов всегда содержали два символа&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">H</code>&nbsp;и один символ&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">O</code>. Порядок этих трёх символов может быть любым (<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">HOH</code>,&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">OHH</code>&nbsp;или&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">HOH</code>)</p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">H2O</span> {\n    \n    <span class=\"hljs-comment\">// is called from many threads</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">hydrogen</span>() throws InterruptedException</span> {\n        System.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-string\">\"H\"</span>);\n    }\n\n    <span class=\"hljs-comment\">// is called from many threads</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">oxygen</span>() throws InterruptedException</span> {\n        System.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-string\">\"O\"</span>);\n    }\n}\n\n</pre>",
        "time": 45,
        "title": "H2O"
    },
    {
        "ID": 95,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Отличие от стандартного бинарного поиска в том, что половинки, на которые делится пространство поиска, могут иметь разрыв. </span></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\"><span class=\"ql-cursor\">﻿</span>Поэтому требуется чуть больше проверок, чтобы определить в каком пространстве продолжать поиск.</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">search</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] nums, <span class=\"hljs-type\">int</span> target)</span> {\n        <span class=\"hljs-keyword\">if</span> (nums == <span class=\"hljs-literal\">null</span> || nums.length == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">lo</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, hi = nums.length - <span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-keyword\">while</span> (lo &lt; hi) {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">mid</span> <span class=\"hljs-operator\">=</span> lo + (hi-lo)/<span class=\"hljs-number\">2</span>;\n\n            <span class=\"hljs-keyword\">if</span> (nums[mid] &gt;= nums[lo]) {\n                <span class=\"hljs-keyword\">if</span> (target &lt;= nums[mid] &amp;&amp; target &gt;= nums[lo]) hi = mid;\n                <span class=\"hljs-keyword\">else</span> lo = mid + <span class=\"hljs-number\">1</span>;\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">if</span> (target &gt; nums[mid] &amp;&amp; target &lt;= nums[hi]) lo = mid + <span class=\"hljs-number\">1</span>;\n                <span class=\"hljs-keyword\">else</span> hi = mid;\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> nums[lo] == target ? lo : -<span class=\"hljs-number\">1</span>;\n    }\n}\n\n</pre><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def <span class=\"hljs-title function_ invoke__\">search</span>(<span class=\"hljs-attr\">nums</span>: List[<span class=\"hljs-keyword\">int</span>], <span class=\"hljs-attr\">target</span>: <span class=\"hljs-keyword\">int</span>) -&gt; <span class=\"hljs-keyword\">int</span>:\n    lo, hi = <span class=\"hljs-number\">0</span>, <span class=\"hljs-title function_ invoke__\">len</span>(nums) - <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">while</span> lo &lt; hi:\n        mid = lo + (hi - lo) <span class=\"hljs-comment\">// 2</span>\n        <span class=\"hljs-keyword\">if</span> nums[lo] &lt;= nums[mid]:\n            <span class=\"hljs-keyword\">if</span> nums[lo] &lt;= target &lt;= nums[mid]:\n                hi = mid\n            <span class=\"hljs-keyword\">else</span>:\n                lo = mid + <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">if</span> nums[mid] &lt;= target &lt;= nums[hi]: \n                lo = mid + <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">else</span>:\n                hi = mid\n\n    <span class=\"hljs-keyword\">return</span> lo <span class=\"hljs-keyword\">if</span> nums[lo] == target <span class=\"hljs-keyword\">else</span> -<span class=\"hljs-number\">1</span>\n\n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 63,
                "title": "Поиск"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T18:56:09Z",
        "interviewCount": 21,
        "question": "<p><u>Сложность: </u><strong><u>MEDIUM</u></strong></p><p><u>Тип: </u><strong><u>Binary Search</u></strong></p><p><br></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Дан отсортированный по возрастанию массив&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">arr</code><span style=\"color: rgb(52, 73, 94);\">, который был повернут на несколько элементов. </span></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Необходимо найти в нём индекс элемента&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">target</code><span style=\"color: rgb(52, 73, 94);\">, либо вернуть&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">-1</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;если такого числа в массиве нет.</span></p><p><br></p><p><strong>Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">arr=[4,5,6,7,0,1,2],</span> <span class=\"hljs-string\">target=0</span>\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-number\">4</span>\n\n</pre>",
        "time": 45,
        "title": "Search in sorted rotated array"
    },
    {
        "ID": 62,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Сраниваем младший бит с 1, увеличиваем счетчик, делаем шифт вправо на единицу.</span></p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\n\n    <span class=\"hljs-comment\">// you need to treat n as an unsigned value</span>\n    ﻿<span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">hammingWeight</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-keyword\">while</span> (n != <span class=\"hljs-number\">0</span>) {\n            r += n &amp; <span class=\"hljs-number\">1</span>;\n            n &gt;&gt;&gt;= <span class=\"hljs-number\">1</span>;\n        }\n\n        <span class=\"hljs-keyword\">return</span> r;\n    }\n}\n\n</pre><p><br></p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def <span class=\"hljs-title function_ invoke__\">hamming_weight</span>(<span class=\"hljs-built_in\">self</span>, <span class=\"hljs-attr\">n</span>: <span class=\"hljs-keyword\">int</span>) -&gt; <span class=\"hljs-keyword\">int</span>:\n    count = <span class=\"hljs-number\">0</span><span class=\"hljs-keyword\">while</span> n:\n        <span class=\"hljs-keyword\">if</span> n &amp; <span class=\"hljs-number\">1</span>: \n            count += <span class=\"hljs-number\">1</span>\n        n = n &gt;&gt; <span class=\"hljs-number\">1</span>\n        \n    <span class=\"hljs-keyword\">return</span> count\n\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 68,
                "title": "Битовая арифметика"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T18:36:21Z",
        "interviewCount": 21,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Определить количество единичек в двоичном представлении числа</span></p><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-number\">5</span> <span class=\"hljs-string\">-&gt;</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">7</span> <span class=\"hljs-string\">-&gt;</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">13</span> <span class=\"hljs-string\">-&gt;</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">64</span> <span class=\"hljs-string\">-&gt;</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">0xFF</span> <span class=\"hljs-string\">-&gt;</span> <span class=\"hljs-number\">8</span>\n\n<span class=\"hljs-attr\">Explanation:</span> <span class=\"hljs-number\">13</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">0b1101</span>\n</pre>",
        "time": 30,
        "title": "Number of 1 bits"
    },
    {
        "ID": 97,
        "answers": [
            {
                "content": "<p>Нам нужно подобрать вместимость грузовика. </p><p>Минимально возможное значение - вес самой большой коробки. </p><p>Максимально возможное значение - сумма весов всех коробок.</p><p><br></p><p>Используем бинарный поиск для подбора веса, пока не найдем лучшее решение.</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\n    public <span class=\"hljs-built_in\">int</span> shipWithinDays(<span class=\"hljs-built_in\">int</span>[] weights, <span class=\"hljs-built_in\">int</span> shipments) {\n        <span class=\"hljs-built_in\">int</span> <span class=\"hljs-built_in\">min</span> = <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">max</span> = <span class=\"hljs-number\">0</span>;\n        \n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> weight : weights) {\n            <span class=\"hljs-built_in\">min</span> = Math.<span class=\"hljs-built_in\">max</span>(<span class=\"hljs-built_in\">min</span>, weight);\n            <span class=\"hljs-built_in\">max</span> = <span class=\"hljs-built_in\">max</span> + weight;\n        }\n        \n        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-built_in\">min</span> &lt; <span class=\"hljs-built_in\">max</span>) {\n            <span class=\"hljs-built_in\">int</span> mid = (<span class=\"hljs-built_in\">min</span> + <span class=\"hljs-built_in\">max</span>) / <span class=\"hljs-number\">2</span>;\n            <span class=\"hljs-built_in\">int</span> required = <span class=\"hljs-number\">1</span>; // сколько грузовиков потребуется\n            <span class=\"hljs-built_in\">int</span> currWeight = <span class=\"hljs-number\">0</span>; // текущий вес набранных коробок\n            \n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> weight : weights) {\n                <span class=\"hljs-keyword\">if</span> (currWeight + weight &gt; mid) {\n                    required += <span class=\"hljs-number\">1</span>; // вышли за пределы, нужен еще грузовик\n                    currWeight = <span class=\"hljs-number\">0</span>;\n                }\n                currWeight += weight;\n            }\n            <span class=\"hljs-keyword\">if</span> (required &gt; shipments) \n                <span class=\"hljs-built_in\">min</span> = mid + <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">else</span> \n                <span class=\"hljs-built_in\">max</span> = mid;\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">min</span>;\n    }\n}\n\n</pre><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def <span class=\"hljs-title function_ invoke__\">ship_within_days</span>(<span class=\"hljs-attr\">weights</span>: List[<span class=\"hljs-keyword\">int</span>], <span class=\"hljs-attr\">shipments</span>: <span class=\"hljs-keyword\">int</span>) -&gt; <span class=\"hljs-keyword\">int</span>:\n    min = max = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">for</span> weight in weights:\n        min = <span class=\"hljs-title function_ invoke__\">max</span>(min, weight)\n        max = max + weight\n        \n    <span class=\"hljs-keyword\">while</span> min &lt; max:\n        mid = (mid + max) <span class=\"hljs-comment\">// 2</span>\n        required = <span class=\"hljs-number\">1</span>\n        curr_weight = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">for</span> weight in weights:\n            <span class=\"hljs-keyword\">if</span> curr_weight + weight &gt; mid:\n                required += <span class=\"hljs-number\">1</span>\n                curr_weight = <span class=\"hljs-number\">0</span>\n            curr_weight += weight\n            \n        <span class=\"hljs-keyword\">if</span> required &gt; shipments:\n            min = mid + <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            max = mid\n\n    <span class=\"hljs-keyword\">return</span> min    \n\n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 63,
                "title": "Поиск"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T18:59:19Z",
        "interviewCount": 21,
        "question": "<p><u>Сложность: </u><strong><u>MEDIUM</u></strong></p><p><u>Тип: </u><strong><u>Binary Search</u></strong></p><p><br></p><p>По конвейерной ленте едут коробки, которые нужно доставить с текущего склада к распределительным центрам за <strong>N</strong> перевозок.</p><p><br></p><p>Каждая коробка на ленте имеет вес&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">weights[i]</code>. </p><p><br></p><p>Перевозка выглядит так: к складу подъезжает грузовик, и мы загружаем его коробками в той последовательности, с которой они ехали по ленте. У грузовика есть предел суммарного веса, который он может увезти. Можно загружать грузовик не до конца.</p><p><br></p><p>Имея на руках массив весов коробок на ленте&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">weights</code>&nbsp;и число перевозок&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">shipments</code>, за которое нам нужно развести все коробки, рассчитайте минимальную вместимость грузовика&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">capacity</code>.</p><p><br></p><p><strong>Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">weights</span> <span class=\"hljs-string\">=</span> [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">10</span>]<span class=\"hljs-string\">,</span> <span class=\"hljs-string\">shipments</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-number\">5</span>\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-number\">15</span>\n<span class=\"hljs-attr\">Explanation:</span> <span class=\"hljs-string\">Грузоподъёмность</span> <span class=\"hljs-string\">равная</span> <span class=\"hljs-number\">15</span> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">минимально</span> <span class=\"hljs-string\">возможная</span> <span class=\"hljs-string\">для</span> <span class=\"hljs-string\">такой</span> <span class=\"hljs-string\">конфигурации</span>\n<span class=\"hljs-string\">Пример</span> <span class=\"hljs-string\">комплектовки:</span>\n<span class=\"hljs-string\">отправление</span> <span class=\"hljs-comment\">#1 - 1,2,3,4,5</span>\n<span class=\"hljs-string\">отправление</span> <span class=\"hljs-comment\">#2 - 6,7</span>\n<span class=\"hljs-string\">отправление</span> <span class=\"hljs-comment\">#3 - 8</span>\n<span class=\"hljs-string\">отправление</span> <span class=\"hljs-comment\">#4 - 9</span>\n<span class=\"hljs-string\">отправление</span> <span class=\"hljs-comment\">#5 - 10</span>\n\n</pre>",
        "time": 45,
        "title": "Capacity to ship packages within N shipments"
    },
    {
        "ID": 131,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Строим trie </span><strong style=\"color: rgb(52, 73, 94);\">¯\\_(ツ)_/¯</strong></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Trie</span> {\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\n        <span class=\"hljs-type\">char</span> letter;\n        <span class=\"hljs-type\">boolean</span> isWord;\n        Node[] children = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>[<span class=\"hljs-number\">26</span>];\n        \n        Node <span class=\"hljs-title function_\">getChild</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> ch)</span> {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">idx</span> <span class=\"hljs-operator\">=</span> ch - <span class=\"hljs-string\">'a'</span>;\n            <span class=\"hljs-keyword\">return</span> children[idx];\n        }\n        \n        <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addChild</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> ch)</span> {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">idx</span> <span class=\"hljs-operator\">=</span> ch - <span class=\"hljs-string\">'a'</span>;\n            children[idx] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(ch);\n        }\n    }\n    \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">root</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>();\n    \n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(String word)</span> {\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">node</span> <span class=\"hljs-operator\">=</span> root;\n        \n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; word.length(); i++) {\n            <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">ch</span> <span class=\"hljs-operator\">=</span> word.charAt(i);\n            \n            <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">child</span> <span class=\"hljs-operator\">=</span> node.getChild(ch);\n            \n            <span class=\"hljs-keyword\">if</span> (child == <span class=\"hljs-literal\">null</span>) {\n                child = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(ch);\n                node.addChild(child);\n            }\n            \n            node = child;\n        }\n        \n        node.isWord = <span class=\"hljs-literal\">true</span>;\n    }\n    \n    <span class=\"hljs-keyword\">public</span> List&lt;String&gt; <span class=\"hljs-title function_\">search</span><span class=\"hljs-params\">(String prefix)</span> {\n        List&lt;String&gt; suggests = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n        \n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">node</span> <span class=\"hljs-operator\">=</span> root;\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; word.length(); i++) {\n            <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">ch</span> <span class=\"hljs-operator\">=</span> word.charAt(i);\n            \n            node = node.getChild(ch);\n            <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">null</span>) { <span class=\"hljs-comment\">// nothing foundreturn suggests;</span>\n            }\n        }\n        \n        <span class=\"hljs-comment\">// now collect sub-nodesint LIMIT = 10;</span>\n        dfs(node, prefix, suggests, LIMIT);\n        \n        <span class=\"hljs-keyword\">return</span> suggests.subList(<span class=\"hljs-number\">0</span>, LIMIT);\n    }\n    \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">dfs</span><span class=\"hljs-params\">(Node node, String prefix, List&lt;String&gt; result, <span class=\"hljs-type\">int</span> limit)</span> {\n        <span class=\"hljs-keyword\">if</span> (node.isWord) {\n            result.add(prefix + node.val);\n        }\n        \n        <span class=\"hljs-keyword\">for</span> (Node child : node.children) {\n            <span class=\"hljs-keyword\">if</span> (result.size() &lt; limit)\n                dfs(child, prefix + child.val, result, limit);\n        }\n    }\n}\n\n</pre><p><br></p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">class TrieNode:\n    \n    def <span class=\"hljs-built_in\">__init__</span>(self):\n        self.children = collections.<span class=\"hljs-built_in\">defaultdict</span>(TrieNode)\n        self.ch = <span class=\"hljs-string\">'0'</span>\n        self.is_word = False\n\nclass Trie:\n\n    def <span class=\"hljs-built_in\">__init__</span>(self):\n        self.root = <span class=\"hljs-built_in\">TrieNode</span>()\n\n    def <span class=\"hljs-built_in\">insert</span>(self, word: str) -&gt; None:\n        node = self.root\n        for ch in word:\n            node = node.children[ch]\n            node.ch = ch\n        node.is_word = True\n\n    def <span class=\"hljs-built_in\">search</span>(self, prefix: str) -&gt; List[str]:\n        suggests = []\n        node = self.root\n        for ch in prefix:\n            node = node.children.<span class=\"hljs-built_in\">get</span>(ch)\n            if node is None:\n                return suggests\n        \n        limit = <span class=\"hljs-number\">10</span>    \n        <span class=\"hljs-built_in\">dfs</span>(node, prefix, suggests, limit)    \n        return suggests[:<span class=\"hljs-number\">10</span>]\n\n    def <span class=\"hljs-built_in\">dfs</span>(self, node, prefix, suggests, limit):\n        if node.is_word: \n            suggests.<span class=\"hljs-built_in\">append</span>(prefix + node.ch)\n            \n        for child in node.children.<span class=\"hljs-built_in\">values</span>():\n            if <span class=\"hljs-built_in\">len</span>(suggests) &lt; limit:\n                <span class=\"hljs-built_in\">dfs</span>(child, prefix + child.ch, suggests, limit)\n\n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 84,
                "title": "Trie"
            },
            {
                "ID": 61,
                "title": "Структуры данных"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:32:07Z",
        "interviewCount": 21,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Имеется большой словарь слов. Нужно реализовать методы</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-title class_\">String</span> word);\n\n<span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">String</span>&gt; <span class=\"hljs-title function_\">search</span>(<span class=\"hljs-title class_\">String</span> prefix);\n\n</pre><p>Метод должен возвращать до 10 слов, которые начинаются на заданный префикс.</p><p>Считаем, что алфавит содержит только английские буквы.</p><p><br></p><p><strong>Усложнения и доп вопросы:</strong></p><ul><li>ранжирование подсказок по популярности</li><li>сжатие структуры данных</li><li>как запустить сервис в production, как масштабировать и тд</li></ul><p><br></p><p><strong>Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attribute\">insert</span> app\ninsert application\ninsert apple\ninsert appointment\ninsert apricot\ninsert appearance\ninsert applause\ninsert batman\n\nsearch <span class=\"hljs-string\">\"a\"</span>    <span class=\"hljs-comment\"># returns all words starting with a</span>\nsearch <span class=\"hljs-string\">\"appl\"</span> <span class=\"hljs-comment\"># returns [application, apple, applause]</span>\n\n</pre>",
        "time": 45,
        "title": "Build search suggestions"
    },
    {
        "ID": 2740,
        "answers": [
            {
                "content": "<p>Предложит ответ, что-то из битовой арифметики:</p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"go\">Четное = X &amp;&amp; 1 == 0</div><div class=\"ql-code-block\" data-language=\"go\">Четное = X || 1 != X</div><div class=\"ql-code-block\" data-language=\"go\">Четное = X &lt;&lt; 1 &gt;&gt; 1 == X</div></pre><p><br></p><p>&gt; Дополнительный вопрос \"Теперь представим, что битовых операций тоже нет. Можно использовать циклы, заводить переменные, использовать условные операторы\"</p><p><br></p><p>Ответ. Что-то неэффективное типа</p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"go\">while (x &gt; <span class=\"ql-token hljs-true\">0) {</span></div><div class=\"ql-code-block\" data-language=\"go\">\tx-=<span class=\"ql-token hljs-true\">2</span></div><div class=\"ql-code-block\" data-language=\"go\">}</div><div class=\"ql-code-block\" data-language=\"go\"><span class=\"ql-token hljs-true\">if x == 0 then \"Четное\"</span></div></pre>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>&gt; Дополнительный вопрос \"Теперь представим, что битовых операций тоже нет. Можно использовать циклы, заводить переменные, использовать условные операторы. При этом предложить более эффективное решение, чем на 18ом грейде\"</p><p><br></p><p>Ответ. В целом вычитать можно не только 2, а любое четное число. Кандидат может предложить вычитать лесенкой, типа сначала 1000000, потом 100000, потом 10000, 1000 и тд до 10.</p><p><br></p><p>Идеальное решение:</p><p>Допустим x это 32ух битное число, тогда решение будет такое:</p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"go\">If (x&gt;=pow(2, 31)) then x=x-pow(2, 31)</div><div class=\"ql-code-block\" data-language=\"go\">If (x&gt;=pow(2, 30)) then x=x-pow(2, 30)</div><div class=\"ql-code-block\" data-language=\"go\">..</div><div class=\"ql-code-block\" data-language=\"go\">If (x&gt;=pow(2, 1)) then x=x-pow(2, 1)</div><div class=\"ql-code-block\" data-language=\"go\"><br></div><div class=\"ql-code-block\" data-language=\"go\">If x == 0 then \"Четное\"</div></pre>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 68,
                "title": "Битовая арифметика"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2024-10-02T12:58:13Z",
        "interviewCount": 21,
        "question": "<p>Нужно определить четное число или не четное? При этом операции деления и остаток от деления использовать нельзя.</p>",
        "time": 5,
        "title": "Четное число или нечетное?"
    },
    {
        "ID": 135,
        "answers": [
            {
                "content": "<p><strong>Простое решение, но медленно работает, O(N):</strong></p><p>Делаем inorder traverse, собираем сортированный список, достаем Kй элемент</p><p><br></p><p><strong>Более сложное решение, но быстро работает, O(H+K):</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">kthSmallest</span><span class=\"hljs-params\">(TreeNode root, <span class=\"hljs-type\">int</span> k)</span> {\n    Stack&lt;TreeNode&gt; stack = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Stack</span>&lt;&gt;();\n\n    <span class=\"hljs-comment\">// go down to the min element</span>\n    ﻿<span class=\"hljs-keyword\">while</span> (root != <span class=\"hljs-literal\">null</span>) {\n        stack.push(root);\n        root = root.left;\n    }\n\n    <span class=\"hljs-keyword\">while</span> (k != <span class=\"hljs-number\">0</span>) { <span class=\"hljs-comment\">// looking for Kth element</span>\n        ﻿<span class=\"hljs-type\">TreeNode</span> <span class=\"hljs-variable\">node</span> <span class=\"hljs-operator\">=</span> stack.pop();\n\n        k--;\n\n        <span class=\"hljs-keyword\">if</span> (k == <span class=\"hljs-number\">0</span>) { <span class=\"hljs-comment\">// if we found Kth</span>\n            ﻿<span class=\"hljs-keyword\">return</span> node.val;\n        }\n\n        <span class=\"hljs-comment\">// we should process right subtree, because it contains elements</span>\n        <span class=\"hljs-comment\">// that are lower than next elements in stack </span>\n       ﻿ <span class=\"hljs-type\">TreeNode</span> <span class=\"hljs-variable\">right</span> <span class=\"hljs-operator\">=</span> node.right;\n        <span class=\"hljs-keyword\">while</span> (right != <span class=\"hljs-literal\">null</span>) {\n            stack.push(right);\n            <span class=\"hljs-comment\">// and here we again start from left subtree, cause it contains min elements</span>\n            right = right.left;\n        }\n    }\n\n    <span class=\"hljs-comment\">// in case K is higher than size of the tree</span>\n    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n}\n\n</pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> Node:\n    def __init__(<span class=\"hljs-keyword\">self</span>, val: <span class=\"hljs-type\">int</span>, left: Node, right: Node) -&gt; None:\n        <span class=\"hljs-keyword\">self</span>.val = val\n        <span class=\"hljs-keyword\">self</span>.left = left\n        <span class=\"hljs-keyword\">self</span>.right = right\n\n<span class=\"hljs-keyword\">class</span> Solution:\n    def kth_smallest(<span class=\"hljs-keyword\">self</span>, root: Node, k: <span class=\"hljs-type\">int</span>):\n        stack = []\n        \n        <span class=\"hljs-keyword\">while</span> True:\n            <span class=\"hljs-keyword\">while</span> root:\n                stack.append(root)\n                root = root.left\n                \n            root = stack.pop()\n            k -= <span class=\"hljs-number\">1</span>\n            \n            <span class=\"hljs-keyword\">if</span> not k:\n                <span class=\"hljs-keyword\">return</span> root.val\n            \n            root = root.right\n\n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 80,
                "title": "Деревья и графы"
            },
            {
                "ID": 61,
                "title": "Структуры данных"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:40:26Z",
        "interviewCount": 17,
        "question": "<p><u>Сложность: </u><strong><u>MEDIUM</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Дана ссылка на&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">root</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;binary search tree. </span></p><p><span style=\"color: rgb(52, 73, 94);\">Необходимо найти K-й минимальный элемент дерева.</span></p><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Пример:</strong></p><p>Input: n=3</p><p>Output: 17</p><p><img src=\"https://mmedia.ozone.ru/s3/femida/photo/a6dc3b6fcdc96a387660c8891327613e3394f24559db38a3e5a45c5c20a51912_1685472761.png\"></p>",
        "time": 30,
        "title": "K-th smallest element in a BST"
    },
    {
        "ID": 78,
        "answers": [
            {
                "content": "<p>За O(N) можно решить просто перемножив число само на себя в цикле, это неинтересно.</p><p><br></p><p>Решение за O(logN) - рекурсивно решаем для квадрата числа, возведенного в степень n/2. </p><p>Если степень нечетная - выносим один множитель наружу.</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title\">pow</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> x, <span class=\"hljs-type\">int</span> n)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span>)\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n        \n        <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">0</span>) {\n            n = -n;\n            x = <span class=\"hljs-number\">1</span> / x;\n        }\n        \n        <span class=\"hljs-keyword\">return</span> (n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>) \n                ? <span class=\"hljs-built_in\">pow</span>(x*x, n/<span class=\"hljs-number\">2</span>) \n                : x * <span class=\"hljs-built_in\">pow</span>(x*x, n/<span class=\"hljs-number\">2</span>);\n    }\n}\n\n</pre><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def <span class=\"hljs-title function_ invoke__\">pow</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-attr\">n</span>: <span class=\"hljs-keyword\">int</span>) -&gt; <span class=\"hljs-keyword\">float</span>:\n    <span class=\"hljs-keyword\">if</span> not n:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">if</span> n &lt; <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> / <span class=\"hljs-title function_ invoke__\">pow</span>(x, -n)\n    <span class=\"hljs-keyword\">if</span> n % <span class=\"hljs-number\">2</span>:\n        <span class=\"hljs-keyword\">return</span> x * <span class=\"hljs-title function_ invoke__\">pow</span>(x, n - <span class=\"hljs-number\">1</span>)\n    \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">pow</span>(x * x, n / <span class=\"hljs-number\">2</span>)\n\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 66,
                "title": "Математика"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T18:48:07Z",
        "interviewCount": 17,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Написать функцию возведения числа в степень</span></p><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">x</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-number\">2</span><span class=\"hljs-string\">,</span> <span class=\"hljs-string\">n</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-number\">8</span>\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-number\">256</span>\n\n</pre>",
        "time": 30,
        "title": "Math.pow"
    },
    {
        "ID": 117,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Divide and conquer. </span></p><p><span style=\"color: rgb(52, 73, 94);\">Делим пополам, повторяем рекурсивно, затем merge sort.</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\n\n    <span class=\"hljs-keyword\">public</span> ListNode <span class=\"hljs-title function_\">sortList</span><span class=\"hljs-params\">(ListNode head)</span> {\n        <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">null</span> || head.next == <span class=\"hljs-literal\">null</span>)\n            <span class=\"hljs-keyword\">return</span> head;\n\n        <span class=\"hljs-comment\">// 1. находим середину списка с помощью fast/slow метода </span>\n        ﻿<span class=\"hljs-type\">ListNode</span> <span class=\"hljs-variable\">prev</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>, slow = head, fast = head;\n\n        <span class=\"hljs-keyword\">while</span> (fast != <span class=\"hljs-literal\">null</span> &amp;&amp; fast.next != <span class=\"hljs-literal\">null</span>) {\n            prev = slow;\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n\n        prev.next = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// разделяем список посередине</span>\n\n        <span class=\"hljs-comment\">// 2. сортируем каждую половину </span>\n        ﻿<span class=\"hljs-type\">ListNode</span> <span class=\"hljs-variable\">l1</span> <span class=\"hljs-operator\">=</span> sortList(head);\n        <span class=\"hljs-type\">ListNode</span> <span class=\"hljs-variable\">l2</span> <span class=\"hljs-operator\">=</span> sortList(slow);\n\n        <span class=\"hljs-comment\">// 3. выполняем merge sort   </span>\n        ﻿<span class=\"hljs-keyword\">return</span> merge(l1, l2);\n    }\n\n    ListNode <span class=\"hljs-title function_\">merge</span><span class=\"hljs-params\">(ListNode l1, ListNode l2)</span> {\n        <span class=\"hljs-type\">ListNode</span> <span class=\"hljs-variable\">l</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ListNode</span>(<span class=\"hljs-number\">0</span>), p = l;\n\n        <span class=\"hljs-keyword\">while</span> (l1 != <span class=\"hljs-literal\">null</span> &amp;&amp; l2 != <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">if</span> (l1.val &lt; l2.val) {\n                p.next = l1;\n                l1 = l1.next;\n            } <span class=\"hljs-keyword\">else</span> {\n                p.next = l2;\n                l2 = l2.next;\n            }\n            p = p.next;\n        }\n\n        <span class=\"hljs-keyword\">if</span> (l1 != <span class=\"hljs-literal\">null</span>) p.next = l1;\n        <span class=\"hljs-keyword\">if</span> (l2 != <span class=\"hljs-literal\">null</span>) p.next = l2;\n\n        <span class=\"hljs-keyword\">return</span> l.next;\n    }\n}\n</pre><p><br></p><p><br></p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> Node:\n    def __init__(<span class=\"hljs-keyword\">self</span>, val: <span class=\"hljs-type\">int</span>, next: Node) -&gt; None:\n        <span class=\"hljs-keyword\">self</span>.val = val\n        <span class=\"hljs-keyword\">self</span>.next = next\n\n<span class=\"hljs-keyword\">class</span> Solution:\n\n    def sort_list(<span class=\"hljs-keyword\">self</span>, head: Node) -&gt; Node:\n        <span class=\"hljs-keyword\">if</span> not head or not head.next:\n            <span class=\"hljs-keyword\">return</span> head\n\n        slow, fast = head, head.next\n        <span class=\"hljs-keyword\">while</span> fast and fast.next:\n            fast = fast.next.next\n            slow = slow.next\n\n        second_half = slow.next\n        slow.next = None  <span class=\"hljs-meta\"># cut list in half</span>\n\n        l, r = <span class=\"hljs-keyword\">self</span>.sort_list(head), <span class=\"hljs-keyword\">self</span>.sort_list(second_half)\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.merge(l, r)\n\n    def merge(<span class=\"hljs-keyword\">self</span>, l, r):\n        <span class=\"hljs-keyword\">if</span> not l or not r:\n            <span class=\"hljs-keyword\">return</span> l or r\n\n        <span class=\"hljs-keyword\">if</span> l.val &gt; r.val:\n            l, r = r, l\n\n        head = prev = l\n        l = l.next\n\n        <span class=\"hljs-keyword\">while</span> l and r:\n            <span class=\"hljs-keyword\">if</span> l.val &lt; r.val:\n                prev.next = l\n                l = l.next\n            <span class=\"hljs-keyword\">else</span>:\n                prev.next = r\n                r = r.next\n            prev = prev.next\n\n        prev.next = l or r\n\n        <span class=\"hljs-keyword\">return</span> head\n\n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 62,
                "title": "Сортировки"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:17:03Z",
        "interviewCount": 16,
        "question": "<p><u>Сложность: </u><strong><u>MEDIUM</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Дан односвязный список и ссылка на его&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">head</code><span style=\"color: rgb(52, 73, 94);\">. </span></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Необходимо отсортировать список.</span></p>",
        "time": 45,
        "title": "Sort linked list"
    },
    {
        "ID": 70,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Для каждого из 365 дней рассчитываем стоимость всех путешествий к этому моменту. </span></p><p><span style=\"color: rgb(52, 73, 94);\">Анализируем то как покупка 1/7/30 дневного билета сэкономит деньги в будущем.</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">mincostTickets</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] travelDays, <span class=\"hljs-type\">int</span>[] costs)</span> {\n        <span class=\"hljs-type\">int</span>[] days = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-number\">366</span>];\n\n        Set&lt;Integer&gt; travelDaysSet = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;&gt;();\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> travelDay : travelDays) {\n            travelDaysSet.add(travelDay);\n        }\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">365</span>; i++) {\n            <span class=\"hljs-keyword\">if</span> (travelDaysSet.contains(i)) {\n                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">d1</span> <span class=\"hljs-operator\">=</span> days[Math.max(<span class=\"hljs-number\">0</span>, i-<span class=\"hljs-number\">1</span>)] + costs[<span class=\"hljs-number\">0</span>];\n                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">d2</span> <span class=\"hljs-operator\">=</span> days[Math.max(<span class=\"hljs-number\">0</span>, i-<span class=\"hljs-number\">7</span>)] + costs[<span class=\"hljs-number\">1</span>];\n                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">d3</span> <span class=\"hljs-operator\">=</span> days[Math.max(<span class=\"hljs-number\">0</span>, i-<span class=\"hljs-number\">30</span>)] + costs[<span class=\"hljs-number\">2</span>];\n\n                days[i] = Math.min(Math.min(d1,d2), d3);\n            } <span class=\"hljs-keyword\">else</span> {\n                days[i] = days[i-<span class=\"hljs-number\">1</span>];\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> days[<span class=\"hljs-number\">365</span>];\n    }\n}\n\n</pre><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\">def <span class=\"hljs-title\">min_cost_tickets</span>(<span class=\"hljs-params\">travel_days: List[<span class=\"hljs-built_in\">int</span>], costs: List[<span class=\"hljs-built_in\">int</span>]</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    days</span> = [<span class=\"hljs-number\">0</span>] * <span class=\"hljs-number\">366</span>\n\n    travel_days_set = <span class=\"hljs-keyword\">set</span>()\n    <span class=\"hljs-keyword\">for</span> travel_day <span class=\"hljs-keyword\">in</span> travel_days:\n        travel_days_set.append(travel_day)\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">366</span></span>):\n        <span class=\"hljs-keyword\">if</span> i <span class=\"hljs-keyword\">in</span> travel_days_set:\n            d1</span> = days[max(<span class=\"hljs-number\">0</span>, i - <span class=\"hljs-number\">1</span>)] + costs[<span class=\"hljs-number\">0</span>]\n            d2 = days[max(<span class=\"hljs-number\">0</span>, i - <span class=\"hljs-number\">7</span>)] + costs[<span class=\"hljs-number\">1</span>]\n            d3 = days[max(<span class=\"hljs-number\">0</span>, i - <span class=\"hljs-number\">30</span>)] + costs[<span class=\"hljs-number\">2</span>]\n            days[i] = min(d1, d2, d3)\n        <span class=\"hljs-keyword\">else</span>:\n            days[i] = days[i - <span class=\"hljs-number\">1</span>]\n\n    <span class=\"hljs-keyword\">return</span> days[<span class=\"hljs-number\">365</span>]\n\n</pre>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 65,
                "title": "Динамическое программирование"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T18:44:08Z",
        "interviewCount": 16,
        "question": "<p><u>Сложность: </u><strong><u>MEDIUM++</u></strong></p><p><br></p><p>Вы хотите распланировать свои поездки на общественном транспорте на год вперёд.</p><p><br></p><p>Дни, в которые придётся воспользоваться транспортом, задаются в виде массива&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">days</code>, каждый элемент которого - числа от&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">1</code>&nbsp;до&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">365</code>.</p><p><br></p><p>Билеты продаются в трёх разных форматах</p><ul><li>на 1 день, стоимость&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">prices[0]</code></li><li>на 7 дней, стоимость&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">prices[1]</code></li><li>на 30 дней, стоимость&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">prices[2]</code></li></ul><p>Рассчитайте минимальную стоимость покупки билетов, с помощью которых можно пользоваться транспортом в заданные дни.</p><p><br></p><p><strong>Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">days</span> <span class=\"hljs-string\">=</span> [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">20</span>]<span class=\"hljs-string\">,</span> <span class=\"hljs-string\">prices</span> <span class=\"hljs-string\">=</span> [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">15</span>]\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-number\">11</span>\n<span class=\"hljs-attr\">Explanation:</span>\n<span class=\"hljs-string\">на</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">день,</span> <span class=\"hljs-string\">купить</span> <span class=\"hljs-number\">1</span><span class=\"hljs-string\">-дневный</span> <span class=\"hljs-string\">билет</span> <span class=\"hljs-string\">за</span> <span class=\"hljs-string\">$2</span>\n<span class=\"hljs-string\">на</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-string\">день,</span> <span class=\"hljs-string\">купить</span> <span class=\"hljs-number\">7</span><span class=\"hljs-string\">-дневный</span> <span class=\"hljs-string\">билет</span> <span class=\"hljs-string\">за</span> <span class=\"hljs-string\">$7</span> <span class=\"hljs-string\">на</span> <span class=\"hljs-string\">дни</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-string\">...</span> <span class=\"hljs-number\">10</span>\n<span class=\"hljs-string\">на</span> <span class=\"hljs-number\">20</span> <span class=\"hljs-string\">день,</span> <span class=\"hljs-string\">купить</span> <span class=\"hljs-number\">1</span><span class=\"hljs-string\">-дневный</span> <span class=\"hljs-string\">билет</span> <span class=\"hljs-string\">за</span> <span class=\"hljs-string\">$2</span>\n\n<span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">days</span> <span class=\"hljs-string\">=</span> [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>]<span class=\"hljs-string\">,</span> <span class=\"hljs-string\">prices</span> <span class=\"hljs-string\">=</span> [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">15</span>]\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-number\">17</span>\n<span class=\"hljs-attr\">Explanation:</span>\n<span class=\"hljs-string\">на</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">день,</span> <span class=\"hljs-string\">купить</span> <span class=\"hljs-number\">30</span><span class=\"hljs-string\">-дневный</span> <span class=\"hljs-string\">билет</span> <span class=\"hljs-string\">за</span> <span class=\"hljs-string\">$15</span> <span class=\"hljs-string\">на</span> <span class=\"hljs-string\">дни</span> <span class=\"hljs-number\">1</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">2</span><span class=\"hljs-string\">,</span> <span class=\"hljs-string\">...</span> <span class=\"hljs-number\">30</span><span class=\"hljs-string\">.</span>\n<span class=\"hljs-string\">на</span> <span class=\"hljs-number\">31</span> <span class=\"hljs-string\">день,</span> <span class=\"hljs-string\">купить</span> <span class=\"hljs-number\">1</span><span class=\"hljs-string\">-дневный</span> <span class=\"hljs-string\">билет</span> <span class=\"hljs-string\">за</span> <span class=\"hljs-string\">$2</span> <span class=\"hljs-string\">на</span> <span class=\"hljs-string\">день</span> <span class=\"hljs-number\">31</span>\n\n</pre>",
        "time": 45,
        "title": "Minimum cost for tickets"
    },
    {
        "ID": 114,
        "answers": [
            {
                "content": "<p>Есть несколько опций:</p><ul><li>отсортировать всё, выбрать первые K. Просто и скучно. Сложность <strong>N logN</strong></li><li>создать <strong>PriorityQueue</strong> размером <strong>K</strong>. Хорошо. Сложность <strong>N logK</strong>. На небольших K сходится к N.</li><li>QuickSelect / бисекция. Если кандидат это пишет, перед вами эксперт LeetCode.</li></ul><p><br></p><p>Ниже решение с PriorityQueue</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\n\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Point</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Comparable</span>&lt;Point&gt; {\n        <span class=\"hljs-type\">int</span> x;\n        <span class=\"hljs-type\">int</span> y;\n        <span class=\"hljs-type\">double</span> dist;\n\n        Point(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y) {\n            <span class=\"hljs-built_in\">this</span>.x = x;\n            <span class=\"hljs-built_in\">this</span>.y = y;\n            <span class=\"hljs-built_in\">this</span>.dist = Math.sqrt(x * x + y * y);\n        }\n\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compareTo</span><span class=\"hljs-params\">(Point other)</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.dist &lt; other.dist ? -<span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">1</span>;\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span>[][] kClosest(<span class=\"hljs-type\">int</span>[][] points, <span class=\"hljs-type\">int</span> K) {\n        PriorityQueue&lt;Point&gt; pq = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PriorityQueue</span>&lt;&gt;();\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span>[] p : points) {\n            pq.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Point</span>(p[<span class=\"hljs-number\">0</span>], p[<span class=\"hljs-number\">1</span>]));\n        }\n\n        <span class=\"hljs-type\">int</span>[][] r = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[K][<span class=\"hljs-number\">2</span>];\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; K; i++) {\n            <span class=\"hljs-type\">Point</span> <span class=\"hljs-variable\">head</span> <span class=\"hljs-operator\">=</span> pq.poll();\n            r[i][<span class=\"hljs-number\">0</span>] = head.x;\n            r[i][<span class=\"hljs-number\">1</span>] = head.y;\n        }\n        <span class=\"hljs-keyword\">return</span> r;\n    }\n}\n\n</pre><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">import heapq\n\ndef <span class=\"hljs-title function_ invoke__\">k_closest</span>(<span class=\"hljs-attr\">points</span>: List[List[<span class=\"hljs-keyword\">int</span>]], <span class=\"hljs-attr\">k</span>: <span class=\"hljs-keyword\">int</span>) -&gt; List[List[<span class=\"hljs-keyword\">int</span>]]:\n    <span class=\"hljs-keyword\">return</span> heapq.<span class=\"hljs-title function_ invoke__\">nsmallest</span>(k, points, lambda <span class=\"hljs-attr\">p</span>: p[<span class=\"hljs-number\">0</span>] * p[<span class=\"hljs-number\">0</span>] + p[<span class=\"hljs-number\">1</span>] * p[<span class=\"hljs-number\">1</span>])\n\n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 62,
                "title": "Сортировки"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:16:13Z",
        "interviewCount": 15,
        "question": "<p><u>Сложность: </u><strong><u>MEDIUM</u></strong></p><p><br></p><p>Дан массив&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">points</code>, где каждый элемент представляет точку на карте&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">points[i] = [Xi, Yi]</code></p><p>Необходимо вернуть&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">k</code>&nbsp;точек, которые находятся ближе всего к координате&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">[0, 0]</code>.</p><p>В качестве близости используем евклидово расстояние (корень из&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">(x1-x2)^2 + (y1-y2)^2</code>).</p><p><br></p><p><strong>Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">points</span> <span class=\"hljs-string\">=</span> [[<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">-1</span>], [<span class=\"hljs-number\">-2</span>,<span class=\"hljs-number\">4</span>]]<span class=\"hljs-string\">,</span> <span class=\"hljs-string\">k</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-attr\">Output:</span> [[<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">-2</span>,<span class=\"hljs-number\">4</span>]]\n\n</pre>",
        "time": 45,
        "title": "The nearest points to origin"
    },
    {
        "ID": 103,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Применяем backtracking: для каждой позиции в массиве - ставим на неё одно из чисел, продолжаем вглубь для последующих позиций и всех чисел кроме выбранного.</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br/><br/>    <span class=\"hljs-keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"hljs-title function_\">permute</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] nums)</span> {<br/>        List&lt;List&lt;Integer&gt;&gt; answer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br/>        backtrack(answer, nums, <span class=\"hljs-number\">0</span>);<br/>        <span class=\"hljs-keyword\">return</span> answer;<br/>    }<br/>    <br/>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">backtrack</span><span class=\"hljs-params\">(List&lt;List&lt;Integer&gt;&gt; answer, <span class=\"hljs-type\">int</span>[] nums, <span class=\"hljs-type\">int</span> start)</span> {<br/>        <span class=\"hljs-keyword\">if</span> (start == nums.length) {<br/>            List&lt;Integer&gt; permutations = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br/>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> num : nums)<br/>                permutations.add(num);<br/>            <br/>            answer.add(permutations);<br/>        } <span class=\"hljs-keyword\">else</span> {<br/>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> start; i &lt; nums.length; i++) {<br/>                swap(i, start, nums);<br/>                backtrack(answer, nums, start + <span class=\"hljs-number\">1</span>);<br/>                swap(i, start, nums);<br/>            }<br/>        }<br/>    }<br/>    <br/>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j, <span class=\"hljs-type\">int</span>[] arr)</span> {<br/>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">tmp</span> <span class=\"hljs-operator\">=</span> arr[i];<br/>        arr[i] = arr[j];<br/>        arr[j] = tmp;<br/>    }<br/>}<br/><br/></pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">class Solution:<br/>    def permute(self, nums: List[int]) -&gt; List[List[int]]:<br/>        answer = []<br/>        self.backtrack(answer, nums, 0)<br/>        return answer<br/><br/>    def backtrack(self, answer: List[List[int]], nums: List[int], start: int) -&gt; None:<br/>        if start == len(nums):<br/>            answer.append(nums[:])<br/>        else:<br/>            for i in range(start, len(nums)):<br/>                self.swap(i, start, nums)<br/>                self.backtrack(answer, nums, start + 1)<br/>                self.swap(i, start, nums)<br/>            <br/>    def swap(self, i: int, j: int, arr: List[int]) -&gt; None:<br/>        tmp = arr[i]<br/>        arr[i] = arr[j]<br/>        arr[j] = tmp<br/><br/></pre><p><br></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 69,
                "title": "Рекурсия и back-tracking"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:05:56Z",
        "interviewCount": 13,
        "question": "<p><u>Сложность: </u><strong><u>MEDIUM</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Для данного массива чисел, содержащего только уникальные значения, сгенерировать все возможные перестановки.</span></p><p><br></p><p><strong>Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">Input: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\nOutput: [\n    [<span class=\"hljs-meta\">1,2,3</span>], [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>],\n    [<span class=\"hljs-meta\">2,1,3</span>], [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>],\n    [<span class=\"hljs-meta\">3,1,2</span>], [<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>]\n]\n\n</pre>",
        "time": 45,
        "title": "Permutations"
    },
    {
        "ID": 69,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">На ступень&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">X</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;можно попасть с двух ступенек&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">X-1</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;и&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">X-2</code><span style=\"color: rgb(52, 73, 94);\">. </span></p><p><span style=\"color: rgb(52, 73, 94);\">Соответсвенно кол-во способ попасть на&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">X</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;равно сумме способов попасть на&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">X-1</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;и&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">X-2</code><span style=\"color: rgb(52, 73, 94);\">.</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">climbStairs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> { <span class=\"hljs-comment\">// O(N) memory</span>\n        <span class=\"hljs-keyword\">if</span> (n &lt;= <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> n;\n\n        <span class=\"hljs-type\">int</span>[] stairs = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n];\n\n        stairs[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;\n        stairs[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">2</span>;\n        stairs[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">3</span>;\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">3</span>; i &lt; n; i++) {\n            stairs[i] = stairs[i - <span class=\"hljs-number\">1</span>] + stairs[i - <span class=\"hljs-number\">2</span>];\n        }\n\n        <span class=\"hljs-keyword\">return</span> stairs[n - <span class=\"hljs-number\">1</span>];\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">climbStairs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> { <span class=\"hljs-comment\">// O(1) memory</span>\n        <span class=\"hljs-keyword\">if</span> (n &lt;= <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> n;\n\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">first</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">second</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">3</span>; i &lt;= n; i++) {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">third</span> <span class=\"hljs-operator\">=</span> first + second;\n            first = second;\n            second = third;\n        }\n\n        <span class=\"hljs-keyword\">return</span> second;\n    }\n}\n\n</pre><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\">def <span class=\"hljs-title\">climb_stairs</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>: # <span class=\"hljs-title\">O</span>(<span class=\"hljs-params\">N</span>) memory solution\n    <span class=\"hljs-keyword\">if</span> n</span> == <span class=\"hljs-number\">1</span>: \n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n    \n    dp = [<span class=\"hljs-number\">0</span>] * (n + <span class=\"hljs-number\">1</span>)\n    dp[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>\n    dp[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">2</span>\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">3</span>, n + <span class=\"hljs-number\">1</span></span>):\n        dp[i]</span> = dp[i - <span class=\"hljs-number\">1</span>] + dp[i - <span class=\"hljs-number\">2</span>]\n        \n    <span class=\"hljs-keyword\">return</span> dp[<span class=\"hljs-number\">-1</span>]\n\n<span class=\"hljs-function\">def <span class=\"hljs-title\">climb_stairs</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>: # <span class=\"hljs-title\">O</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span></span>) memory solution\n    a</span> = b = <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-function\"><span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\">n</span>):\n        a, b</span> = b, a + b\n    <span class=\"hljs-keyword\">return</span> a\n\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 65,
                "title": "Динамическое программирование"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T18:42:32Z",
        "interviewCount": 12,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p>Вы поднимаетесь по лестнице. За раз можно перешагнуть на следующую ступень, либо через одну.</p><p>Сколько существует различных способов подняться по лестнице длины&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">n</code>?</p><p><br></p><p><strong>Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">n</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-attr\">Explanation:</span> <span class=\"hljs-string\">Три</span> <span class=\"hljs-string\">уникальных</span> <span class=\"hljs-string\">способа</span> <span class=\"hljs-string\">пройти</span> <span class=\"hljs-string\">лестницу</span> <span class=\"hljs-string\">длины</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">1</span><span class=\"hljs-string\">.</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">step</span> <span class=\"hljs-string\">+</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">step</span> <span class=\"hljs-string\">+</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">step</span>\n<span class=\"hljs-number\">2</span><span class=\"hljs-string\">.</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">step</span> <span class=\"hljs-string\">+</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-string\">steps</span>\n<span class=\"hljs-number\">3</span><span class=\"hljs-string\">.</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-string\">steps</span> <span class=\"hljs-string\">+</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">step</span>\n\n</pre>",
        "time": 30,
        "title": "Climbing stairs"
    },
    {
        "ID": 134,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Divide and conquer. </span></p><p><span style=\"color: rgb(52, 73, 94);\">Середина - это текущий узел. </span></p><p><span style=\"color: rgb(52, 73, 94);\">Из левого и правого под-массива строятся под-деревья.</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">public</span> TreeNode <span class=\"hljs-title function_\">sortedArrayToBST</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] nums)</span> {\n    <span class=\"hljs-keyword\">return</span> toTree(nums, <span class=\"hljs-number\">0</span>, nums.length - <span class=\"hljs-number\">1</span>);\n}\n\n<span class=\"hljs-keyword\">private</span> TreeNode <span class=\"hljs-title function_\">toTree</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] nums, <span class=\"hljs-type\">int</span> left, <span class=\"hljs-type\">int</span> right)</span> {\n    <span class=\"hljs-keyword\">if</span> (left &gt; right) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n    }\n\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">mid</span> <span class=\"hljs-operator\">=</span> left + (right - l) / <span class=\"hljs-number\">2</span>;\n        \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeNode</span>(\n        nums[mid],\n        toTree(nums, left, mid - <span class=\"hljs-number\">1</span>),\n        toTree(nums, mid + <span class=\"hljs-number\">1</span>, right)\n    );\n}\n\n</pre><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> Node:\n    def __init__(<span class=\"hljs-keyword\">self</span>, val: <span class=\"hljs-type\">int</span>, left: Node, right: Node) -&gt; None:\n        <span class=\"hljs-keyword\">self</span>.val = val\n        <span class=\"hljs-keyword\">self</span>.left = left\n        <span class=\"hljs-keyword\">self</span>.right = right\n        \n<span class=\"hljs-keyword\">class</span> Solution:        \n    def sorted_array_to_BST(<span class=\"hljs-keyword\">self</span>, nums: List[<span class=\"hljs-type\">int</span>]) -&gt; Node:\n        <span class=\"hljs-keyword\">if</span> not nums:\n            <span class=\"hljs-keyword\">return</span> None\n    \n        mid = len(nums) <span class=\"hljs-comment\">// 2</span>\n    \n        root = Node(nums[mid])\n        root.left = <span class=\"hljs-keyword\">self</span>.sorted_array_to_BST(nums[:mid])\n        root.right = <span class=\"hljs-keyword\">self</span>.sorted_array_to_BST(nums[mid+<span class=\"hljs-number\">1</span>:])\n    \n        <span class=\"hljs-keyword\">return</span> root\n\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 80,
                "title": "Деревья и графы"
            },
            {
                "ID": 61,
                "title": "Структуры данных"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:39:32Z",
        "interviewCount": 12,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Дан отсортированный массив чисел. </span></p><p><span style=\"color: rgb(52, 73, 94);\">Необходимо построить сбалансированное binary search tree.</span></p><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-title class_\">Input</span>: [-<span class=\"hljs-number\">10</span>, -<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>]\n<span class=\"hljs-title class_\">Output</span>:\n~~~~~~~~~~~~~~~~~~~~~[<span class=\"hljs-number\">0</span>]~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~[-<span class=\"hljs-number\">3</span>]~~~~~~~~~~~~~~~~~~~~~~[<span class=\"hljs-number\">5</span>]~~~~~~~~\n~~~[-<span class=\"hljs-number\">10</span>]~~~~~~[<span class=\"hljs-literal\">null</span>]~~~~~~~~~~[<span class=\"hljs-literal\">null</span>]~~~~~[<span class=\"hljs-number\">9</span>]~~   \n\n</pre>",
        "time": 30,
        "title": "Convert sorted array to BST"
    },
    {
        "ID": 133,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">boolean</span> <span class=\"hljs-title function_\">isSymmetric</span>(<span class=\"hljs-params\">TreeNode root</span>) {\n    <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">same</span>(root.<span class=\"hljs-property\">left</span>, root.<span class=\"hljs-property\">right</span>);\n}\n\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">boolean</span> <span class=\"hljs-title function_\">same</span>(<span class=\"hljs-params\">TreeNode l, TreeNode r</span>) {\n    <span class=\"hljs-keyword\">if</span> (l == <span class=\"hljs-literal\">null</span> &amp;&amp; r == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">if</span> (l == <span class=\"hljs-literal\">null</span> || r == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    \n    <span class=\"hljs-keyword\">if</span> (l.<span class=\"hljs-property\">val</span> != r.<span class=\"hljs-property\">val</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">same</span>(l.<span class=\"hljs-property\">left</span>, r.<span class=\"hljs-property\">right</span>) &amp;&amp; <span class=\"hljs-title function_\">same</span>(l.<span class=\"hljs-property\">right</span>, r.<span class=\"hljs-property\">left</span>);\n}\n</pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> Node:\n    def __init__(<span class=\"hljs-keyword\">self</span>, val: <span class=\"hljs-type\">int</span>, left: Node, right: Node) -&gt; None:\n        <span class=\"hljs-keyword\">self</span>.val = val\n        <span class=\"hljs-keyword\">self</span>.left = left\n        <span class=\"hljs-keyword\">self</span>.right = right\n        \n<span class=\"hljs-keyword\">class</span> Solution:        \n    def is_symmetric(<span class=\"hljs-keyword\">self</span>, root: Node) -&gt; <span class=\"hljs-type\">bool</span>:\n        def is_symm(l: Node, r: Node) -&gt; <span class=\"hljs-type\">bool</span>:\n            <span class=\"hljs-keyword\">if</span> l and r and l.val == r.val: \n                <span class=\"hljs-keyword\">return</span> is_symm(l.left, r.right) and is_symm(l.right, r.left)\n            <span class=\"hljs-keyword\">return</span> l == r\n        <span class=\"hljs-keyword\">return</span> not root or is_symm(root.left, root.right)\n\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 80,
                "title": "Деревья и графы"
            },
            {
                "ID": 61,
                "title": "Структуры данных"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:37:29Z",
        "interviewCount": 12,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Дана ссылка на&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">root</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;бинарного дерева. </span></p><p><span style=\"color: rgb(52, 73, 94);\">Необходимо проверить, являются ли узлы дерева симметричными относительно центра</span></p><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Пример симметричного дерева:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">~~~~~~~~~~~~~~~~~~~~~1~~~~~~~~~~~~~~~~~~\n~~~~~~~~~2~~~~~~~~~~~~~~~~~~~~~~~2~~~~~~\n~~~~~3~~~~~~~4~~~~~~~~~~~~~~4~~~~~~~3~~~\n~~~~~~~~~~~~~~~~5~~~~~~~~5~~~~~~~~~~~~~~       \n\n</pre>",
        "time": 30,
        "title": "Symmetric tree"
    },
    {
        "ID": 132,
        "answers": [
            {
                "content": "<p><strong>Решение с рекурсией</strong></p><p>Недостаток рекурсивных решений в том, что глубина рекурсии ограничена размером программного стека.</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\n    int val;\n    <span class=\"hljs-title class_\">Node</span> left;\n    <span class=\"hljs-title class_\">Node</span> right;\n}\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; <span class=\"hljs-title function_\">inorderTraversal</span>(<span class=\"hljs-params\">TreeNode root</span>) {\n    <span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; result = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n    <span class=\"hljs-title function_\">dfs</span>(root, result);\n    <span class=\"hljs-keyword\">return</span> result;\n}\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-title class_\">List</span>&lt;<span class=\"hljs-title class_\">Integer</span>&gt; <span class=\"hljs-title function_\">dfs</span>(<span class=\"hljs-params\">Node node, List&lt;Integer&gt; result</span>) {\n    <span class=\"hljs-keyword\">if</span> (node != <span class=\"hljs-literal\">null</span>) {\n        <span class=\"hljs-title function_\">dfs</span>(node.<span class=\"hljs-property\">left</span>, result);\n        ret.<span class=\"hljs-title function_\">add</span>(node.<span class=\"hljs-property\">val</span>);\n        <span class=\"hljs-title function_\">dfs</span>(node.<span class=\"hljs-property\">right</span>, result);\n    }\n}\n\n</pre><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> Node:\n    def __init__(<span class=\"hljs-keyword\">self</span>, val: <span class=\"hljs-type\">int</span>, left: Node, right: Node) -&gt; None:\n        <span class=\"hljs-keyword\">self</span>.val = val\n        <span class=\"hljs-keyword\">self</span>.left = left\n        <span class=\"hljs-keyword\">self</span>.right = right\n\n<span class=\"hljs-keyword\">class</span> Solution:        \n    def inorder_traversal(<span class=\"hljs-keyword\">self</span>, root: Node) -&gt; List[<span class=\"hljs-type\">int</span>]:\n        result = []\n        <span class=\"hljs-keyword\">self</span>.dfs(root, result)\n        <span class=\"hljs-keyword\">return</span> result\n    \n    def dfs(<span class=\"hljs-keyword\">self</span>, root, result):\n        <span class=\"hljs-keyword\">if</span> root:\n            <span class=\"hljs-keyword\">self</span>.dfs(root.left, result)\n            result.append(root.val)\n            <span class=\"hljs-keyword\">self</span>.dfs(root.right, result)\n\n</pre><p><br></p><p><strong>Решение без рекурсии</strong></p><p>Общая идея в том, что для inorder обхода нужно спускаться до самого конца по левой ветке дерева, попутно добавляя узлы в стек. После завершения работы с элементом, переходим к следующему, который находится на вершине стека.</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\n    <span class=\"hljs-type\">int</span> val;\n    Node left;\n    Node right;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;Integer&gt; <span class=\"hljs-title\">traverse</span><span class=\"hljs-params\">(Node root)</span> </span>{\n    List&lt;Integer&gt; result = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n\n    Stack&lt;Node&gt; stack = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Stack</span>&lt;Node&gt;();\n    Node curr = root;\n\n    <span class=\"hljs-keyword\">while</span> (curr != null || stack.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">while</span> (curr != null) {\n            stack.<span class=\"hljs-built_in\">add</span>(curr);\n            curr = curr.left;\n        }\n        \n        curr = stack.<span class=\"hljs-built_in\">pop</span>();\n        result.<span class=\"hljs-built_in\">add</span>(curr.val);\n        curr = curr.right;\n    }\n\n    <span class=\"hljs-keyword\">return</span> list;\n}\n\n</pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> Node:\n    def __init__(<span class=\"hljs-keyword\">self</span>, val: <span class=\"hljs-type\">int</span>, left: Node, right: Node) -&gt; None:\n        <span class=\"hljs-keyword\">self</span>.val = val\n        <span class=\"hljs-keyword\">self</span>.left = left\n        <span class=\"hljs-keyword\">self</span>.right = right\n        \n<span class=\"hljs-keyword\">class</span> Solution:        \n    def inorder_traversal(<span class=\"hljs-keyword\">self</span>, root: Node) -&gt; List[<span class=\"hljs-type\">int</span>]:\n        result = []\n        stack = []\n    \n        <span class=\"hljs-keyword\">while</span> stack or root:\n            <span class=\"hljs-keyword\">if</span> root:\n                stack.append(root)\n                root = root.left\n            <span class=\"hljs-keyword\">else</span>:\n                tmp_node = stack.pop()\n                result.append(tmp_node.val)\n                root = tmp_node.right\n    \n        <span class=\"hljs-keyword\">return</span> result\n\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 80,
                "title": "Деревья и графы"
            },
            {
                "ID": 61,
                "title": "Структуры данных"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:36:30Z",
        "interviewCount": 11,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Дана ссылка на&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">root</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;бинарного дерева. Необходимо вывести элементы в inorder порядке&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">(left, curr, right)</code><span style=\"color: rgb(52, 73, 94);\">.</span></p><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-string\">~~~~~~~~~~~~~~~~~~1~~~~~~~~~~~~~~~~~~~~~~~~~~</span>\n<span class=\"hljs-string\">~~~~~~~~2~~~~~~~~~~~~~~~~~~3~~~~~~~~~~~~~~~~~</span>\n<span class=\"hljs-string\">~~~~4~~~~~~~6</span> <span class=\"hljs-string\">~~~~~~~~9~~~~~~~~~~10~~~~~~~~~~</span>\n<span class=\"hljs-string\">~5~~~~~~~~7~~~8~~~~~~~~~11~~~~~~~~~~~~~~~~~~~</span>\n\n<span class=\"hljs-attr\">Output:</span> [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">10</span>]\n</pre>",
        "time": 30,
        "title": "Inorder traversal of a binary tree"
    },
    {
        "ID": 142,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Queue</span><br/>{<br/>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> <span class=\"hljs-built_in\">char</span>[] _data;<br/>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> _head, _tail, _count;<br/><br/>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Queue</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> capacity</span>)</span><br/>    {<br/>        _data = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">char</span>[capacity];<br/>    }<br/><br/>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">Enq</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">char</span> item</span>)</span><br/>    {<br/>        <span class=\"hljs-keyword\">if</span> (_count &lt; _data.Length)<br/>        {<br/>            _count++;<br/>            _data[_tail] = item;<br/>            _tail = ++_tail % _data.Length;<br/>                <br/>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br/>        }<br/><br/>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br/>    }<br/><br/>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">Deq</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">out</span> <span class=\"hljs-built_in\">char</span> item</span>)</span><br/>    {<br/>        <span class=\"hljs-keyword\">if</span> (_count &gt; <span class=\"hljs-number\">0</span> )<br/>        {<br/>            _count--;<br/>            item = _data[_head];<br/>            _head = ++_head % _data.Length;<br/>                <br/>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br/>        }<br/><br/>        item = <span class=\"hljs-literal\">default</span>;<br/>            <br/>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br/>    }<br/>}<br/><br/></pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">class RingBuffer:<br/>    <br/>    def __init__(self, size: int) -&gt; None:<br/>        self.data = [0] * size<br/>        self.count = 0<br/>        self.head = 0<br/>        self.tail = 0<br/><br/>    def enq(self, num: int) -&gt; bool:<br/>        if self.count &lt; len(self.data):<br/>            self.count += 1<br/>            self.data[self.tail] = num<br/>            self.tail = (self.tail + 1) % len(self.data)<br/>            return True<br/>        else:<br/>            return False<br/><br/>    def deq(self) -&gt; int:<br/>        if self.count &gt; 0:<br/>            self.count -= 1<br/>            answer = self.data[self.head]<br/>            self.head = (self.head + 1) % len(self.data)<br/>            return answer<br/>        else:<br/>            return None<br/><br/></pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 82,
                "title": "Очередь"
            },
            {
                "ID": 61,
                "title": "Структуры данных"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:47:55Z",
        "interviewCount": 9,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Необходимо написать кольцевой буфер. </span></p><p><span style=\"color: rgb(52, 73, 94);\">КБ это очередь (FIFO) на массиве фиксированного размера. Фактически, мы реализовываем структуру с 2мя методами:</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">--- <span class=\"hljs-function\">Java\n<span class=\"hljs-keyword\">public</span> boolean <span class=\"hljs-title\">enq</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">char</span> ch</span>)\n<span class=\"hljs-keyword\">public</span> Optional&lt;Char&gt; <span class=\"hljs-title\">deq</span>()\n\n--- C#\n<span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">Enq</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">char</span> item</span>)\n<span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">Deq</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">out</span> <span class=\"hljs-built_in\">char</span> item</span>)\n\n</span></pre><p><br></p><p><code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">Enq</code>&nbsp;возвращает&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">true</code>&nbsp;если удалось добавить элемент в очередь (ещё осталось место). В противном случае&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">false</code>.</p><p><br></p><p><code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">Deq</code>&nbsp;возвращает&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">true</code>&nbsp;если очередь была не пустой и в out-параметре вернется значение первого в очереди элемента.&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">false</code>&nbsp;если очередь пуста и возвращать нечего.</p>",
        "time": 30,
        "title": "Ring buffer"
    },
    {
        "ID": 122,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {<br/>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">titleToNumber</span><span class=\"hljs-params\">(String s)</span> {<br/>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br/><br/>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">char</span> c : s.toCharArray()) {<br/>            result = <span class=\"hljs-number\">26</span> * result + (c - <span class=\"hljs-string\">'A'</span> + <span class=\"hljs-number\">1</span>);<br/>        }<br/><br/>        <span class=\"hljs-keyword\">return</span> result;<br/>    }<br/>}<br/><br/></pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def title_to_number(title: str) -&gt; int:<br/>    result = 0<br/>    for ch in title:<br/>        result = 26 * result + (ord(ch) - ord('A') + 1)<br/>    return result<br/><br/></pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 64,
                "title": "Строки"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:20:46Z",
        "interviewCount": 9,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Дано название колонки в excel таблице. </span></p><p><span style=\"color: rgb(52, 73, 94);\">Нужно вычислить её порядковый номер.</span></p><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">A</span>\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">AB</span>\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-number\">28</span>\n\n<span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">ZY</span>\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-number\">701</span>\n\n</pre>",
        "time": 30,
        "title": "Excel spreadsheet column number"
    },
    {
        "ID": 100,
        "answers": [
            {
                "content": "<p><strong style=\"color: rgb(52, 73, 94);\">Решение DFS</strong></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\n    \n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">countGroups</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[][] roads)</span> {\n        <span class=\"hljs-type\">int</span>[] visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[roads.length];\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; roads.length; i++) {\n            <span class=\"hljs-keyword\">if</span> (visited[i] == <span class=\"hljs-number\">0</span>) {\n                dfs(roads, visited, i);\n                count++;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> count;\n    }\n    \n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[][] roads, <span class=\"hljs-type\">int</span>[] visited, <span class=\"hljs-type\">int</span> i)</span> {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; roads.length; j++) {\n            <span class=\"hljs-keyword\">if</span> (roads[i][j] == <span class=\"hljs-number\">1</span> &amp;&amp; visited[j] == <span class=\"hljs-number\">0</span>) {\n                visited[j] = <span class=\"hljs-number\">1</span>;\n                dfs(roads, visited, j);\n            }\n        }\n    }\n}\n\n</pre><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def <span class=\"hljs-title function_\">count_groups</span><span class=\"hljs-params\">(roads: List[List[<span class=\"hljs-type\">int</span>]])</span> -&gt; <span class=\"hljs-type\">int</span>:\n    <span class=\"hljs-keyword\">if</span> not roads:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\n    n = len(roads)\n    visited = [False] * <span class=\"hljs-type\">n</span>\n    <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>\n\n    def <span class=\"hljs-title function_\">dfs</span><span class=\"hljs-params\">(u)</span>:\n        <span class=\"hljs-keyword\">for</span> v in <span class=\"hljs-title function_\">range</span><span class=\"hljs-params\">(n)</span>:\n            <span class=\"hljs-keyword\">if</span> roads[u][v] == <span class=\"hljs-number\">1</span> and not visited[v]:\n                visited[v] = True\n                <span class=\"hljs-title function_\">dfs</span><span class=\"hljs-params\">(v)</span>\n\n    <span class=\"hljs-keyword\">for</span> idx in <span class=\"hljs-title function_\">range</span><span class=\"hljs-params\">(n)</span>:\n        <span class=\"hljs-keyword\">if</span> not visited[idx]:\n            count += <span class=\"hljs-number\">1</span>\n            visited[idx] == True\n            <span class=\"hljs-title function_\">dfs</span><span class=\"hljs-params\">(idx)</span>\n\n    <span class=\"hljs-keyword\">return</span> count\n\n</pre><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Решение Union-Find</strong></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findCircleNum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[][] M)</span> {\n        <span class=\"hljs-type\">int</span>[] uf = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[M.length];\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; M.length; i++) uf[i] = i;\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; M.length; i++)\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> i + <span class=\"hljs-number\">1</span>; j &lt; M[i].length; j++)\n                <span class=\"hljs-keyword\">if</span> (M[i][j] == <span class=\"hljs-number\">1</span>)\n                    union(uf, i, j);\n\n        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-type\">int</span>) IntStream.range(<span class=\"hljs-number\">0</span>, M.length).map(i -&gt; get(uf, i)).distinct().count();\n    }\n\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">union</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] uf, <span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">ga</span> <span class=\"hljs-operator\">=</span> get(uf, a);\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">gb</span> <span class=\"hljs-operator\">=</span> get(uf, b);\n\n        uf[ga] = uf[gb] = Math.min(ga, gb);\n    }\n\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] uf, <span class=\"hljs-type\">int</span> x)</span> {\n        <span class=\"hljs-keyword\">while</span> (uf[x] != x) {\n            x = uf[x];\n        }\n        <span class=\"hljs-keyword\">return</span> x;\n    }\n}\n\n</pre><p><br></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 63,
                "title": "Поиск"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T19:02:32Z",
        "interviewCount": 9,
        "question": "<p><u>Сложность: </u><strong><u>MEDIUM</u></strong></p><p><u>Тип: </u><strong><u>DFS / Union-Find</u></strong></p><p><br></p><p>Имеется&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">n</code>&nbsp;городов. Некоторые города соединены между собой дорогами, а некоторые нет. Связанность городов представлена в виде матрицы&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">roads</code>, элемент&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">roads[i][j]</code>&nbsp;означает, что между городами&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">i</code>&nbsp;и&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">j</code>&nbsp;есть дорога.</p><p><br></p><p>Группой назовём города, которые связаны между собой дорогами. Группы, соответственно, между собой никак не связаны. </p><p><br></p><p>Нужно посчитать кол-во обособленных групп городов.</p><p><br></p><p><strong>Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">Input:\n[\n  [<span class=\"hljs-meta\">1, 1, 0</span>],\n  [<span class=\"hljs-meta\">1, 1, 0</span>],\n  [<span class=\"hljs-meta\">0, 0, 1</span>]\n]\nOutput: <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-number\">1</span>й город связан со <span class=\"hljs-number\">2</span>м, а <span class=\"hljs-number\">3</span>й не связан ни с кем\n\n</pre>",
        "time": 45,
        "title": "Number of connected cities"
    },
    {
        "ID": 1691,
        "answers": [
            {
                "content": "<p>Для каждого узла - смотрим глубину левого и правого поддерева.</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\n\n    <span class=\"hljs-built_in\">int</span> <span class=\"hljs-built_in\">max</span>;\n\n    public <span class=\"hljs-built_in\">int</span> diameterOfBinaryTree(TreeNode root) {\n        maxDepth(root);\n\n        <span class=\"hljs-keyword\">return</span> Math.<span class=\"hljs-built_in\">max</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">max</span> - <span class=\"hljs-number\">1</span>);\n    }\n\n    <span class=\"hljs-built_in\">int</span> maxDepth(TreeNode root) {\n        <span class=\"hljs-keyword\">if</span> (root == null) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-built_in\">int</span> left = maxDepth(root.left);\n        <span class=\"hljs-built_in\">int</span> right = maxDepth(root.right);\n\n        <span class=\"hljs-built_in\">max</span> = Math.<span class=\"hljs-built_in\">max</span>(<span class=\"hljs-built_in\">max</span>, left + right + <span class=\"hljs-number\">1</span>);\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> + Math.<span class=\"hljs-built_in\">max</span>(left, right);\n    }\n}\n\n</pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">class Node:\n    def __init__(self, val: int, left: Node, right: Node) -&gt; None:\n        self.val = val\n        self.left = left\n        self.right = right\n        \nclass Solution:\n    def diameter_of_binary_tree(self, root: Node) -&gt; int:\n        self.ans = 0\n            \n        def max_depth(node: Node) -&gt; int:\n            if not node: return 0\n            l, r = max_depth(node.left), max_depth(node.right)\n            self.ans = max(self.ans, l + r)\n            return 1 + max(l, r)\n    \n        max_depth(root)\n        \n        return self.ans\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 80,
                "title": "Деревья и графы"
            },
            {
                "ID": 61,
                "title": "Структуры данных"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2023-01-15T23:00:10Z",
        "interviewCount": 8,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p>Дана ссылка на&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">root</code>&nbsp;бинарного дерева. Необходимо найти его диаметр.</p><p><br></p><p>Диаметр - это наибольшее расстояние между двумя узлами в дереве.</p><p>Диаметер может не проходить через корень дерева.</p><p><br></p><p><strong>Пример:</strong></p><p><br></p><p><img src=\"https://mmedia.ozone.ru/s3/femida/photo/445e10511e8bc7d6f97d0e6c37e493f9c3e4ed6373e06ea5bb8a2a8196589a59_1673823559.png\"></p>",
        "time": 30,
        "title": "Diameter of the binary tree"
    },
    {
        "ID": 94,
        "answers": [
            {
                "content": "<p><strong style=\"color: rgb(52, 73, 94);\">Решение методом binary search</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sqrt</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> {\n        <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n        \n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">left</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>, right = x;\n        \n        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">mid</span> <span class=\"hljs-operator\">=</span> left + (right - left) / <span class=\"hljs-number\">2</span>;\n            \n            <span class=\"hljs-keyword\">if</span> (mid &gt; x / mid) {\n                right = mid - <span class=\"hljs-number\">1</span>;\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (mid + <span class=\"hljs-number\">1</span> &gt; x / (mid + <span class=\"hljs-number\">1</span>)) {\n                <span class=\"hljs-keyword\">return</span> mid;\n            } <span class=\"hljs-keyword\">else</span> {\n                left = mid + <span class=\"hljs-number\">1</span>;\n            }\n        }\n    }\n}\n\n</pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"> <span class=\"hljs-function\">def <span class=\"hljs-title\">my_sqrt</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n     l, r</span> = <span class=\"hljs-number\">0</span>, x\n     <span class=\"hljs-keyword\">while</span> l &lt;= r:\n         mid = l + (r-l) <span class=\"hljs-comment\">// 2if mid * mid &lt;= x &lt; (mid+1) * (mid+1):</span>\n             <span class=\"hljs-keyword\">return</span> mid\n         elif x &lt; mid * mid:\n             r = mid - <span class=\"hljs-number\">1</span><span class=\"hljs-keyword\">else</span>:\n             l = mid + <span class=\"hljs-number\">1</span>\n\n</pre><p><br></p><p><strong style=\"color: rgb(52, 73, 94);\">Решение методом Ньютона</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sqrt</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> {\n        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> x;\n        <span class=\"hljs-keyword\">while</span> (r * r &gt; x)\n            r = (r + x / r) / <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-type\">int</span>) r;\n    }\n}\n\n</pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def <span class=\"hljs-title function_\">sqrt</span><span class=\"hljs-params\">(x: <span class=\"hljs-type\">int</span>)</span> -&gt; <span class=\"hljs-type\">int</span>:\n    r = x\n    <span class=\"hljs-keyword\">while</span> r * r &gt; x:\n        r = (r + x/r) / <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">return</span> r\n\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 63,
                "title": "Поиск"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T18:54:45Z",
        "interviewCount": 7,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><u>Тип: </u><strong><u>Binary Search</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Дано положительное целое число&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">int x</code><span style=\"color: rgb(52, 73, 94);\">. </span></p><p><span style=\"color: rgb(52, 73, 94);\">Вычислить корень числа, округленный до целого значения влево.</span></p><p><br></p><p><strong>Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">x=8</span>\n<span class=\"hljs-attr\">Output:</span> <span class=\"hljs-number\">2</span>  <span class=\"hljs-string\">(2.828</span> <span class=\"hljs-string\">округляется</span> <span class=\"hljs-string\">до</span> <span class=\"hljs-number\">2</span><span class=\"hljs-string\">)</span>\n</pre>",
        "time": 30,
        "title": "Sqrt(x)"
    },
    {
        "ID": 2439,
        "answers": [
            {
                "content": "<p>В этом варианте решения перечислю всё плохое, что можно сделать в этой задаче:</p><p><br></p><p>1) хранить всё в избыточном виде, к примеру кодировать тип фигуры через Int (фигур всего 6 видов, а в Int 4 млрд значений), и вместе с фигурой хранить её координату, к примеру тоже в Int (клеток 64, а в Int всё ещё 4 млрд значений).</p><p>2) хранить данные в json</p><p>3) не назвать никаких вариантов сжатия данных</p><p>4) не подумать о том, что для полноценной игры нужно знать чей сейчас ход (следовательно эта инфа тоже должна быть закодирована)</p><p><br></p><p><br></p>",
                "difficulty": "GRADE_16"
            },
            {
                "content": "<p>Более-менее нормальное решение</p><p><br></p><p>1) не забыли про сохранение инфы чей сейчас ход и о состоянии рокировок</p><p>2) всё кодируется просто в байтовом массиве, т.к. число клеток и фигур зафиксированно</p><p>3) не забыли, что пешки могут сделать promotion и превратиться в коня/ферзя и тп</p><p>4) не накосячили с расчётом числа бит</p><p><br></p><p>например</p><p>1) 64 элемента массива, по 1 на клетку поля. В каждом элементе кодируем фигуру. Фигур 6 видов + нужен null. 7 видов = 3 бита. Также у фигуры есть цвет, получается нужно 4 бита. 64 * 4bits = 256 bits = 32 bytes.</p><p>2) 32 фигуры, для каждой нужна координата. Для координаты хватит 6 бит (2^6=64), но ещё нужен null. 32 * 7 bits = 224 bits. Ещё нужно хранить во что превратились пешки. Пешек 16, фигур для превращения 4 (queen, rook, bishop, knight). 16*2bits = 32bits. Итого 224+32=256 bits.</p><p>Можно придумать махинацию вида \"если фигуры уже нет (null), то ставим ей координату короля\". Тогда хватит 6 бит на фигуру.</p><p>Превращения пешек тоже можно пожать, т.к. обычно превращений мало.</p><p><br></p><p>+ к обоим вариантам - нужен 1 бит закодировать чей ход + 4 бита на рокировки.</p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 66,
                "title": "Математика"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2024-05-06T14:05:57Z",
        "interviewCount": 5,
        "question": "<p>Какое минимальное число байт/бит нужно для кодирования состояния шахматной доски?</p><p><br></p><p>Доска стандартная, 8х8, фигуры тоже стандартные, расположение фигур классическое, без каких-либо дополнений типа \"шахматы фишера\".</p><p><br></p><p>После того, как состояние доски в произвольный момент партии \"закодировано\", должна быть возможность это состояние \"раскодировать\" где-нибудь в другом месте и продолжить игру.</p><p><br></p><p>Что требуется от кандидата:</p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>вспомнить правила шахмат</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>придумать как кодировать информацию о фигурах и их расположении</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>придумать как представить эту информацию наиболее компактным образом</li></ol><p><br></p><p>Задача проверяет базовую теорию о представлении информации, системах счисления, алгоритмах сжатия. Знание правил шахмат опционально.</p>",
        "time": 15,
        "title": "Представление состояния шахматной доски"
    },
    {
        "ID": 67,
        "answers": [
            {
                "content": "<p>Для получения решения нужно выписать двоичные представления чисел от 0 до (например) 16 и проследить взаимосвязь между элементами.</p><p><br></p><p>Связь здесь такая - кол-во единиц для числа Х совпадает с кол-вом единиц для числа Х/2 (т.к. умножение на два это битовый сдвиг влево) с поправкой на чётность числа - если число нечётное, то единичек на одну больше.</p><p><br></p><p>Подробнее про чётность - и для x=16, и для x=17&nbsp;<code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">x/2</code>&nbsp;будет равен 8. Но у 17 будет на одну единицу больше.</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> {<br/>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span>[] <span class=\"hljs-title\">countBits</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> num</span>)</span> {<br/>        <span class=\"hljs-built_in\">int</span>[] r = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[num + <span class=\"hljs-number\">1</span>];<br/><br/>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= num; i++) {<br/>            r[i] = r[i / <span class=\"hljs-number\">2</span>] + i % <span class=\"hljs-number\">2</span>;<br/>        }<br/><br/>        <span class=\"hljs-keyword\">return</span> r;<br/>    }<br/>}<br/><br/></pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def count_bits(num: int) -&gt; int:<br/>    ans = [0]<br/>    for i in range(num + 1):<br/>        ans.append(ans[i/2 + i % 2])<br/>    return ans<br/><br/></pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 65,
                "title": "Динамическое программирование"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T18:40:14Z",
        "interviewCount": 2,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Дано число&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">n</code><span style=\"color: rgb(52, 73, 94);\">. </span></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Необходимо вернуть массив&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">arr</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;размера&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">n+1</code><span style=\"color: rgb(52, 73, 94);\">, каждый элемент которого&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">arr[i]</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;говорит, сколько&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">1</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;присутствует в двоичной записи числа&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">i</code></p><p><br></p><p><strong>Пример:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">Input:</span> <span class=\"hljs-string\">n</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-number\">5</span>\n<span class=\"hljs-attr\">Output:</span> [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>]\n<span class=\"hljs-attr\">Explanation:</span>\n<span class=\"hljs-number\">0</span> <span class=\"hljs-string\">--&gt;</span> <span class=\"hljs-number\">0</span>    <span class=\"hljs-string\">(0</span> <span class=\"hljs-string\">единиц)</span>\n<span class=\"hljs-number\">1</span> <span class=\"hljs-string\">--&gt;</span> <span class=\"hljs-number\">1</span>    <span class=\"hljs-string\">(1</span> <span class=\"hljs-string\">единица)</span>\n<span class=\"hljs-number\">2</span> <span class=\"hljs-string\">--&gt;</span> <span class=\"hljs-number\">10</span>   <span class=\"hljs-string\">(1</span> <span class=\"hljs-string\">единица)</span>\n<span class=\"hljs-number\">3</span> <span class=\"hljs-string\">--&gt;</span> <span class=\"hljs-number\">11</span>   <span class=\"hljs-string\">(2</span> <span class=\"hljs-string\">единицы)</span>\n<span class=\"hljs-number\">4</span> <span class=\"hljs-string\">--&gt;</span> <span class=\"hljs-number\">100</span>  <span class=\"hljs-string\">(1</span> <span class=\"hljs-string\">единица)</span>\n<span class=\"hljs-number\">5</span> <span class=\"hljs-string\">--&gt;</span> <span class=\"hljs-number\">101</span>  <span class=\"hljs-string\">(2</span> <span class=\"hljs-string\">единицы)</span>\n\n</pre>",
        "time": 30,
        "title": "Counting bits"
    },
    {
        "ID": 55,
        "answers": [
            {
                "content": "<p>Ключевым моментом задачи является захват среднего семафора до того, как будет захвачен верхний/нижний семафор. В противном случае может возникнуть deadlock.</p><p><br></p><p>Поднятие наверх симметричное.</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-type\">Semaphore</span> <span class=\"hljs-variable\">high</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Semaphore</span>(<span class=\"hljs-number\">1</span>);\n<span class=\"hljs-type\">Semaphore</span> <span class=\"hljs-variable\">mid</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Semaphore</span>(<span class=\"hljs-number\">3</span>);\n<span class=\"hljs-type\">Semaphore</span> <span class=\"hljs-variable\">low</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Semaphore</span>(<span class=\"hljs-number\">1</span>);\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">GoDown</span><span class=\"hljs-params\">()</span> {\n   PassHighSection(<span class=\"hljs-literal\">true</span>);\n   PassMidSection(<span class=\"hljs-literal\">true</span>);\n   PassLowSection(<span class=\"hljs-literal\">true</span>);\n}\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">PassHighSection</span><span class=\"hljs-params\">(<span class=\"hljs-type\">boolean</span> goingDown)</span> {\n    <span class=\"hljs-keyword\">if</span> (goingDown) {\n       mid.acquire();\n       high.acquire();\n       EnterHighSection();\n       high.release()\n    } <span class=\"hljs-keyword\">else</span> {\n        \n    }\n}\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">PassMidSection</span><span class=\"hljs-params\">(<span class=\"hljs-type\">boolean</span> goingDown)</span> {\n    <span class=\"hljs-keyword\">if</span> (goingDown) {\n        EnterMidSection();\n        low.acquire();\n        mid.release();\n    } <span class=\"hljs-keyword\">else</span> {\n        \n    }\n}\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">PassLowSection</span><span class=\"hljs-params\">(<span class=\"hljs-type\">boolean</span> goingDown)</span> {\n    <span class=\"hljs-keyword\">if</span> (goingDown) {\n        EnterLowSection();\n        low.release();\n    } <span class=\"hljs-keyword\">else</span> {\n        \n    }\n}\n\n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 70,
                "title": "Concurrency"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T18:34:13Z",
        "interviewCount": 2,
        "question": "<p><u>Сложность: </u><strong><u>MEDIUM</u></strong></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-meta prompt_\">---&gt;</span>\n____\n    \\\n     \\ A=1\n      \\\n       -----B=3----\n                   \\\n                    \\ C=1 \n                     \\   &lt;---\n                      ______\n\n</pre><p><br></p><p>Есть лестница, состоящая из трёх секции А В С. </p><p><br></p><p>В каждой секции есть лимит на кол-во людей, которые могут в ней находиться. Человек не может перейти в секцию (A/B/C), если в ней нет свободного места.</p><p><br></p><p>В нашем примере:</p><ul><li>в секциях А и С в один момент времени может находиться только один человек, </li><li>а в секции В одновременно могут находиться три человека.</li></ul><p><br></p><p>Потоки людей идут в обе стороны — кто-то спускается, кто-то поднимается, но всегда в одном направлении.</p><p>Люди идут с разной скоростью, могут остановиться и постоять на одном месте.</p><p><br></p><p><span style=\"font-family: unset; font-size: unset; font-style: unset; font-variant-ligatures: unset; font-variant-caps: unset; font-weight: unset; letter-spacing: 0px; color: var(--ozMainBlack);\">Есть две функции </span><strong style=\"font-family: unset; font-size: unset; font-style: unset; font-variant-ligatures: unset; font-variant-caps: unset; letter-spacing: 0px; color: var(--ozMainBlack);\">GoDown</strong><span style=\"font-family: unset; font-size: unset; font-style: unset; font-variant-ligatures: unset; font-variant-caps: unset; font-weight: unset; letter-spacing: 0px; color: var(--ozMainBlack);\">, </span><strong style=\"font-family: unset; font-size: unset; font-style: unset; font-variant-ligatures: unset; font-variant-caps: unset; letter-spacing: 0px; color: var(--ozMainBlack);\">GoUp</strong><span style=\"font-family: unset; font-size: unset; font-style: unset; font-variant-ligatures: unset; font-variant-caps: unset; font-weight: unset; letter-spacing: 0px; color: var(--ozMainBlack);\"> представляющие собой проход по трём секциям лестницы.</span></p><p>Каждый идущий человек представляет собой отдельный поток, который исполняет одну из этих двух функций.</p><p><br></p><p>Методы с префиксом Enter считаются критической секцией, в них не может находиться больше людей (потоков), чем разрешено по условию. Методы с префиксом Pass служат как обертки, они не являются критическими секциями, внутри них можно делать проверки.</p><p>Можно менять сигнатуру методов и добавлять свои параметры при необходимости.</p><p><br></p><p>Необходимо реализовать синхронизацию для правильной работы лестницы. </p><p>Правильная работа:</p><ul><li>выполняются ограничения на кол-во людей внутри секции</li><li>не возникает deadlock</li></ul><p><br></p><p><strong>Пример неправильной работы при неправильной реализации:</strong></p><p>Три человека идут один за другим снизу вверх и доходят втроём до средней секции. Останавливаются покурить.</p><p>Сверху вниз идёт один человек, проходит по верхней секции и доходит до границы со средней.</p><p><strong>Итог:</strong> человек идущий сверху не может идти дальше, т.к. средняя площадка занята. Люди на средней площадке не могут идти вверх, т.к. верхняя площадка занята.</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">GoDown</span>()</span> {\n    PassHighSection();\n    PassMidSection();\n    PassLowSection();\n}  \n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">GoUp</span>()</span> {\n    PassLowSection();\n    PassMidSection();\n    PassHighSection();\n} \n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PassHighSection</span>()</span> {\n    <span class=\"hljs-comment\">// ...</span>\n    EnterHighSection();\n    <span class=\"hljs-comment\">// ...</span>\n}\n\n</pre>",
        "time": 45,
        "title": "Stairs"
    },
    {
        "ID": 68,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Просто строим слои треугольника один за другим.</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> {<br/>    <span class=\"hljs-keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; generate(<span class=\"hljs-built_in\">int</span> numRows) {<br/>        <span class=\"hljs-keyword\">if</span> (numRows == <span class=\"hljs-number\">0</span>) {<br/>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();<br/>        }<br/><br/>        List&lt;List&lt;Integer&gt;&gt; answer = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;(numRows);<br/>        answer.<span class=\"hljs-keyword\">add</span>(Arrays.asList(<span class=\"hljs-number\">1</span>));<br/>        <br/>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; numRows; i++) {<br/>            List&lt;Integer&gt; prev = answer.<span class=\"hljs-keyword\">get</span>(i - <span class=\"hljs-number\">1</span>);<br/>            List&lt;Integer&gt; layer = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();<br/>            <br/>            layer.<span class=\"hljs-keyword\">add</span>(<span class=\"hljs-number\">1</span>);<br/>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt; i; j++) {<br/>                layer.<span class=\"hljs-keyword\">add</span>(prev.<span class=\"hljs-keyword\">get</span>(j - <span class=\"hljs-number\">1</span>) + prev.<span class=\"hljs-keyword\">get</span>(j));<br/>            }<br/>            layer.<span class=\"hljs-keyword\">add</span>(<span class=\"hljs-number\">1</span>);<br/><br/>            answer.<span class=\"hljs-keyword\">add</span>(layer);<br/>        }<br/><br/>        <span class=\"hljs-keyword\">return</span> r;<br/>    }<br/>}<br/><br/></pre><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def <span class=\"hljs-title function_\">generate</span><span class=\"hljs-params\">(rows: <span class=\"hljs-type\">int</span>)</span> -&gt; List[List[<span class=\"hljs-type\">int</span>]]:<br/>    pascal = [ [<span class=\"hljs-number\">1</span>] * (i+<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">for</span> i in <span class=\"hljs-title function_\">range</span><span class=\"hljs-params\">(rows)</span> ]<br/>    <span class=\"hljs-keyword\">for</span> row in <span class=\"hljs-title function_\">range</span><span class=\"hljs-params\">(rows)</span>:<br/>        <span class=\"hljs-keyword\">for</span> col in <span class=\"hljs-title function_\">range</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>, row)</span>:<br/>            pascal[row][col] = pascal[row-<span class=\"hljs-number\">1</span>][col-<span class=\"hljs-number\">1</span>] + pascal[row-<span class=\"hljs-number\">1</span>][col]<br/>    <span class=\"hljs-keyword\">return</span> pascal<br/><br/></pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 65,
                "title": "Динамическое программирование"
            },
            {
                "ID": 60,
                "title": "Алгоритмы"
            },
            {
                "ID": 59,
                "title": "Algorithms"
            }
        ],
        "createdAt": "2021-10-07T18:41:20Z",
        "interviewCount": 1,
        "question": "<p><u>Сложность: </u><strong><u>EASY</u></strong></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Для заданного числа&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">n</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;нужно рассчитать первые&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">n</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;строк в треугольнике паскаля. </span></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">Треугольник выглядит следующим образом</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">            1\n         1  2  1\n        1  3  3  1\n      1  4  6  4  1\n    1  5  10 10  5  1 \n\n</pre><p><br></p><p>Каждая строка на 1 элемент длиннее предыдущей. Все крайние элементы -&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">1</code>.</p><p><br></p><p>Каждый элемент строки&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">a[r][c]</code>&nbsp;равен сумме двух элементов строки сверху</p>",
        "time": 30,
        "title": "Pascal triangle"
    }
]