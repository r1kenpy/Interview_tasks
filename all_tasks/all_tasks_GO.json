[
    {
        "ID": 253,
        "answers": [
            {
                "content": "<p>1) Здесь мы проверяем что человек умеет в джоины, distinct, where, order</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">SELECT distinct u.id, firstname, lastname, p.item_id\nFROM users u\n&nbsp;&nbsp;&nbsp;&nbsp; join purchase p ON u.id = p.user_id\n&nbsp;&nbsp;&nbsp;&nbsp; left join ban_list bl ON u.id = bl.user_id -- <span class=\"hljs-keyword\">не</span> забыть left join, а то в <span class=\"hljs-type\">запрос</span> попадут только покупки забаненных пользователей.\nWHERE bl.user_id IS <span class=\"hljs-literal\">NULL</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- пользак <span class=\"hljs-keyword\">не</span> забанен\n&nbsp;&nbsp; OR bl.date_from &gt; p.date&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- <span class=\"hljs-keyword\">или</span> забанен позже, чем совершена покупка\nORDER BY lastname, firstname, u.id, p.item_id&nbsp;&nbsp; -- лучше бы кандидат догадался <span class=\"hljs-keyword\">или</span> спросил, что в сортировке <span class=\"hljs-keyword\">по</span> имени надо сначала ставить фамилию, потом имя.\n</pre><p><br></p><p>2) Здесь мы проверяем что человек умеет в HAVING, знает, чем having отличается от WHERE</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">SELECT u.<span class=\"hljs-built_in\">id</span>, u.firstname, u.lastname, SUM(p.price)\nFROM users u join purchase p ON u.<span class=\"hljs-built_in\">id</span> = p.user_id\nGROUP BY u.<span class=\"hljs-built_in\">id</span>, u.firstname, u.lastname -- и знает, что аггрегирующие функции без group by не будут работать\nHAVING SUM(p.price) &gt; <span class=\"hljs-number\">5000</span>\n\n\n-- В принципе, вариант\n\nSELECT * FROM (\n&nbsp;&nbsp;&nbsp; SELECT u.<span class=\"hljs-built_in\">id</span>, u.firstname, u.lastname, SUM(p.price) s\n&nbsp;&nbsp;&nbsp; FROM users u join purchase p ON u.<span class=\"hljs-built_in\">id</span> = p.user_id\n&nbsp;&nbsp;&nbsp; GROUP BY u.<span class=\"hljs-built_in\">id</span>, u.firstname, u.lastname\n) WHERE s &gt; <span class=\"hljs-number\">5000</span>\n\n-- тоже является корректным, но все равно надо спросить про HAVING\n\n</pre>",
                "difficulty": "GRADE_SCREENING"
            }
        ],
        "blocks": [
            {
                "ID": 136,
                "title": "Скрининг"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:05:13Z",
        "interviewCount": 6183,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Есть база с такой схемой данных</span></p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-comment\">// user</span>\nid <span class=\"hljs-string\">| firstname | lastname | birth</span>\n<span class=\"hljs-number\">1</span>&nbsp; <span class=\"hljs-string\">| Ivan&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Petrov&nbsp;&nbsp; | 1996-05-01</span>\n<span class=\"hljs-number\">2</span>&nbsp; <span class=\"hljs-string\">| Anna&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Petrova&nbsp; | 1999-06-01&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</span>\n<span class=\"hljs-number\">3</span>&nbsp; <span class=\"hljs-string\">| Anna&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Petrova&nbsp; | 1990-10-02</span>\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;\n<span class=\"hljs-comment\">// purchase</span>\nsku<span class=\"hljs-string\">| price | user_id | date</span>\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-string\">| 5500&nbsp; | 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | 2021-02-15</span>\n<span class=\"hljs-number\">1</span>  <span class=\"hljs-string\">| 5700&nbsp; | 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | 2021-01-15</span>\n<span class=\"hljs-number\">2</span>  <span class=\"hljs-string\">| 4000&nbsp; | 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | 2021-02-14</span>\n<span class=\"hljs-number\">3</span>  <span class=\"hljs-string\">| 8000&nbsp; | 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | 2021-03-01</span>\n<span class=\"hljs-number\">4</span>  <span class=\"hljs-string\">| 400&nbsp;&nbsp; | 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | 2021-03-02</span>\n\n<span class=\"hljs-comment\">// ban_list</span>\nuser_id <span class=\"hljs-string\">| date_from&nbsp; &nbsp;</span>\n<span class=\"hljs-number\">1</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class=\"hljs-string\">| 2021-03-08</span>\n</pre><h4><br></h4><h4><a href=\"http://platform.gp.o3.ru/committee/#/go/screening?id=%d0%9d%d1%83%d0%b6%d0%bd%d0%be-%d0%b2%d1%8b%d0%b2%d0%b5%d1%81%d1%82%d0%b8\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(52, 73, 94);\">Нужно вывести:</a></h4><ol><li>Вывести уникальные комбинации пользователя и id товара для всех покупок, совершенных пользователями до того, как их забанили. Отсортировать сначала по имени пользователя, потом по SKU</li><li>Найти пользователей, которые совершили покупок на сумму больше 5000р. Вывести их имена в формате id пользователя | имя | фамилия | сумма покупок</li></ol>",
        "time": 10,
        "title": "SQL запрос на JOIN нескольких таблиц с условием"
    },
    {
        "ID": 249,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">func uniqRandn(n int) []int {<br/>    res, resMap := make([]int, 0, n), make(map[int]struct{}, n)<br/>    for len(res) &lt; n {<br/>        val := rand.Int()<br/>        if _, ok := resMap[val]; ok {<br/>            continue<br/>        }<br/>        res = append(res, val)<br/>        resMap[val] = struct{}{}<br/>    }<br/>    return res<br/>}<br/><br/></pre><p><br></p>",
                "difficulty": "GRADE_SCREENING"
            }
        ],
        "blocks": [
            {
                "ID": 136,
                "title": "Скрининг"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:00:34Z",
        "interviewCount": 5086,
        "question": "<p>Требуется реализовать функцию uniqRandn, которая генерирует слайс длины n уникальных, рандомных чисел.</p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">import</span> (\n    <span class=\"hljs-string\">\"fmt\"</span>\n<span class=\"hljs-string\">    \"math/rand\"</span>\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    fmt.Println(uniqRandn(<span class=\"hljs-number\">10</span>))\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">uniqRandn</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> {\n    <span class=\"hljs-comment\">//...</span>\n}\n</pre>",
        "time": 5,
        "title": "Генерация N уникальных чисел"
    },
    {
        "ID": 295,
        "additional": "<ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">Зачем нужны эти протоколы? Какие примеры их использования есть?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">Как торрент качает файл по UDP, если пакеты могут не дойти и нет подтверждения?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><strong style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">Какие варианты использования подходов с подтверждением и без вы знаете?</strong></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><strong style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">Какие есть примеры бизнесовых данных, которые \"можно потерять\"?</strong></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">Можно ли привести аналоги взаимодействия с подтверждением и без вне сетевых протоколов? Какие?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">Был ли опыт с&nbsp;</span><strong style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">At-least</strong><span style=\"background-color: rgb(255, 255, 255); color: rgb(31, 31, 31);\">-</span><strong style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">once&nbsp;</strong><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">&nbsp;и&nbsp;</span><strong style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">Exactly</strong><span style=\"background-color: rgb(255, 255, 255); color: rgb(31, 31, 31);\">-</span><strong style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">once</strong><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">&nbsp;доставками? Какой?</span></li></ol><p><br></p>",
        "answers": [
            {
                "content": "<p><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Знает определения. Расскажет про стриминг видео/аудио.</span></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">TCP требует установки соединения а UDP нет, TCP надежный а UDP датаграммы могут теряться/дублироваться/перепутываться, TCP медленнее UDP, UDP поддерживает broadcast датаграммы.</span></p><p><br></p><p>Q: Зачем нужен UDP, если он такой ненадежный?</p><p>А: Зато он быстрее, за счет отсутствия подтверждений</p><p><br></p><p>Q: Зачем нужен TCP, если он такой медленный?</p><p>А: Зато он надежнее, за счет механизма подтверждений</p><p><br></p><p>Рассказал анекдот</p><blockquote><span style=\"background-color: rgb(255, 255, 255); color: rgb(27, 30, 36);\">- Знаю анекдот про UDP, но не факт, что он до вас дойдет...</span></blockquote><blockquote><span style=\"background-color: rgb(255, 255, 255); color: rgb(27, 30, 36);\">- Знаю анекдот про TCP. Если он до вас не дойдет, я повторю его снова.</span></blockquote><p><br></p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Знает, что вариант отправки \"с подтверждением\" можно сделать через RMQ, например, а вариант \"без подтверждения\" - через RMQ, kafka или любую шину данных (bus).</span></p><p><br></p><p><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Может объяснить, как торрент качает файлы через UDP: как обходится проблема с гарантированной \"доставкой\" пакетов?</span></p><p><br></p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Знает, что HTTP 3 использует UDP под капотом (внутри QUIC в качестве транспорта) для оптимизации и лучшего администрирования передачи данных. Но при этом HTTP 3, как и многие другие транспортные решения, проверяют и подтверждают пакеты, но не на уровне транспорта, а выше.</span></p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Опишите высокоуровневую схему взаимодействия между клиентом и сервером по протоколу TCP</em></p><p>A: Сервер создает сокет и начинает слушать входящие соединения на определенном порте (bind, listen, accept), клиент создает сокет и подключается к серверу при помощи connect, далее происходит обмен сообщениями (send/recv), в конце сокеты закрываются.</p>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 141,
                "title": "ОС, сети и эксплуатация"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:48:30Z",
        "interviewCount": 4190,
        "question": "<p><span style=\"color: rgb(23, 43, 77); background-color: rgb(255, 255, 255);\">В чём отличие TCP и UDP протоколов? Подходов: с подтверждением доставки и без него? Какие примеры можно привести?</span></p>",
        "time": 5,
        "title": "TCP / UDP"
    },
    {
        "ID": 262,
        "additional": "<p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Что можно сказать про стек горутины и стек потока?</em></p><p>A: Изначально у горутины небольшой стек который может расти<span style=\"color: rgb(63, 67, 80);\"> до 1 гб на 64-битных ОС и до 256 мб на 32-битных системах</span>. У потока же изначально большой стек который не может динамически увеличиваться.</p><p>https://github.com/golang/go/blob/go1.22.0/src/runtime/proc.go#L157</p><p><br></p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Cколько можно создать горутин?</em></p><p>A: Количество горутин не ограничено, можно создавать столько на сколько хватит памяти</p><p><br></p><p>Q:&nbsp;Как можно ограничивать количество одновременно выполняемых горутин<em style=\"color: rgb(127, 140, 141);\">?</em></p><p>A:  Переменная <em style=\"color: rgb(127, 140, 141);\">GOMAXPROCS это</em> переменная ограничивающая количество потоков ОС используемых для исполнения горутин</p><p><br></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Что значит \"легковесная функция\"?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">А: Выделение памяти происходит иначе. Горутина занимает меньше памяти, чем поток. Для go-рутины не требуется \"переключение\" контекста, которое происходит при смене потока.</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">В чём основные отличия go-рутины от потока в плане управления исполнением?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">А: потоки администрируются OS, а го-рутина своим шедулером, который не зависит от OS, что даёт стабильную работу в разных средах. Го-рутине не требуется переключение потока, а из-за низкого объёма памяти переключение рутин происходит куда быстрее.</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Какие у го-рутин имена? Как можно управлять рутинами извне?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">А: имён нет. Управлять можно только через примитивы синхронизации.</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Как выделяется память на го-рутину?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">А: Память выделяется в рантайме планировщиком в зависимости от структур и их размера, находящихся в скопе горутины (кроме замыканий). Минимум - 2 кб, максимум: 1 гб на 64-битных ОС, 256 мб на 32-битных системах.</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Для функции выделяется память на стеке. Что будет с переменной, объявленной в го-рутине на стеке, если она сильно вырастет в памяти? Например, мы append-им срез 10^10 раз.</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">А: объект со стека переедет в кучу.</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Какие проблемы, связанные с рутинами Вы знаете?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">А: утечка рутин, dead-lock, утечка памяти из-за \"повисших\"/\"спящих\" рутин;</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Всегда ли горутины ускоряют работу?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">А: Нет, если работа&nbsp;</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Какое оптимальное количество горутин стоит выделить на тяжёлую задачу для максимальной производительности?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">А: Установленное через GOMAXPROCS.</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Какое максимальное количество рутин может быть активно одновременно?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">А: Установленное через GOMAXPROCS.</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Какие есть примитивы синхронизации?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">А: миютекс, канал. Можно добавить wg.</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Зачем нужен workerPool? Какую проблему он решает?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">А: он нужнен для ограничения количества исполнителей. Решает проблему выделения ресурсов: памяти, потоков выполнения.</span></li></ol><p><br></p>",
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Горутины гораздо более легковесны и требуют меньше памяти, поэтому их можно создать больше. Горутины шедулятся рантаймом языка в юзерспейсе, в то время как потоки шедулятся операционной системой в кернелспейсе. Из этого следует также и меньшее количество переключений контекста в случае использования горутин.</span></p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Кандидат знает, что у рутин свой планировщик, свои правила администрирования, выделения памяти и прерывания.</span></p><p><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Интервьюируемый знаком с проблемами утечек рутин и dead-lock.</span></p><p><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Соискатель \"что-то\" читал в подкапотную сторону, в целом имеет верное представление.</span></p><p><br></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 137,
                "title": "Go (теория)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:16:14Z",
        "interviewCount": 4043,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Чем горутины отличаются от потоков?</span></p>",
        "time": 5,
        "title": "Горутины и потоки"
    },
    {
        "ID": 257,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Каналы - механизм взаимодействия между горутинами. Потокобезопасны, то есть к одному каналу могут обращаться несколько горутин одновременно.</span></p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Какие они бывают?</em></p><p>A: Буфферизированные(асинхронные) и небуферизированные(синхронные)</p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">К чему приведут операции чтения/записи над закрытым каналом?</em></p><p>A: Чтение вернет нулевое значение, запись вызовет панику</p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">К чему приведут операции чтения/записи над nil каналом</em></p><p>A: Чтение из nil канала приведет к блокировке навсегда.</p><p>Запись в nil канал приведет к блокировке навсегда.</p><p>Закрытие такого канала приводит к panic.</p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Какой еще способ блокировки навсегда?</em></p><p>A:</p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">select {</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div></pre><p>(Если это не совсем очевидно, можно сначала спросить про select, а потом вернуться к этому вопросу)</p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Что такое select и как он работает</em></p><p>A: Если вкратце: switch для каналов</p><p><br></p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Другие примитивы синхронизации</em></p><p>A: Mutex, WaitGroup</p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Как устроен внутри?</em></p><p>A: Структура с метаданными по типу \"размер буффера\", \"закрыт/открыт\", \"связанные горутины\" и тд. Также в этой структуре есть мьютекс для безопасного доступа к каналу</p><p><br></p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Паттерны конкурентного программирования, использующие каналы</em></p><p>A: Генераторы, Fan-In, Fan-Out, Управляющий канал и тд</p><p><br></p><p>Q: Как устроен не буффирезированный канал, как данные передаются между горутинами</p><p>A: горутина перекладывает на стек другой горутине</p><p><br></p><p>Q: Как устроен буфирезированный, почему кольцевая очередь и чем она помогает в данном случае</p><p>A: позволяет читать и писать одновременно </p>",
                "difficulty": "GRADE_19"
            },
            {
                "content": "<p>Q: Как горутина понимает что можно проснуться?</p><p><br></p><p>A: Когда канал забит данными, горутина переходит в очередь ожидания на запись. при чтении из полного канала (горутина читатель) обращается к структуре канала и смотрит самостоятельно есть ли там кто то. Eсли кто то там есть (в нашем случае есть горутина писатель) - читатель самостоятельно вытаскивает его с очереди и горутина писатель просыпается.</p>",
                "difficulty": "GRADE_20"
            }
        ],
        "blocks": [
            {
                "ID": 137,
                "title": "Go (теория)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:11:40Z",
        "interviewCount": 3741,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Что такое каналы? Зачем нужны?</span></p>",
        "time": 10,
        "title": "Каналы"
    },
    {
        "ID": 285,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Транзакция - это группа выполняющихся команд, которые можно подтвердить/отменить целиком или с возвратом SavePoint.</span></p><p>Кандидат может назвать пример использования. Обычно это банковский перевод с одного счета на другой.</p><p><br></p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>Кандидат может назвать уровни изоляции.</p><p><span style=\"color: rgb(52, 73, 94);\">Уровни изоляции - Read uncommited (можно спросить есть ли он в PostgreSQL), Read committed, Repeatable read, Serializable.</span></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 139,
                "title": "Базы данных"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:41:45Z",
        "interviewCount": 3728,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Что такое транзакция? Какие уровни изоляции транзакций существуют в РСУБД?</span></p>",
        "time": 5,
        "title": "Транзакции"
    },
    {
        "ID": 281,
        "additional": "<p>Q: Написать запрос - выбрать названия всех книг которые на руках</p><p>A: (как примерно должно выглядеть) Inner join по кникам на руках и таблице \"Книга\"</p><p><br></p><p>Q: Написать запрос - выбрать названия всех книг в библиотеке у которых больше 3 авторов</p><p>A: (как примерно должно выглядеть) Left join по кникам на руках, таблице \"Книга\" и \"Атовр\" с условием что книга не на руках и группировкой по автору. Условие что count авторов &gt; 3</p><p><br></p><p>Q: Написать запрос - выбрать имена топ 3 читаемых авторов на данный момент</p><p>A: (как примерно должно выглядеть) Inner join по кникам на руках, таблице \"Книга\" и \"Атовр\" и группировкой по автору. Сортировка по count limit 3</p>",
        "answers": [
            {
                "content": "<p>Таблицы для библиотеки созданы в псевдокоде.</p><p>Задачи решаются с подзапросами без использования join.</p><p><br></p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>Таблицы для библиотеки созданы в одном из диалектов SQL</p><p>Созданы требуемые индексы</p><p>Учтено, что у книги может быть несколько авторов</p><p>Решены все три задачи преимущественно без подзапросов.</p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 139,
                "title": "Базы данных"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:39:02Z",
        "interviewCount": 3468,
        "question": "<p>Нужно описать модель библиотеки. Есть 3 сущности: \"Автор\", \"Книга\", \"Читатель\"</p><p>Физически книга только одна и может быть только у одного читателя. Нужно составить таблицы для библиотеки так что бы это учесть.</p>",
        "time": 15,
        "title": "Библиотека"
    },
    {
        "ID": 299,
        "additional": "<p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Какие есть основные методы HTTP?</em></p><p>A: GET, HEAD, POST, PUT, DELETE</p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Примеры HTTP хедеров?</em></p><p>A: content-length, content-type, cookie, authorization, user-agent</p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Назовите классы кодов состояний HTTP</em></p><p>A: 1xx (informational), 2xx (success), 3xx (redirect), 4xx (client error), 5xx (server error)</p><p><br></p>",
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">HTTP - текстовый протокол функционирующий по принципу запрос-ответ. HTTP запрос состоит из стартовой стороки (включающей метод, идентификатор ресурса и версию протокола), хедеров и тела сообщения. HTTP ответ похож по структуре на HTTP запрос, но стартовая строка вместо метода и URI содержит код состояния.</span></p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>Кандидат может рассказать про cookie, привести примеры хедеров, основные методы, знает коды ответов.</p><p><br></p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Кандидат может самостоятельно написать http запрос текстом.</p><p>Кандидат может ответить, почему статику рекомендуется размещать на отдельном домене?</p>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 141,
                "title": "ОС, сети и эксплуатация"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:51:34Z",
        "interviewCount": 3228,
        "question": "<p>Что из себя представляет протокол HTTP? Из какиx основных частей состоит HTTP запрос и HTTP ответ?</p><p><br></p>",
        "time": 5,
        "title": "HTTP Protocol"
    },
    {
        "ID": 294,
        "additional": "<p>// Если решение через БД Q: Как организовать воркеры, так, что бы они не брали в работу одни и те же данные? A: Придумать как не заселектить в несколько воркеров одинаковые данные для обработки, например мастер процесс который будет раздавать задачи.</p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Сервис аналитики не будет читать данные из нас или нашей очереди, что будем делать?</em>&nbsp;A: Придумать способ как самим пушить данные в аналитику из своей очереди</p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Отдел аналитики жалуется на высокий рпс от нас когда они под нагрузкой мы их сервис кладем. Как решить проблему?</em>&nbsp;A: Просто уменьшить рпс в конфигах плохая идея тогда будет копиться очередь. Нужно придумать экспоненциальное повышение или понижение нагрузки в зависимости от состояния аналитики</p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Проблема с аналитикой решена. Теперь проблема с местом занимаемым нашей очередю, инфра ограничила ресурсы(расширять дальше некуда), что делать? (На аналитику повлиять мы не можем, у них в планах переписать сервис и тд нужно свое решение.)</em>&nbsp;A: Надо придумать как мы будем просеивать данные в зависимости от нашей квоты на ресурсы и загруженности очередей. Например вытеснением или прореживанием данных для аналатики на входе нашего сервиса.</p><p><br></p>",
        "answers": [
            {
                "content": "<p><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Кандидат предлагает вынести запрос в аналитику в асинхронную рутину.</span></p><p><br></p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>Предложил один из вариантов вариантов асинхронной отложенной обработки, например: п<span style=\"color: rgb(52, 73, 94);\">ридумать как распаралелить заказ и аналитику, брокер сообщений</span></p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">Кандидат предложил OUTBOX. Понимает и может объяснить:</span></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">как организовать асинхронное вычитывание журнала с блокировкой:</span></li><li data-list=\"bullet\" class=\"ql-indent-1\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">на уровне PSQL;</span></li><li data-list=\"bullet\" class=\"ql-indent-1\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">через сторонний ресурс;</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">чем обеспечить гарантию отправки данных во внешние сервисы.</span></li></ol><p><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">Также соискатель может обозначить минусы выноса отправки в \"асинхронное\" решение:</span></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">необходимость администрировать эти рутины, особенно при выключении сервиса;</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">проблема с ретраями и нагрузкой внутри рутин;</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">проблема с \"гарантией отправки\".</span></li></ol><p><br></p>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 140,
                "title": "Архитектура"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:47:38Z",
        "interviewCount": 2941,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">На примере создания заказа. Есть запрос на сервис и есть ответ, между этими двумя действиями мы сладываем в аналитику товары которые заказали (например для подсчета популярности товаров). Сервис аналитики переодически работает медленно или вовсе таймаутит, и мы не успеваем ответить, теряем заказы.</span></p><p><br></p><p><span style=\"color: rgb(52, 73, 94);\">﻿Что делать, что бы перестать терять заказы, и деньги соответсвенно?</span></p><p><br></p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">+-------+         +---------------+    +-------------------+</div><div class=\"ql-code-block\">| User  |         | OrderService  |    | AnalyticsService  |</div><div class=\"ql-code-block\">+-------+         +---------------+    +-------------------+</div><div class=\"ql-code-block\">    |                     |                      |</div><div class=\"ql-code-block\">    | CreateOrder         |                      |</div><div class=\"ql-code-block\">    |--------------------&gt;|                      |</div><div class=\"ql-code-block\">    |                     |                      |</div><div class=\"ql-code-block\">    |                     | TrackOrder           |</div><div class=\"ql-code-block\">    |                     |---------------------&gt;|</div><div class=\"ql-code-block\">    |                     |                      |</div><div class=\"ql-code-block\">    |                     |                      | Too long action</div><div class=\"ql-code-block\">    |                     |                      |----------------</div><div class=\"ql-code-block\">    |                     |                      |               |</div><div class=\"ql-code-block\">    |                     |                      |&lt;---------------</div><div class=\"ql-code-block\">    |                     |                      |</div><div class=\"ql-code-block\">    |                     |                      |</div><div class=\"ql-code-block\">    |                     |&lt;---------------------|</div><div class=\"ql-code-block\">    |                     |                      |</div><div class=\"ql-code-block\">    |                     |                      |</div><div class=\"ql-code-block\">    |&lt;--------------------|                      |</div><div class=\"ql-code-block\">    |                     |                      |</div></pre>",
        "time": 15,
        "title": "Вопрос о медленном сервисе"
    },
    {
        "ID": 275,
        "additional": "<p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Если кандидат написал map + sync.Mutex, то спросить можно ли найти решение лучше?</em></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Если для решения использовался sync.RWMutex, то спросить в каких случаях это будет работать медленно?</em></p><p>A: При большом количестве запросов lock contention будет расти и любая запись будет тормозить чтение.</p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Как это можно решить?</em></p><p>A: Шардировать данные, попросить написать решение с учетом шардинга</p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Как шардировать данные?</em></p><p>A: Ожидается ответ про алгоритмы хеширования (md5, crc и т.д.)</p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Сколько шардов нужно делать?</em></p><p>A: Не меньше, чем кол-во потоков, а лучше больше и кратно этому значению.</p><p><br></p><p>Q: <em>можно ли сделать еще более быстрый кеш, если у нас мало ключей и мы заранее знаем, что они идут от \"1\" до \"10000\" и других ключей не бывает?</em></p><p>A: Можно использовать слайс, заранее выделенного размера.</p>",
        "answers": [
            {
                "content": "<p>Решил в лоб с sync.(RW)Mutex'ом, без применения шардирования, правильно инициализировал map в конструкторе. </p><p><br></p><p>Может подсветить проблемы в использовании: переполнение памяти, дублирование памяти из-за нескольких процессов, нету механизма для инвалидации кеша (ключи будут жизни вечно),</p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p><span style=\"color: var(--ozMainBlack);\">Рассказал про различие sync.Mutex + sync.RWMutex. Решил с шардированием и рассказал про алгоритмы хеширования и смог либо написать свою реализацию, либо вызов из std lib. </span></p><p><span style=\"color: var(--ozMainBlack);\">Предложил решение проблем, описанных в 18 грейде.</span></p><p>Может рассказать про плюсы/минусы такого решения в сравнении с, например, memcached.</p>",
                "difficulty": "GRADE_19"
            },
            {
                "content": "<p>Может порассуждать на темы:</p><ul><li>нужно ли кешировать ответы с ошибками или отсутствие данных</li><li>что лучше: LRU или TTL?</li><li>когда нужно использовать централизованное кеширование или распределенное</li><li>есть ли смысл в кеше, который не помещается в память и частично сохраняется на диск</li></ul>",
                "difficulty": "GRADE_20"
            }
        ],
        "blocks": [
            {
                "ID": 138,
                "title": "Go (практика)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:29:13Z",
        "interviewCount": 2805,
        "question": "<p>Нужно написать простую библиотеку in-memory cache. </p><p>Для простоты считаем, что у нас бесконечная память и нам не нужно задумываться об удалении ключей из него.</p><p>Реализация должна удовлетворять интерфейсу:</p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Cache</span> <span class=\"hljs-keyword\">interface</span> {\n    <span class=\"hljs-title class_\">Set</span>(k, v <span class=\"hljs-built_in\">string</span>)\n    <span class=\"hljs-title class_\">Get</span>(k <span class=\"hljs-built_in\">string</span>) (v <span class=\"hljs-built_in\">string</span>, ok bool)\n}\n</pre>",
        "time": 15,
        "title": "In-memory cache"
    },
    {
        "ID": 245,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">[0 1 2 4] [0 1 2 4]<br/><br/></pre><p><br></p>"
            }
        ],
        "blocks": [
            {
                "ID": 136,
                "title": "Скрининг"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T19:56:27Z",
        "interviewCount": 2769,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Что выведет программа?</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">﻿<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">a</span><span class=\"hljs-params\">()</span></span> {\n    x := []<span class=\"hljs-keyword\">int</span>{}\n    x = <span class=\"hljs-built_in\">append</span>(x, <span class=\"hljs-number\">0</span>)\n    x = <span class=\"hljs-built_in\">append</span>(x, <span class=\"hljs-number\">1</span>)\n    x = <span class=\"hljs-built_in\">append</span>(x, <span class=\"hljs-number\">2</span>)\n    y := <span class=\"hljs-built_in\">append</span>(x, <span class=\"hljs-number\">3</span>)\n    z := <span class=\"hljs-built_in\">append</span>(x, <span class=\"hljs-number\">4</span>)\n    fmt.Println(y, z)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    a()\n}\n\n\n</pre>",
        "title": "Задачка про слайсы 1"
    },
    {
        "ID": 283,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">TODO: @mkabischev</span></p>"
            }
        ],
        "blocks": [
            {
                "ID": 139,
                "title": "Базы данных"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:40:39Z",
        "interviewCount": 2609,
        "question": "<p>Построить оптимальный индекс для</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">SELECT * FROM employee <span class=\"hljs-type\">WHERE</span> <span class=\"hljs-variable\">sex</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">'m'</span> AND salary &gt; <span class=\"hljs-number\">300000</span> <span class=\"hljs-type\">AND</span> <span class=\"hljs-variable\">age</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">20</span> ORDER BY created_at\n</pre>",
        "title": "Индексы"
    },
    {
        "ID": 280,
        "additional": "<p>Первый пункт очень прост и хорош для разминки кандидата, ознакомления с сервисов, чтобы кандидат запустил код, посмотрел как работает. По каждому пункту можно дополнительно обсудить использованные им примитивы, почему выбрано то или иное решение.</p><p>Например:</p><p><br></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>какие вообще есть примитивы синхронизации в go, как их можно использовать</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>как используются закрытые каналы</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>что будет если писать или читать в закрытый канал</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>как сделать счетчик, агрегирующий информацию из разных горутин (либо atomic либо отдельная горутина)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>как использовать контекст</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>как корректно обрабатывать 301, 302 коды ответов</li></ol>",
        "answers": [
            {
                "content": "<p>Написал синхронное решение, которое идет последовательно и выполняет http-запросы.</p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>Написал решение с использованием канала (куда отправляются ссылки для скачивания), горутин (воркеров), которые выполняют запросы и sync.WaitGroup для ожидания завершения.</p><p>Может реализовать остановку выполнения воркеров через context или управляющий канал. </p><p><br></p><p><br></p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Может написать решение, чтобы ограничивать количество исходящих запросов.</p><p>Может самостоятельно написать моки.</p><p>Чем плохо использовать http.DefaultClient?</p><p><br></p>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 138,
                "title": "Go (практика)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:36:11Z",
        "interviewCount": 2588,
        "question": "<p>Есть набор урлов.</p><p><br></p><p><br></p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">package main</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">func main() {</div><div class=\"ql-code-block\" data-language=\"plain\">  var urls = []string{</div><div class=\"ql-code-block\" data-language=\"plain\">    \"http://ozon.ru\",</div><div class=\"ql-code-block\" data-language=\"plain\">    \"https://ozon.ru\",</div><div class=\"ql-code-block\" data-language=\"plain\">    \"http://google.com\",</div><div class=\"ql-code-block\" data-language=\"plain\">    \"http://somesite.com\",</div><div class=\"ql-code-block\" data-language=\"plain\">    \"http://non-existent.domain.tld\",</div><div class=\"ql-code-block\" data-language=\"plain\">    \"https://ya.ru\",</div><div class=\"ql-code-block\" data-language=\"plain\">    \"http://ya.ru\",</div><div class=\"ql-code-block\" data-language=\"plain\">    \"http://ёёёё\",</div><div class=\"ql-code-block\" data-language=\"plain\">  }</div><div class=\"ql-code-block\" data-language=\"plain\">}</div></pre><p>Напишите программу, которая:</p><p><br></p><p>1. Поочередно выполнит http запросы по предложенному списку ссылок</p><ol><li data-list=\"bullet\" class=\"ql-indent-1\"><span class=\"ql-ui\" contenteditable=\"false\"></span>в случае получения http-кода ответа на запрос \"200 OK\" печатаем на экране \"адрес url - ok\"</li><li data-list=\"bullet\" class=\"ql-indent-1\"><span class=\"ql-ui\" contenteditable=\"false\"></span>в случае получения http-кода ответа на запрос отличного от \"200 OK\" либо в случае ошибки печатаем на экране \"адрес url - not ok\"</li></ol><p><br></p><p>2. Модифицируйте программу таким образом, чтобы использовались каналы для коммуникации основного потока с горутинами. Пример:</p><ol><li data-list=\"bullet\" class=\"ql-indent-1\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Запросы по списку выполняются в горутинах.</li><li data-list=\"bullet\" class=\"ql-indent-1\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Печать результатов на экран происходит в основном потоке</li></ol><p><br></p><p>3. Модифицируйте программу таким образом, чтобы нигде не использовалась длина слайса урлов. Считайте, что урлы приходят из внешнего источника. Сколько их будет заранее - неизвестно. Предложите идиоматичный вариант, как ваша программа будет узнавать об окончании списка и передавать сигнал об окончании действий далее.</p><p>4. (необязательно, можно обсудить устно, чтобы убедиться, что кандидат понимает идею контекста, либо предложить как домашнее задание) Модифицируйте программу таким образом, что бы при получении 2 первых ответов с \"200 OK\" остальные запросы штатно прерывались.</p><p>При этом необходимо напечатать на экране сообщение о завершении запроса.</p><p>5. (необязательно, можно обсудить устно) Предложите отрефакторить код. Какие тесты кандидат написал бы к этому коду?</p><p>Предложите написать код теста и интерфейсы, для которых будут генериться моки. (Как показывает практика это самая сложная часть задачи)</p>",
        "time": 15,
        "title": "Интерактивная задача на кодинг, приближенный к условиям работы"
    },
    {
        "ID": 255,
        "additional": "<p>Q: На что влияет параметр вместимости слайса cap(acity)?</p><p>A: Cap — ключевой параметр для выделения памяти, влияет на производительность вставки в слайс: в случае, если вместимость на момент определения была задана недостаточной, вставка в слайс приведет к частому выделению памяти по мере добавления новых элементов. В идеале, capacity слайса в момент создания должна быть указана максимально близкой к плановому количеству элементов.</p><p><br></p><p>Q: Какие способы безопасного копирования слайсов вы знаете?</p><p>A: 1) Через функцию copy() 2) присвоить возвращаемое append() значение слайса новой переменной в случае добавления элемента при len == cap</p><p><br></p><p>Q: Как происходит выделение памяти при росте слайса через append? К каким негативным последствиям может неправильное понимание будущего размера слайса в момент его создания?</p><p>A: При размере слайса менее 1024 элементов размер памяти увеличивается вдвое. При размере среза &gt; 1024 элементов, срез увеличивается на четверть текущего размера. Операция вставки в слайс имеет серьезные последствия для памяти - при увеличении capacity массив будет скопирован в новый и размер выделенной памяти будет расти по своей внутренней логике, лишь отчасти связанной с требуемой емкостью.</p><p><br></p><p>Q: Когда сборщик мусора удалит массив под слайсом?</p><p>A: Массив будет удален только после того, как не остается ни одного слайса, который ссылается на элементы этого массива.</p><p><br></p><p>Q: Какие особенности получения нового среза от ранее существующего слайса вы знаете?</p><p>A: Слайсниг не производит копирование данных слайса. Создаётся новое значение слайса, указывающее на исходный массив.</p><p><br></p><p>Q: Чем опасно создание через make слайса с явно указанными len &amp; cap?</p><p>A: При создании слайса с указаной длиной и емкостью будет выделена память под емкость и при этом инициализированы значениями по умолчанию (для типа элементов слайса) len элементов массива. В дальнейшем они будут участвовать в итерировании и являться реальными значениями массива, которые могут внести искажение в данные.</p>",
        "answers": [
            {
                "content": "<p>Это абстракция, построенная на основе массива. Обобщенно, слайс это тип данных, построенный как обертка над массивом, представляющая собой часть массива от 0 до N элемента.</p><p>От массива слайс отличает следующее:</p><p><br></p><ol><li>это не массив, но структура, содержащая ссылку на часть массива;</li><li>может менять свой размер и динамически выделять память;</li></ol><p><br></p><p>Внутри слайс представляет собой структуру вида</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-built_in\">type</span> <span class=\"hljs-built_in\">slice</span> struct {<br/>    array unsafe.Pointer<br/>    <span class=\"hljs-built_in\">len</span>   intcap   <span class=\"hljs-built_in\">int</span><br/>}<br/><br/></pre><p>Где:</p><p><br></p><ul><li>len (length, длина) — текущая длина слайса</li><li>cap (capacity, вместимость) — длина внутреннего массива: размер массива под который выделена память</li><li>array - собственно ссылка на массив с данными</li></ul>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>Знает, особенности создания слайсы при использовании двух аргументов make.</p><p>Может рассказать о росте памяти при append.</p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 137,
                "title": "Go (теория)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:09:11Z",
        "interviewCount": 2581,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Что такое слайс? Как он устроен?</span></p>",
        "time": 5,
        "title": "Слайс"
    },
    {
        "ID": 258,
        "additional": "<p><span style=\"color: rgb(52, 73, 94);\">Q: Чем отличается RWMutex от Mutex? A: RWMutex нужен в том случае, если у нас есть потоки, которым нужен доступ на чтение ресурса, но не нужна запись. В этом случае читать может много потоков одновременно.</span></p><p><br></p><p><br></p>",
        "answers": [
            {
                "content": "<p>Это примитив синхронизации, который нужен для эксклюзивного доступа к какому-то ресурсу. Если другому потоку нужен доступ к ресурсу, то он блокируется до тех пор, пока другой поток не освободит блокировку.</p><p><br></p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>Кандидат может рассказать как устроен mutex \"под капотом\", знает про RWMutex и его разницу с Mutex.</p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 137,
                "title": "Go (теория)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:12:13Z",
        "interviewCount": 2567,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Что такое mutex и зачем он нужен?</span></p>",
        "time": 5,
        "title": "Мьютексы"
    },
    {
        "ID": 252,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">func isMonotonic(in []int) bool {<br/>    isUp, isDown := true, true<br/>    for i := 1; i &lt; len(s); i++ {<br/>        isDown = isDown &amp;&amp; s[i - 1] &gt;= s[i]<br/>        isUp = isUp &amp;&amp; s[i - 1] &lt;= s[i]<br/>    }<br/><br/>    return isUp || isDown<br/>}<br/><br/></pre><p><br></p>",
                "difficulty": "GRADE_SCREENING"
            }
        ],
        "blocks": [
            {
                "ID": 136,
                "title": "Скрининг"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:03:35Z",
        "interviewCount": 2514,
        "question": "<p>Является ли слайс монотонным?</p><p>Монотонная функция - функция одной переменной, определённая на некотором подмножестве действительных чисел, которая либо везде (на области своего определения) не убывает, либо везде не возрастает.</p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">    {<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">7</span>} - <span class=\"hljs-literal\">true</span>\n    {<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>} - <span class=\"hljs-literal\">true</span>\n    {<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>} - <span class=\"hljs-literal\">true</span>\n    {<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">1</span>} - <span class=\"hljs-literal\">true</span>\n    {<span class=\"hljs-number\">23</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">23</span>} - <span class=\"hljs-literal\">false</span>\n</pre>",
        "time": 10,
        "title": "Определить является ли слайс монотонным"
    },
    {
        "ID": 288,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Делал бы update батчами, с фильтром по индексируемым полям.</span></p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Из жизни — чаще всего надо поправить только ряды за сегодня, а на остальное забить, это сразу переводит задачу в класс более простых.</p><p>То есть есть какой-то соседний индекс коррелирующий с появлением испорченных записей, и по этому индексу можно радикально сократить кол-во перебираемых рядов.</p><p><br></p><p>Если же реально данные равномерно размазаны по всей таблице:</p><p><br></p><p>1) Если индекс, позволяющий найти нужны ряды есть — все проще, пишем код, который отдельно набирает ID рядов, где условие выполняется, потом накатываем изменения пачками с `where ID in(...)`.</p><p><br></p><p>2) Если индекса по нужному нам условию нет, и надо перебирать все поля</p><p><br></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>выбираем ID начиная от которого баг исправлен</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>далее пишем скрипт который читает кусками данные из <strong>слейва</strong> и сохраняет в файл ID рядов где надо менять данные</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>накатываем пачками на мастер по 1000-10 000 рядов, беря ID из файла</li></ol>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 139,
                "title": "Базы данных"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:43:05Z",
        "interviewCount": 2490,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Есть таблица на 1 миллиард записей, которая активно используется в продашкне. Нужно сделать датафикс, который модифицирует 10 миллионов строк. Как бы ты подошел к решению задачи?</span></p>",
        "time": 5,
        "title": "Задачка про датафикс"
    },
    {
        "ID": 266,
        "answers": [
            {
                "content": "<p>Выведется все элементы map'ы в виде [ключ, значение]</p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Элементы мапы будут выведены в случайном порядке. Это сделано специально, чтобы код не был завязан на конкретную реализацию мапы. Если важен порядок, то нужно использовать слайсы или массивы.</span></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 137,
                "title": "Go (теория)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:22:54Z",
        "interviewCount": 2441,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Что выведет данный код?</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">m := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-type\">int</span>{<span class=\"hljs-string\">\"a\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">\"b\"</span>:<span class=\"hljs-number\">2</span>,<span class=\"hljs-string\">\"c\"</span>:<span class=\"hljs-number\">3</span>}\n\n<span class=\"hljs-keyword\">for</span> a, b := <span class=\"hljs-keyword\">range</span> m {\n    fmt.Println(a, b)\n}\n\n</pre>",
        "time": 5,
        "title": "Maps"
    },
    {
        "ID": 296,
        "additional": "<h4><a href=\"http://platform.gp.o3.ru/committee/#/go/operations?id=%d0%94%d0%be%d0%bf%d0%be%d0%bb%d0%bd%d0%b8%d1%82%d0%b5%d0%bb%d1%8c%d0%bd%d1%8b%d0%b5-%d0%b2%d0%be%d0%bf%d1%80%d0%be%d1%81%d1%8b-1\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(52, 73, 94);\">Дополнительные вопросы:</a></h4><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Что делать, если я вызываю kill&nbsp;и процесс продолжает работает?</em></p><p>A: Отправить SIGKILL / -9.</p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Что такое&nbsp;</em><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\"><em>-9</em></code><em style=\"color: rgb(127, 140, 141);\">?</em></p><p>A: Сигнал, отправляемый процессу</p><p><br></p>",
        "answers": [
            {
                "content": "<p>Дан по крайней мере один из вариантов</p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">kill &lt;pid&gt; / kill -9 &lt;pid&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">killall &lt;proccess_name&gt;</div><div class=\"ql-code-block\" data-language=\"plain\">top # найти процесс, нажать k</div><div class=\"ql-code-block\" data-language=\"plain\">htop # найти процесс, нажать k</div></pre>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>Указаны способы нахождения pid процесса.</p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">ps aux и аналоги + grep</div><div class=\"ql-code-block\">top / htop</div></pre><p>Кандидат рассказал о сигналах и чем плох -9</p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 141,
                "title": "ОС, сети и эксплуатация"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:49:25Z",
        "interviewCount": 2243,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Как убить процесс linux'e?</span></p>",
        "time": 5,
        "title": "Как убить процесс linux'e?"
    },
    {
        "ID": 246,
        "answers": [
            {
                "content": "<p>Слабый ответ: выведет 116 (номер байта) и не заменит R, будет test.</p><p>Правильный: этот код не скомпилится вовсе.</p><p>Продвинутый: поменять этот код так, чтобы он менял байты и все же работал.</p>",
                "difficulty": "GRADE_SCREENING"
            }
        ],
        "blocks": [
            {
                "ID": 136,
                "title": "Скрининг"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T19:57:49Z",
        "interviewCount": 2239,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Что выведет программа?</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">s := \"test\"\nprintln(s[0]) // ответ кандидата\ns[0] = \"R\"\nprintln(s) // ответ кандидата\n</pre>",
        "time": 3,
        "title": "Задачка про строки"
    },
    {
        "ID": 298,
        "additional": "<p>Можно изучить логи микросервиса для поиска сообщений об ошибках. При помощи метрик можно получить более детальную информацию о состоянии сервиса, например нагрузке или времени ответа. При помощи профайлера можно исследовать используемые ресурсы, например cpu или память. При помощи трассировки можно изучать взаимосвязи в больших микросервисных системах и находить узкие места.</p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Пример инструментов для сбора и отображения метрик?</em></p><p>A: prometheus, grafana</p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Какая тулза используется для профилирования в go?</em></p><p>A: pprof</p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Зачем микросервису на go нужен хендлер /debug/vars?</em></p><p>A: Для выдачи отладочной информации (например об использовании памяти или gc)</p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Как посмотреть логи микросервиса живущего в kubernetes?</em></p><p>A: С помощью команды kubectl logs</p>",
        "answers": [
            {
                "content": "<p>Назвает логи, графики, говорит, что можно посмотреть информацию о загрузке CPU память на сервере, но без подробностей, назвает инфраструктурые средства мониторинга munin / zabbix</p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>Рассказывает про мониторинг, метрики, называет prometheus, grafana, может описать систему алертинга.</p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Знает подробности трейсинга и профилирования, может описать свой опыт решения практическиз хадач.</p>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 141,
                "title": "ОС, сети и эксплуатация"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:50:37Z",
        "interviewCount": 2229,
        "question": "<p>Какие существуют инструменты для мониторинга и отладки микросервисов?</p>",
        "time": 10,
        "title": "Мониторинг"
    },
    {
        "ID": 297,
        "additional": "<p>Красный флаг — если кандидат говорит \"ну это наверное какая-то перегрузка системы\"</p>",
        "answers": [
            {
                "content": "<p>Кандидат предположил, что это может быть из-за того, что используется несколько ядер. Может не знать нужно с этим что-то делать или нет.</p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Да, абсолютно реальная. Это означает, что процесс потребляет почти 1.5 ядра. При таких вводных нельзя сказать нужно ли что-то с этим делать или нет. В общем случае — это абсолютно нормально.</p>",
                "difficulty": "GRADE_19"
            },
            {
                "content": "<p>Кандидат знает про CFS, базово может рассказать про то как система распределяет процессорное время между тасками</p>",
                "difficulty": "GRADE_20"
            }
        ],
        "blocks": [
            {
                "ID": 141,
                "title": "ОС, сети и эксплуатация"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:50:01Z",
        "interviewCount": 2225,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Команда&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">top</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;показывает, что какой-то процесс потребляет 146% CPU. Это реальная ситуация? Если да, то нужно ли мне что-то с этим делать?</span></p>",
        "time": 5,
        "title": "CPU 146%"
    },
    {
        "ID": 276,
        "additional": "<p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Как можно было бы изменить программу чтобы дожидаться всех созданных горутин?</em></p><p>A: Например можно использовать sync.WaitGroup:</p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    wg := sync.WaitGroup{}\n    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++ {\n        wg.Add(<span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> {\n            <span class=\"hljs-keyword\">defer</span> wg.Done()\n            fmt.Println(i)\n        }()\n    }\n    wg.Wait()\n}\n</pre><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Как можно было бы изменить программу чтобы каждая горутина правильно выводила свой индекс?</em></p><p>A: Требуется использовать из горутины локальную копию i или явно передавать i в горутину как аргумент:</p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    <span class=\"hljs-keyword\">var</span> wg sync.WaitGroup\n\n    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++ {\n        wg.Add(<span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(k <span class=\"hljs-keyword\">int</span>)</span></span> {\n            <span class=\"hljs-keyword\">defer</span> wg.Done()\n            fmt.Println(k)\n        }(i)\n    }\n\n    wg.Wait()\n}\n</pre>",
        "answers": [
            {
                "content": "<p>Поведение не определено - скорее всего ничего не будет выведено на экран поскольку программа завершится не дождавшись горутин. Также в программе есть вторая проблема - даже если дождаться всех горутин на экран скорее всего будет выведено одно и то же число поскольку все горутины используют одну и ту же переменную i (исправлено в go 1.22 и выше)</p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>Знает, что с go 1.22 проблема переменной уже не актуальна.</p><p>Решил через sync.WaitGroup</p><p>Предпочтительны решения с использованием defer</p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 138,
                "title": "Go (практика)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:30:05Z",
        "interviewCount": 2142,
        "question": "<p>Что выведет на экран эта программа?</p><p><br></p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">func main() {</div><div class=\"ql-code-block\" data-language=\"plain\">    for i := 0; i &lt; 5; i++ {</div><div class=\"ql-code-block\" data-language=\"plain\">        go func() {</div><div class=\"ql-code-block\" data-language=\"plain\">            fmt.Println(i)</div><div class=\"ql-code-block\" data-language=\"plain\">        }()</div><div class=\"ql-code-block\" data-language=\"plain\">    }</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div></pre>",
        "time": 5,
        "title": "Ожидание завершения горутин"
    },
    {
        "ID": 273,
        "answers": [
            {
                "content": "<p>Это вопрос на написание кода, который потом будет приложен к протоколу собеседования.</p><p>Пример реализации:</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">merge</span><span class=\"hljs-params\">(cs ...&lt;-<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">int</span>)</span> &lt;-<span class=\"hljs-title\">chan</span> <span class=\"hljs-title\">int</span></span> {<br/>    <span class=\"hljs-keyword\">var</span> wg sync.WaitGroup<br/>    out := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">int</span>)<br/><br/>    <span class=\"hljs-comment\">// Start an output goroutine for each input channel in cs.  output</span><br/>    <span class=\"hljs-comment\">// copies values from c to out until c is closed, then calls wg.Done.</span><br/>    output := <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c &lt;-<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">int</span>)</span></span> {<br/>        <span class=\"hljs-keyword\">for</span> n := <span class=\"hljs-keyword\">range</span> c {<br/>            out &lt;- n<br/>        }<br/>        wg.Done()<br/>    }<br/>    wg.Add(<span class=\"hljs-built_in\">len</span>(cs))<br/>    <span class=\"hljs-keyword\">for</span> _, c := <span class=\"hljs-keyword\">range</span> cs {<br/>        <span class=\"hljs-keyword\">go</span> output(c)<br/>    }<br/><br/>    <span class=\"hljs-comment\">// Start a goroutine to close out once all the output goroutines are</span><br/>    <span class=\"hljs-comment\">// done.  This must start after the wg.Add call.</span><br/>    <span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> {<br/>        wg.Wait()<br/>        <span class=\"hljs-built_in\">close</span>(out)<br/>    }()<br/>    <span class=\"hljs-keyword\">return</span> out<br/>}<br/></pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 138,
                "title": "Go (практика)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:28:06Z",
        "interviewCount": 2101,
        "question": "<p>Написать код функции, которая делает merge N каналов. Весь входной поток перенаправляется в один канал.</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">func merge(cs ...&lt;-chan int) &lt;-chan int {\n    ...\n}\n</pre>",
        "time": 10,
        "title": "Merge каналов"
    },
    {
        "ID": 248,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">6<br/></pre>"
            }
        ],
        "blocks": [
            {
                "ID": 136,
                "title": "Скрининг"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T19:59:28Z",
        "interviewCount": 2079,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Что выведет программа? Почему?</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    timeStart := time.Now()\n    _, _ = &lt;-worker(), &lt;-worker()\n    <span class=\"hljs-built_in\">println</span>(<span class=\"hljs-keyword\">int</span>(time.Since(timeStart).Seconds()))\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">worker</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">chan</span> <span class=\"hljs-title\">int</span></span> {\n    ch := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">int</span>)\n    <span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> {\n        time.Sleep(<span class=\"hljs-number\">3</span> * time.Second)\n        ch &lt;- <span class=\"hljs-number\">1</span>\n    }()\n    <span class=\"hljs-keyword\">return</span> ch\n}\n</pre>",
        "title": "Задачка про слайсы 3"
    },
    {
        "ID": 250,
        "additional": "<p>Q: Реализовать версию функции zip которая сможет соединять произвольное количество слайсов</p><p><span style=\"color: rgb(52, 73, 94);\">A:</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">func zip(s ...[]int) [][]int {\n\n    if len(s) == 0 {\n        return [][]int{}\n    }\n\n    minLen := len(s[0])\n    for i := 1; i &lt; len(s); i++ {\n        if len(s[i]) &lt; minLen {\n            minLen = len(s[i])\n        }\n    }\n\n    res := make([][]int, 0, minLen)\n    for i := 0; i &lt; minLen; i++ {\n        x := make([]int, 0, len(s))\n        for k := 0; k &lt; len(s); k++ {\n            x = append(x, s[k][i])\n        }\n        res = append(res, x)\n    }\n\n    return res\n}\n\n\n</pre>",
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">func zip(s1 []int, s2 []int) [][]int {<br/><br/>    minLen := len(s1)<br/>    if len(s2) &lt; minLen {<br/>        minLen = len(s2)<br/>    }<br/><br/>    res := make([][]int, 0, minLen)<br/>    for i := 0; i &lt; minLen; i++ {<br/>        res = append(res, []int{s1[i], s2[i]})<br/>    }<br/><br/>    return res<br/>}<br/><br/></pre><p><br></p>"
            }
        ],
        "blocks": [
            {
                "ID": 136,
                "title": "Скрининг"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:01:38Z",
        "interviewCount": 1901,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Требуется реализовать функцию zip, которая соединяет элементы двух слайсов в слайс пар</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">func main() {\n    s1, s2 := []int{1, 2, 3}, []int{4, 5, 6, 7, 8}\n    fmt.Println(zip(s1, s2)) // [[1 4] [2 5] [3 6]]\n}\n\nfunc zip(s1 []int, s2 []int) [][]int {\n    //...\n}\n\n</pre><p><br></p>",
        "title": "Функция zip"
    },
    {
        "ID": 261,
        "answers": [
            {
                "content": "<p>Defer гарантирует отложенный вызов функциии по мере выполнения программы. Defer добавляет функцию в стек вызова приложения.</p><p>В первом случае ответ:&nbsp;<code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">123</code>, во втором -&nbsp;<code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">456</code>&nbsp;(передача по ссылке)</p><p><br></p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Что произойдет, если писать несколько defer подряд?</em></p><p>A: Они вызовутся в обратном порядке, так как это стек вызова функций.</p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Q:&nbsp;В каких случаях defer вызван не будет?</p><p>A: os.Exit(), log.Fatal (внутри вызывает os.Exit)</p>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 137,
                "title": "Go (теория)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:15:20Z",
        "interviewCount": 1816,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Что такое defer? Что выведет следующий код?</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">type</span> X <span class=\"hljs-keyword\">struct</span> {\n    V <span class=\"hljs-keyword\">int</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(x X)</span> <span class=\"hljs-title\">S</span><span class=\"hljs-params\">()</span></span> {\n    fmt.Println(x.V)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    x := X{<span class=\"hljs-number\">123</span>}\n    <span class=\"hljs-keyword\">defer</span> x.S()\n    x.V = <span class=\"hljs-number\">456</span>\n}\n\n</pre><p><span style=\"color: rgb(52, 73, 94);\">После ответа - спросить, что изменится, если изменить код</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">...\nfunc main() {\n    x := X{123}\n    defer func(){ x.S() }()\n    x.V = 456\n}\n...\n\n</pre><p><br></p>",
        "time": 5,
        "title": "Defer"
    },
    {
        "ID": 256,
        "additional": "<p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Какие знаешь средства для предотвращения RC</em></p><p>A: Например mutex (может свой вариант сделать )</p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">какие mutex бывают и чем отличаются для чего нужны?</em></p><p>A: Бывают полностью блокирующие или блокировка только на запись (RWMutex)</p><p><br></p>",
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Можно, нужно учесть race condition (mutex) Что будет - будет панинка&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">concurrent map writes</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;(при условии GOMAXPROCS != 1) </span></p><p><span style=\"color: rgb(52, 73, 94);\">Решение:</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">x := make(map[int]int, 1)<br/>lock := sync.RWMutex{}<br/>go func() {<br/>    lock.Lock()<br/>    x[1] = 2<br/>    lock.Unlock()<br/>}()<br/><br/>go func() {<br/>    lock.Lock()<br/>    x[1] = 7<br/>    lock.Unlock()<br/>}()<br/><br/>go func() {<br/>    lock.Lock()<br/>    x[1] = 11<br/>    lock.Unlock()<br/>}()<br/><br/>time.Sleep(100 * time.Millisecond)<br/>fmt.Println(\"x[1] =\", x[1])<br/><br/></pre><p><br></p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Может продемонстрировать решение без sync.Mutex/sync.RWMutex</p>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 137,
                "title": "Go (теория)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:10:03Z",
        "interviewCount": 1626,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Можно ли передать переменную в несколько горутин? Пример (с ошибкой) - что будет?</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">x := make(map[int]int, 1)\ngo func() { x[1] = 2 }()\ngo func() { x[1] = 7 }()\ngo func() { x[1] = 10 }()\ntime.Sleep(100 * time.Millisecond)\nfmt.Println(\"x[1] =\", x[1])\n\n</pre><p><br></p>",
        "time": 5,
        "title": "Race condition"
    },
    {
        "ID": 254,
        "additional": "<p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Чем отличается байт от руны в Go?</em></p><p>A: Руны это тип в GO, int32, предназначен для представления Unicode и символов для кодирования которых нужно 32 бита</p>",
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">В Go строкой является срез (slice) байтов, который доступен только для чтения.</span></p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>Кандидат знает, как иттерироваться посимольно (рунами) по строке, знает как подсчитать количество рун в строке.</p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 137,
                "title": "Go (теория)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:06:50Z",
        "interviewCount": 1595,
        "question": "<p>Что из себя представляет строка в Go?</p>",
        "time": 5,
        "title": "Строка в Go"
    },
    {
        "ID": 292,
        "additional": "<ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Приходилось ли делать балансировку или работать с ней? Если да, какую, в чём были нюансы?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">С какими проблемами придётся столкнуться в распределённых вычислениях?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">А: от гонки до артефактов баз данных и проблем синхронизации</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">При шардировании базы \"читаем с slave, пишем в мастер\". Это делается в рамках обработки одного запроса?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">А: нет, иначе будет рассинхрон. Команды для master, запросы в slave.</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Приходилось ли работать с \"липкими сессиями\"? Как они делаются?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">A: клиентские запросы с помощью балансировщика отправляются в один и тот же инстанс. Это позволяет избавиться от проблем с синхронизацией в рамках сессии пользователя.</span></li></ol>",
        "answers": [
            {
                "content": "<p><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">Кандидат предложил:</span></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">клиентскую/серверную балансировку.</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">горизонтальное/вертикальное масштабирование;</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">\"оптимизировать\" или \"порефакторить\".</span></li></ol>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">Кандидат предложил:</span></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">добавить асинхронную обработку процессов, не влияющих на бизнесовый ответ сервиса, вне запроса клиента;</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">добавить параллельность вычислений там, где это возможно;</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">посмотреть по коду \"узкие места\" для улучшения производительности;</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">добавить кэш;</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">посмотреть долгие запросы - попробовать накинуть индексы.</span></li></ol><p><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">Кандидат знает:</span></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">варианты решений для балансировки: nginx, службы Kubernetes или иные решения.</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">возможность шардирования базы. Плюсы и минусы;</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">наличие explain операции в PSQL;</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">как обойти проблемы с гонкой за общие ресурсы у инстансов.</span></li></ol>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">Кандидат предложил:</span></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">оптимизировать хранение:</span></li><li data-list=\"bullet\" class=\"ql-indent-1\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">запросить у PSQL долгие запросы;</span></li><li data-list=\"bullet\" class=\"ql-indent-1\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">проверить долгие запросы через EXPLAIN;</span></li><li data-list=\"bullet\" class=\"ql-indent-1\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">добавить/изменить индексы (понимает, что это, зачем, и какие +/-);</span></li><li data-list=\"bullet\" class=\"ql-indent-1\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">провести нормализацию/денормализацию данных.</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">оптимизировать или сделать асинхронными in/out операции;</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">пройти профилировщиком по коду, посмотреть, какие операции задерживаются от блокировок или ожидания I/O.</span></li></ol><p><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">Кандидат имеет опыт балансировки.</span></p>",
                "difficulty": "GRADE_19"
            },
            {
                "content": "<p><span style=\"background-color: rgb(255, 255, 255); color: rgb(52, 73, 94);\">Кандидат предложил:</span></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">присмотреться к архитектуре приложения. Возможно, оно реализует бизнес процессы далеко не лучшим способом;</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">проверить технологический стек. Возможно, можно перейти на более удачные готовые решения.</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Может привести примеры из практики. (Например, замена API c JSON на gRPC, замена модулей с Питона на C или Go и т.п.)</span></li></ol>",
                "difficulty": "GRADE_20"
            }
        ],
        "blocks": [
            {
                "ID": 140,
                "title": "Архитектура"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:46:02Z",
        "interviewCount": 1578,
        "question": "<p><span style=\"color: rgb(52, 73, 94); background-color: rgb(255, 255, 255);\">Есть два сервиса A и B. Сервис А - внешний и влиять на него мы не можем. Сервис В находится полностью в вашей ответственности. Бизнесовая читающая/пишущая нагрузка на ваш сервис начинает расти по ходу роста бизнеса.</span></p><p><br></p><p><span style=\"color: rgb(52, 73, 94); background-color: rgb(255, 255, 255);\">Какие существуют варианты/направления для масштабирования, балансировки и оптимизации сервиса B? Можно использовать любые технологии.</span></p>",
        "time": 10,
        "title": "Scaling"
    },
    {
        "ID": 264,
        "additional": "<p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Что такое \"пустой интерфейс\" (interface{})?</em></p><p>A: Пустой интерфейсный тип не описывает методы. Любой объект удовлетворяет пустому интерфейсу.</p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Когда допустимо применять пустой интерфейс?</em></p><p>A: В случае реализации кода, который должен уметь работать с любым типом данных. Например, функция fmt.Print стандартной библиотеки.</p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Каковы основные отличия применения интерфейса в Go от интерфейсов классического ООП-языка (Java, C#, etc)?</em></p><p>A: Разница в том, что обычно в ООП-языках имплементация интерфейса указывается для класса явно, в Go имплементация неявная (duck typing).</p>",
        "answers": [
            {
                "content": "<p>Интерфейс в Go — это абстракция поведения других типов: определение, описывающее конкретные методы, которые должны быть у какого-то другого типа. В этом случае можно утверждать, что \"тип удовлетворяет интерфейсу\".</p><p>Интерфейсы позволяют определить обобщенную реализацию без привязки к конкретному типу.</p><p>Когда в Go объявление (переменной, параметра функции или поля структуры) имеет интерфейсный тип, можно использовать объект любого типа, пока он удовлетворяет интерфейсу в объявлении.</p><p><br></p><p>Рассказал что такое duck-typing.</p><p><br></p><p>Может назвать несколько интерфейсов из stdlib: error, io.Writer, io.Reader, context.Context, stringer, etc</p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>Ответил на вопросы из примера кода.</p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 137,
                "title": "Go (теория)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:18:00Z",
        "interviewCount": 1575,
        "question": "<ol><li><span style=\"color: rgb(52, 73, 94);\">Что такое интерфейс в Go? Как он устроен?</span></li></ol><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">type</span> Foo <span class=\"hljs-keyword\">struct</span>{}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(f *Foo)</span></span> A() {}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(f *Foo)</span></span> B() {}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(f *Foo)</span></span> C() {}\n\n<span class=\"hljs-keyword\">type</span> AB <span class=\"hljs-keyword\">interface</span> {\n\tA()\n\tB()\n}\n\n<span class=\"hljs-keyword\">type</span> BC <span class=\"hljs-keyword\">interface</span> {\n\tB()\n\tC()\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\t<span class=\"hljs-keyword\">var</span> f AB = &amp;Foo{}\n\ty := f.(BC) <span class=\"hljs-comment\">// сработает ли такой type-assertion?</span>\n    y.A() <span class=\"hljs-comment\">// а этот вызов?﻿</span>\n\t_ = y\n    \n}\n</pre><p><br></p>",
        "time": 10,
        "title": "Интерфейсы"
    },
    {
        "ID": 291,
        "additional": "<ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Обязательно ли делать REST поверх HTTP?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">А: нет, рест это архитектурный подход к организации интерфейса API. Он может быть сделан с чем угодно.</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Без чего не может существовать REST?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">А: без сущности, которой мы управляем;</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Зачем появился RPC, если уже был REST? Какую проблему решает RPC?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">A: REST требовал сущность и был крайне ограничен в логике, которую можно выполнить в одном запросе. А RPC - нет, это развитие \"монолитных\" вычислений в распределённое будущее.</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Можно ли сказать, что REST включает в себя RPC, или наоборот? Почему?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">А: RPC включает в себя REST целиком, так как это просто набор из 4 методов;</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">С какой задачей не справится REST в один запрос, но справится RPC?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">A: Например - если хватает денег на счёте, сделать заказ, иначе - зарезервировать товар. Почему - две разные сущности не могут участвовать в одной операции.</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Какие принципиальные проблемы есть в REST? Что такое RESTful API?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">A: нет чёткого определения RESTful API. Методы обычно используются \"по наитию\" разработчиков, как и коды ошибок. Нет чётких строгих общих договорённостей.</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">(Интересно глянуть:&nbsp;</span><span style=\"background-color: rgb(255, 255, 255); color: rgb(0, 82, 204);\"><a href=\"https://habr.com/ru/articles/265845/\" rel=\"noopener noreferrer\" target=\"_blank\">https://habr.com/ru/articles/265845/</a></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">)</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Какой подход выбрали бы Вы при построении API? Почему? Расскажите о своём опыте проектирования.</span></li></ol><p><br></p>",
        "answers": [
            {
                "content": "<p><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Знает определения. Может объяснить, в чём разница.</span></p><p><br></p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Понимает в чём разница между \"управлением состоянием\" и \"вызовом процедур\". Может оперировать концепциями и приводить примеры из практики.</span></p><p><br></p><p>REST строится вокруг ресурсов и операций (GET, PUT, DELETE и т.д.)</p><p>RPC - вызов методов сервиса</p><p><br></p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Знает архитектурные проблемы, связанные с плохой совместимостью \"чистой слоёной архитектуры\" и REST: сущности сокрыты юзер кейсами.</span></p>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 140,
                "title": "Архитектура"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:45:25Z",
        "interviewCount": 1572,
        "question": "<p><span style=\"color: rgb(23, 43, 77); background-color: rgb(255, 255, 255);\">В чём разница между REST и RPC подходами? Что это вообще такое?</span></p><p><br></p>",
        "time": 5,
        "title": "REST / RPC"
    },
    {
        "ID": 271,
        "answers": [
            {
                "content": "<p>Это вопрос на знание типа error и понимание основ работы с ошибками. error является интерфейсом, чтобы решить задачу требуется создать свою структуру реализующую этот интерфейс и вернуть из функции экземпляр структуры:</p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    println(handle())\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">handle</span><span class=\"hljs-params\">()</span></span> <span class=\"hljs-type\">error</span> {\n    <span class=\"hljs-keyword\">return</span> &amp;customError{}\n}\n\n<span class=\"hljs-keyword\">type</span> customError <span class=\"hljs-keyword\">struct</span> {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(e *customError)</span></span> Error() <span class=\"hljs-type\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Custom error!\"</span>\n}\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 138,
                "title": "Go (практика)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:27:05Z",
        "interviewCount": 1481,
        "question": "<p>Напишите функцию которая бы возвращала ошибку не импортируя для этого никаких пакетов:</p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    println(handle())\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">handle</span><span class=\"hljs-params\">()</span></span> <span class=\"hljs-type\">error</span> {\n    <span class=\"hljs-comment\">//...</span>\n}\n\n</pre>",
        "time": 3,
        "title": "Пользовательский тип ошибки"
    },
    {
        "ID": 293,
        "additional": "<ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Какие варианты ограничений нагрузки вы знаете?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Можете ли объяснить, как реализовать&nbsp;</span><span style=\"background-color: rgb(255, 255, 255); color: rgb(12, 13, 14);\">throttling в одном инстансе</span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">А: Делаем \"</span><strong style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Семафор</strong><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">\". Заводим обёртку со счётчиком, go-рутины с таймаутом конкурируют за счётчик, пытаясь его увеличить. Ежесекундно обслуживающая горутина уменьшает счётчик на допустимый RPS.</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Что изменится при реализации для нескольких инстансов?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">A: То же, но счётчик находится в удалённом хранилище. Например в Redis, PSQL или ином.</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Какие проблемы могут возникнуть? Как их обойти?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Например - приложение взяло захват и упало. Проблема ли это вообще?</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"background-color: rgb(255, 255, 255); color: rgb(23, 43, 77);\">Например - что делать, если мы не успеваем критически (большой % отказов)?</span></li></ol><p><br></p>",
        "answers": [
            {
                "content": "<p>Есть два основных варианта решения этой задачи:</p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"color: rgb(44, 62, 80);\">С использованием внешнего хранилища</span>. Например, мы можем использовать redis для этой задачи, в котором храним в счетчике кол-во запросов за нужное окно.</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"color: rgb(44, 62, 80);\">Без использования внешнего хранилища</span>. Каждый инстанс имеет ограничение x / n , где x - общее количество запросов, а n - количество инстансов.</li></ol><p><br></p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Какие есть плюсы и минусы у одной/обоих схем?</em></p><p>A: <strong>внешнее хранилище</strong>.</p><p>плюсы:</p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>простая реализация и конфигурация</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>не имеет значения насколько сбалансированы запросы по инстансам сервиса минусы:</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>увеличение времени запроса</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>единая точка отказа</li></ol><p><strong>без внешнего хранилища</strong>.</p><p>плюсы:</p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>нет единой точки отказа</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>нету дополнительных задержек</li></ol><p>минусы:</p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>сложно конфигурировать</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>балансировка запросов имеет большое значение</li></ol><p><br></p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Может предложить 2 варианта: распределенно и как решить централизовано. Может рассказать плюсы и минусы обоих вариантов.</p>",
                "difficulty": "GRADE_19"
            },
            {
                "content": "<p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Как можно оптимизировать работу с redis'ом?</em></p><p>A: Использовать lua и сделать процедуру, которая будет возвращать true/false.</p><p><br></p><p><br></p><p><span style=\"color: rgb(52, 73, 94); background-color: rgb(255, 255, 255);\">Предложено \"динамическое\" управление нагрузкой, чтобы не \"накапливалась очередь\" для рутинных/фоновых задач.</span></p><p><span style=\"color: rgb(23, 43, 77); background-color: rgb(255, 255, 255);\">Кандидат может обозначить и объяснить проблемы, возникающие при таком подходе:</span></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"color: rgb(23, 43, 77); background-color: rgb(255, 255, 255);\">необходимость приоретизации;</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"color: rgb(23, 43, 77); background-color: rgb(255, 255, 255);\">существенное замедление сервиса;</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><span style=\"color: rgb(23, 43, 77); background-color: rgb(255, 255, 255);\">отдельное проектирование и администрирование асинхронных процессов, использующих адаптер.</span></li></ol><p><br></p>",
                "difficulty": "GRADE_20"
            }
        ],
        "blocks": [
            {
                "ID": 140,
                "title": "Архитектура"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:46:47Z",
        "interviewCount": 1368,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Мой сервис используют внешний API для построения маршрутов, в рамках тарифа у нас есть ограничение по RPS. Нужно спроектировать ratelimiter.</span></p>",
        "time": 5,
        "title": "Rate limit"
    },
    {
        "ID": 260,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Одинаковые адреса и одинаковые значения</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">5<br/>5<br/>5<br/>5<br/>5<br/></pre><p><span style=\"color: rgb(52, 73, 94);\">Исправить:</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {<br/>    values := []<span class=\"hljs-keyword\">int</span>{<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>}<br/>    <span class=\"hljs-keyword\">for</span> _, val := <span class=\"hljs-keyword\">range</span> values {<br/>        val := val <span class=\"hljs-comment\">// Копируем переменную</span><br/>        <span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> {<br/>            fmt.Println(val)<br/>        }()<br/>    }<br/>    time.Sleep(<span class=\"hljs-number\">100</span> * time.Millisecond)<br/>}<br/></pre><p><br></p><p>или</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">func main() {<br/>    values := []int{1,2,3,4,5}<br/>    for _, val := range values {<br/>        go func(val int) {<br/>            fmt.Println(val)<br/>        }(val)<br/>    }<br/>    time.Sleep(100 * time.Millisecond)<br/>}<br/><br/></pre><p><br></p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>Смог решить без использования time.Sleep.</p><p>Знает, что начиная с go 1.22 были изменены правила определения области видимости для переменных в циклах.</p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 137,
                "title": "Go (теория)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:14:28Z",
        "interviewCount": 1257,
        "question": "<p>Что выведет данный код?</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    values := []<span class=\"hljs-keyword\">int</span>{<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>}\n    <span class=\"hljs-keyword\">for</span> _, val := <span class=\"hljs-keyword\">range</span> values {\n        <span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> {\n            fmt.Println(val)\n        }()\n    }\n    time.Sleep(<span class=\"hljs-number\">100</span> * time.Millisecond)\n}\n\n</pre><p>После ответа - как исправить?</p>",
        "time": 5,
        "title": "Итерационные переменные"
    },
    {
        "ID": 2174,
        "answers": [
            {
                "content": "<p>1) 1 2 4</p><p>2) 1 2 4</p><p><br></p><p>Расскажет про правила работы append </p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>Расскажет про синтаксис [0:2:2]</p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 136,
                "title": "Скрининг"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2023-11-21T09:14:31Z",
        "interviewCount": 1216,
        "question": "<p>Что выведет данная программа. Почему так ?</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tnums := []<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>}\n\n\taddNum(nums[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">2</span>])\n\tfmt.Println(nums) <span class=\"hljs-comment\">// ?</span>\n\n\taddNums(nums[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">2</span>])\n\tfmt.Println(nums) <span class=\"hljs-comment\">// ?</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addNum</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> {\n\tnums = <span class=\"hljs-built_in\">append</span>(nums, <span class=\"hljs-number\">4</span>)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addNums</span><span class=\"hljs-params\">(nums []<span class=\"hljs-type\">int</span>)</span></span> {\n\tnums = <span class=\"hljs-built_in\">append</span>(nums, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>)\n}\n</pre>",
        "time": 5,
        "title": "Работа с слайсами"
    },
    {
        "ID": 272,
        "answers": [
            {
                "content": "<p>В программе содержится ошибка, она сначала выведет числа от 0 до 4, а потом упадет с сообщением \"all goroutines are asleep - deadlock!\". Чтобы починить программу надо в конце горутины закрывать канал:</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {<br/><br/>    ch := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">int</span>)<br/><br/>    <span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> {<br/>        <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++ {<br/>            ch &lt;- i<br/>        }<br/>        <span class=\"hljs-built_in\">close</span>(ch)  <span class=\"hljs-comment\">// &lt;&lt;&lt;</span><br/>    }()<br/><br/>    <span class=\"hljs-keyword\">for</span> n := <span class=\"hljs-keyword\">range</span> ch {<br/>        fmt.Println(n)<br/>    }<br/><br/></pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 138,
                "title": "Go (практика)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:27:37Z",
        "interviewCount": 1137,
        "question": "<p>Что выведет данная программа? Она отработает корректно?</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">func main() {\n\n    ch := make(chan int)\n\n    go func() {\n        for i := 0; i &lt; 5; i++ {\n            ch &lt;- i\n        }\n    }()\n\n    for n := range ch {\n        fmt.Println(n)\n    }\n}\n</pre>",
        "time": 5,
        "title": "Закрытие канала"
    },
    {
        "ID": 282,
        "additional": "<p>Q: Что произойдет если нарушить CHECK?</p><p>A: Ошибка модификации данных на уровне самой базы данных и rollback транзакции</p><p><br></p><p>Q: Можно ли как-то визуально улучшить сообщения об ошибках нарушения ограничения CHECK средствами БД?</p><p>A: Можно задать ограничению отдельное имя - в этом случае при ошибке будет возвращено имя нарушенного ограничения.</p><p><br></p><p>Q: Может ли ограничение CHECK или UNIQUE работать на всю таблицу целиком? Если да, приведите пример.</p><p>A: CHECK (так же как и UNIQUE) может ссылаться на несколько столбцов, в этом случае ограничение проверяет данные всех включенных столбцов при модификации:</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">CREATE TABLE <span class=\"hljs-title function_\">TEST_TABLE</span> <span class=\"hljs-params\">(\n    A bigint, \n    B bigint, \n    C bigint, \n    CHECK(A - B &gt;= C)</span>,\n    UNIQUE (b, c)\n                        );\n</pre><p><br></p><p>Q: Что такое значение NULL?</p><p>A: Это указатель на отсутствие реального значения поля таблицы.</p><p><br></p><p>Q: Допустим мы создаем таблицу:</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">CREATE TABLE TEST_TABLE (\n    A serial, \n    B bigint, \n    C bigint);\n</pre><p>и выполняем команду на вставку строки:</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\">insert <span class=\"hljs-keyword\">into</span> <span class=\"hljs-title\">test_table</span>(<span class=\"hljs-params\">b</span>) <span class=\"hljs-title\">values</span> (<span class=\"hljs-params\"><span class=\"hljs-number\">5</span></span>)</span>;\n</pre><p>Что вернет следующий запрос?</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">select</span> b - c <span class=\"hljs-keyword\">as</span> delta <span class=\"hljs-keyword\">from</span> test_table;\n</pre><p>A: Запрос вернет NULL: недопустимо осуществлять операции сравнения или арифметические с столбцами, где разрешено хранить NULL без обертки такого столбца в COALESCE или аналогичную по назначению функцию. Автоматического преобразования к значению по умолчанию базового типа данных столбца не происходит.</p><p><br></p><p>Q: (На внимательность) Допустим мы создаем таблицу:</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">CREATE TABLE TEST_TABLE (\n    A serial, \n    B bigint, \n    C bigint,\n    PRIMARY KEY (a, c));\n</pre><p>и выполняем команду на вставку строки:</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\">insert <span class=\"hljs-keyword\">into</span> <span class=\"hljs-title\">test_table</span>(<span class=\"hljs-params\">b</span>) <span class=\"hljs-title\">values</span> (<span class=\"hljs-params\"><span class=\"hljs-number\">5</span></span>)</span>;\n</pre><p>что вернет следующий запрос?</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">select</span> b - COALESCE(c, <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">as</span> delta <span class=\"hljs-keyword\">from</span> test_table;\n</pre><p>A: Ничего не вернет, так как команда insert не отработает - будет ошибка нарушения первичного ключа: для данных в ключе недопустимы NULL-ы</p><p><br></p><p>Q: Что происходит с таблицей при добавлении первичного ключа?</p><p>A: Автоматически создаётся уникальный индекс (B-дерево) для столбца (или группы столбцов), перечисленных в первичном ключе, и данные столбцы помечаются как NOT NULL</p><p><br></p><p>Q: Для чего нужны FOREIGN KEY?</p><p>A: Для поддержания ссылочной целостности данных средствами самой базы данных.</p><p><br></p><p>Q: Допустим мы имеем базу данных из следующих таблиц</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">CREATE TABLE products (\n    product_no <span class=\"hljs-keyword\">integer</span> PRIMARY KEY,\n    name text,\n    price numeric\n);\n\nCREATE TABLE orders (\n    order_id <span class=\"hljs-keyword\">integer</span> PRIMARY KEY,\n    shipping_address text\n);\n\nCREATE TABLE order_items (\n    product_no <span class=\"hljs-keyword\">integer</span> REFERENCES products,\n    order_id <span class=\"hljs-keyword\">integer</span> REFERENCES orders,\n    quantity <span class=\"hljs-keyword\">integer</span>,\n    PRIMARY KEY (product_no, order_id)\n);\n</pre><p>Как сделать так, чтобы</p><p><br></p><p><br></p><ul><li>при удалении записи из таблицы products гарантированно не удалялись все записи из таблицы order_items с тем же продуктом?</li><li>при удалении из таблицы заказов автоматически удалялись все записи этого заказа из order_items?</li></ul><p>A: Модифицировать таблицу order_items следующим образом:</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">CREATE TABLE order_items (\n    product_no <span class=\"hljs-keyword\">integer</span> REFERENCES products ON DELETE RESTRICT,\n    order_id <span class=\"hljs-keyword\">integer</span> REFERENCES orders ON DELETE CASCADE,\n    quantity <span class=\"hljs-keyword\">integer</span>,\nPRIMARY KEY (product_no, order_id)\n);\n</pre><p><br></p><p>Q: Приведите плюсы и минусы практики применения FOREIGN KEY</p><p>A:</p><p>Плюсы: гарантированный контроль целостности данных на уровне базы данных без лишних усилий.</p><p>Минусы:</p><p><br></p><p><br></p><ul><li>возможно поймать неожиданное поведение RESTRICT / CASCADE и потерять данные либо привести к ситуации когда при кажущейся целостности базы будут сломаны контроли данных на уровне приложения вплоть до полной неработоспособности</li><li>сложности в модификации схем данных при работе с шардами баз</li><li>(самое важное что хотелось бы услышать) Для нагруженных приложений будут вызываться каскадные блокировки страниц данных всех связанных ключами таблиц, что скажется на производительности базы данных и времени отклика модифицирующих запросов. Так же, это приведет к сложностям при массовых манипуляциях с данными вплоть до полной потери производительноти до тех пор, пока не будет завершена большая модифицирующая транзакция. Большие риски поймать deadlock-и</li></ul>",
        "answers": [
            {
                "content": "<p>Для реляционных баз данных существуют следующие общие constraint-ы:</p><p><br></p><p><br></p><ul><li>Ограничения-проверки (CHECK): наиболее общий тип ограничений, предназначен для контроля задаваемого полю таблицы значения заданному в выражении условию;</li><li>NOT NULL: указывает, что столбцу нельзя присваивать значение NULL;</li><li>Ограничения уникальности (UNIQUE): гарантируют, что данные в определённом столбце или группе столбцов уникальны среди всех строк таблицы;</li><li>Первичные ключи (PRIMARY KEY): означает, что образующий ограничение столбец (или группа столбцов) может быть уникальным идентификатором строк в таблице;</li><li>Внешние ключи (FOREIGN KEY): указывает, что значения столбца (или группы столбцов) должны соответствовать значениям в некоторой строке другой таблицы</li><li>*Ограничения-исключения (Postgres) (EXCLUDE): гарантирует, что при сравнении любых двух строк по указанным столбцам или выражениям с помощью заданных операторов, минимум одно из этих сравнений возвратит false или NULL</li></ul>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 139,
                "title": "Базы данных"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:40:02Z",
        "interviewCount": 1106,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Какие существуют общие типы ограничений (constraint) в реляционных базах данных? Расскажите кратко о назначении каждого ограничения.</span></p>",
        "time": 5,
        "title": "Constraint"
    },
    {
        "ID": 287,
        "answers": [
            {
                "content": "<p>Лок на таблицу, лок на запись, пользовательские (рекомендательные) локи.</p><p>Далее важно, чтобы человек порассуждал на тему что это за локи, как они конфликтуют между собой.</p><p>Локи на таблицу могут брать стандартные команды SQL (Update, Delete, Select, Alter table...) Например:SELECT берет лок на таблицу типа ACCESS SHARE, который конфликтует, например, с самым строгим ACCESS EXCLUSIVE.</p><p>Локи на строчки в таблице берут стандартные команды SQL, которые меняют данные у каких-либо записей. Например, есть тип блокировки FOR UPDATE, который конфликтует сам с собой. Эти же типы локов можно указывать у оператора SELECT. Пример: Select * from t1 for update nowait (skip locked).</p><p>Пользовательские локи можно брать, например, когда нужен общий ресурс для нескольких приложений и нет возможности шарить его в другой инфре.</p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 139,
                "title": "Базы данных"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:42:41Z",
        "interviewCount": 1097,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Какие типы локов (блокировок) есть в PostgreSQL? Кто берет эти локи?</span></p>",
        "time": 10,
        "title": "Типы блокировок в PostgreSQL"
    },
    {
        "ID": 286,
        "additional": "<p><span style=\"color: rgb(52, 73, 94);\">грязное чтение, неповторяемое чтение, фантомное чтение, аномалия сериализации.</span></p>",
        "answers": [
            {
                "content": "<p>Перечислил аномалии, без подробностей</p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Перечислил аномалии с краткими подробностями</p>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 139,
                "title": "Базы данных"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:42:13Z",
        "interviewCount": 958,
        "question": "<p>Какие аномалии могут быть при исполнении несколько транзакций параллельно? Расскажи кратко о них.</p><p><br></p>",
        "time": 5,
        "title": "Аномалии при параллельном исполнении транзакций"
    },
    {
        "ID": 268,
        "additional": "<p>Q: *Как можно снять профили?\"</p><p>A: Можно снимать профили, используя программный API, либо подключив пакет&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">net/http/pprof</code>.</p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Что такое семплирующий профайлер?</em></p><p>A: Профайлер сохраняет не каждое событие, а каждое N-ное. В случае CPU-профайлера это значит, что стектрейсы.</p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Есть ли оверхед от использования pprof'a?</em></p><p>A: Для профилей heap, alloc, mutex, block - оверхед минимальный, по сути эти данные собираются всегда. CPU собирается только по требования и явно добавляет оверхед, конкретные значения нужно замерять для конкретного приложения.</p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Что такое trace и чем он отличается от других профилей?</em></p><p>A: Trace предоставляет очень подробную информацию о выполнении приложений:</p><p><br></p><ul><li>создание / блокировка / разблокировка горутин</li><li>syscalls</li><li>работа GC</li><li>размер heap'a, количество тредов и горутин</li></ul><p>Т.к. trace очень подробная штука, то он добавляет больше оверхеда, чем остальные профили.</p><p><br></p><p>Q: Показать картинку с флеймграфом и попросить рассказать он там видит.</p>",
        "answers": [
            {
                "content": "<p>Слышал/где-то читал, что это нужно для того, чтобы снять профили.</p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>Может назвать как позапускать, какие флаги есть у консольной команды. Есть реальный опыт работы, может привести пример из реальной жизни.</p><p><br></p><p><br></p><p><br></p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Может на практике рассказать, что он видит на подготовленных картинках.</p><p><br></p><p><strong>НУЖНО ДОБАВИТЬ ПРИМЕР ГРАФА и ФЛЕЙМГРАФА</strong></p>",
                "difficulty": "GRADE_19"
            },
            {
                "content": "<p>Может рассказать как работает семплирующий профайлер: Профайлер сохраняет не каждое событие, а каждое N-ное. В случае CPU-профайлера это значит, что стектрейсы.</p><p>Может рассказать почему при получении профиля по heap/alloc - это происходит мгновенно, а для CPU нужно подождать какое-то время.</p>",
                "difficulty": "GRADE_20"
            },
            {
                "content": "<p>Может рассказать что здесь происходит.</p><p>https://www.ardanlabs.com/blog/2018/12/garbage-collection-in-go-part1-semantics.html</p><p><br></p><p><br></p><p><img src=\"https://www.ardanlabs.com/images/goinggo/100_figure7.png\"></p>",
                "difficulty": "GRADE_21"
            }
        ],
        "blocks": [
            {
                "ID": 137,
                "title": "Go (теория)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:24:32Z",
        "interviewCount": 903,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">pprof. Что это такое и зачем нужно?</span></p>",
        "time": 5,
        "title": "pprof"
    },
    {
        "ID": 2435,
        "answers": [
            {
                "content": "<p>SELECT user_id, COUNT(*) AS order_count FROM orders WHERE price_total &gt;= 1000 GROUP BY user_id ORDER BY order_count DESC</p><p><br></p><p>Если с группировкой не может, то предложить просто выбрать заказы с price_total &gt;= 1000 (чтобы убедиться что вообще понимает что такое sql)</p>",
                "difficulty": "GRADE_SCREENING"
            }
        ],
        "blocks": [
            {
                "ID": 136,
                "title": "Скрининг"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2024-05-06T12:57:57Z",
        "interviewCount": 756,
        "question": "<pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">Дана таблица \"orders\":</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">+-----+-----------+------------------------+--------------+</div><div class=\"ql-code-block\">|  id |  user_id  |             created_at |  price_total |</div><div class=\"ql-code-block\">+-----+-----------+------------------------+--------------+</div><div class=\"ql-code-block\">|   1 |       111 |    2024-01-01 10:00:00 |        2 000 |</div><div class=\"ql-code-block\">|   2 |       222 |    2024-01-02 10:00:00 |          100 |</div><div class=\"ql-code-block\">|   3 |       111 |    2024-04-01 10:00:00 |       20 000 |</div><div class=\"ql-code-block\">|   4 |       222 |    2024-05-01 10:00:00 |        5 000 |</div><div class=\"ql-code-block\">|   5 |       333 |    2024-05-02 10:00:00 |       10 000 |</div><div class=\"ql-code-block\">+-----+-----------+------------------------+--------------+</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">Напишите SQL-запрос, который вернёт количество заказов по каждому пользователю с price_total больше или равным 1000 в таком виде отсортированному по количеству заказов в обратном порядке:</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">+----------+-------------+</div><div class=\"ql-code-block\">|  user_id | order_count |</div><div class=\"ql-code-block\">+----------+-------------+</div><div class=\"ql-code-block\">|      111 |           2 |</div><div class=\"ql-code-block\">|      222 |           1 |</div><div class=\"ql-code-block\">|      333 |           1 |</div><div class=\"ql-code-block\" data-language=\"plain\">+----------+-------------+</div></pre>",
        "time": 5,
        "title": "Задача на простой select с группировкой"
    },
    {
        "ID": 259,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Замыкание - это функция, которая ссылается к переменным вне ее тела. Функция имеет доступ к связанным переменным, а также может присваивать им значения</span></p><p><span style=\"color: rgb(52, 73, 94);\">Пример:</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">accum</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> {<br/>    sum := <span class=\"hljs-number\">0</span><br/>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(x <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> {<br/>        sum += x<br/>        <span class=\"hljs-keyword\">return</span> sum<br/>    }<br/>}<br/><br/></pre><p><span style=\"color: rgb(52, 73, 94);\">Функция accum возвращает замыкание</span></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 137,
                "title": "Go (теория)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:12:51Z",
        "interviewCount": 739,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Что такое замыкание? Приведите пример использования замыкания.</span></p>",
        "time": 5,
        "title": "Замыкания"
    },
    {
        "ID": 251,
        "additional": "<p>Оценить сложность решения</p>",
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">func remove(in []int) []int {<br/>    i := 0<br/>    j := 0<br/><br/>    for ; i &lt; len(in); i++ {<br/>        if in[i] != 0 {<br/>            in[j] = in[i]<br/>            j++<br/>        }<br/>    }<br/><br/>    return in[:j]<br/>}<br/><br/></pre><p><br></p>",
                "difficulty": "GRADE_SCREENING"
            }
        ],
        "blocks": [
            {
                "ID": 136,
                "title": "Скрининг"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:02:51Z",
        "interviewCount": 728,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Дан слайс целых чисел. Напишите функцию remove, удаляющую все нули</span></p><p><br></p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">Примеры:\n    <span class=\"hljs-keyword\">remove</span>([]) -&gt; []\n    <span class=\"hljs-keyword\">remove</span>([<span class=\"hljs-number\">0</span>]) -&gt; []\n    <span class=\"hljs-keyword\">remove</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>]) -&gt; [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>]\n\n</pre>",
        "time": 10,
        "title": "Фильтрация элементов слайса"
    },
    {
        "ID": 278,
        "additional": "<p>Q: Как сделать подбор константным по сложности, если мы можем ограничить длину пароля?</p><p>A: Использовать rainbow table.</p><p><br></p><p>Q: Вычислительная сложность подбора пароля?</p><p>A: O(a^n), а для n-битовой хеш-функции сложность нахождения первого прообраза составляет O(2^n)</p><p><br></p><p>Q: Как атакующий может скомпрометировать криптосистему?</p><p>A: Через timing-attack. Защитой будет сравнение за константное время, кол-во попыток, ограничение по времени в случае одноразовых паролей из SMS.</p><p><br></p><p>Q: Как разработчики сервиса могли бы усложнить подбор паролей?</p><p>A: крипто стойкое хеширование, соль, сравнение за константное время</p>",
        "answers": [
            {
                "content": "<p>Это вопрос на написание кода, который потом будет приложен к протоколу собеседования.</p><p>Простой пример по перебору (максимальное число перебираемых комбинаций - math.MaxInt64)</p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">func RecoverPassword(h []byte) string {<br/>    var step int<br/><br/>    for ; ; step++ {<br/>        guess := genPassword(step)<br/>        if bytes.Equal(hashPassword(guess), h) {<br/>            return guess<br/>        }<br/>    }<br/>}<br/><br/>func genPassword(step int) (res string) {<br/>    for {<br/>        res = string(alphabet[step%len(alphabet)]) + res<br/>        step = step/len(alphabet) - 1<br/>        if step &lt; 0 {<br/>            break<br/>        }<br/>    }<br/><br/>    return<br/>}<br/></pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 138,
                "title": "Go (практика)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:31:43Z",
        "interviewCount": 609,
        "question": "<p>У нас есть база данных с паролями пользователей, пароли захешированы (функция hashPassword), а так же известен набор символов которые могут быть использованы в паролях (переменная alphabet).</p><p>Наша задача реализовать функцию RecoverPassword так, чтобы она восстанавливала пароль по известному хэшу и TestRecoverPassword завершился успешно</p><p><br></p><p><br></p><p><br></p><p><br></p><h4><a href=\"http://platform.gp.o3.ru/committee/#/go/go_practice?id=%d0%91%d0%b0%d0%b7%d0%be%d0%b2%d1%8b%d0%b5-%d1%82%d1%80%d0%b5%d0%b1%d0%be%d0%b2%d0%b0%d0%bd%d0%b8%d1%8f\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(52, 73, 94);\">Базовые требования:</a></h4><p>Решить как угодно</p><p><br></p><p><br></p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n    <span class=\"hljs-string\">\"crypto/md5\"</span>\n﻿    <span class=\"hljs-string\">\"testing\"</span>\n)\n\n<span class=\"hljs-keyword\">var</span> alphabet = []<span class=\"hljs-type\">rune</span>{<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'1'</span>, <span class=\"hljs-string\">'2'</span>, <span class=\"hljs-string\">'3'</span>}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">RecoverPassword</span><span class=\"hljs-params\">(h []<span class=\"hljs-type\">byte</span>)</span></span> <span class=\"hljs-type\">string</span> {\n    <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">TODO:</span> implement me\n    return \"\"</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">TestRecoverPassword</span><span class=\"hljs-params\">(t *testing.T)</span></span> {\n    <span class=\"hljs-keyword\">for</span> _, exp := <span class=\"hljs-keyword\">range</span> []<span class=\"hljs-type\">string</span>{\n        <span class=\"hljs-string\">\"a\"</span>,\n        <span class=\"hljs-string\">\"12\"</span>,\n        <span class=\"hljs-string\">\"abc333d\"</span>,\n    } {\n        t.Run(exp, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(t *testing.T)</span></span> {\n            act := RecoverPassword(hashPassword(exp))\n            <span class=\"hljs-keyword\">if</span> act != exp {\n                t.Error(<span class=\"hljs-string\">\"recovered:\"</span>, act, <span class=\"hljs-string\">\"expected:\"</span>, exp)\n            }\n        })\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">hashPassword</span><span class=\"hljs-params\">(in <span class=\"hljs-type\">string</span>)</span></span> []<span class=\"hljs-type\">byte</span> {\n    h := md5.Sum([]<span class=\"hljs-type\">byte</span>(in))\n    <span class=\"hljs-keyword\">return</span> h[:]\n}\n</pre>",
        "time": 15,
        "title": "Перебор паролей"
    },
    {
        "ID": 2436,
        "answers": [
            {
                "content": "<pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"sql\"><span class=\"ql-token hljs-keyword\">create <span class=\"ql-token hljs-true\">table</span> users (</span></div><div class=\"ql-code-block\" data-language=\"sql\">  id <span class=\"ql-token hljs-type\">int primary key,</span></div><div class=\"ql-code-block\" data-language=\"sql\">  name text <span class=\"ql-token hljs-keyword\">not null,</span></div><div class=\"ql-code-block\" data-language=\"sql\">  created_at <span class=\"ql-token hljs-type\">timestamp not null</span></div><div class=\"ql-code-block\" data-language=\"sql\">);</div><div class=\"ql-code-block\" data-language=\"sql\"><br></div><div class=\"ql-code-block\" data-language=\"sql\"><span class=\"ql-token hljs-keyword\">create table chats (</span></div><div class=\"ql-code-block\" data-language=\"sql\">  id <span class=\"ql-token hljs-type\">int primary key,</span></div><div class=\"ql-code-block\" data-language=\"sql\">  name text <span class=\"ql-token hljs-keyword\">not null,</span></div><div class=\"ql-code-block\" data-language=\"sql\">  created_at <span class=\"ql-token hljs-type\">timestamp not null</span></div><div class=\"ql-code-block\" data-language=\"sql\">);</div><div class=\"ql-code-block\" data-language=\"sql\"><br></div><div class=\"ql-code-block\" data-language=\"sql\"><span class=\"ql-token hljs-keyword\">create table messages (</span></div><div class=\"ql-code-block\" data-language=\"sql\">  id <span class=\"ql-token hljs-type\">int primary key,</span></div><div class=\"ql-code-block\" data-language=\"sql\">  content text <span class=\"ql-token hljs-keyword\">not null,</span></div><div class=\"ql-code-block\" data-language=\"sql\">  author_id <span class=\"ql-token hljs-type\">int not null, -- ссылка на автора, связь N-1</span></div><div class=\"ql-code-block\" data-language=\"sql\">  chat_id <span class=\"ql-token hljs-type\">int not null, -- принадлежность к чату, связь N-1</span></div><div class=\"ql-code-block\" data-language=\"sql\">  created_at <span class=\"ql-token hljs-type\">timestamp not null</span></div><div class=\"ql-code-block\" data-language=\"sql\">);</div><div class=\"ql-code-block\" data-language=\"sql\"><br></div><div class=\"ql-code-block\" data-language=\"sql\"><span class=\"ql-token hljs-keyword\">create table user_chats ( -- таблица для связи N-M</span></div><div class=\"ql-code-block\" data-language=\"sql\">  user_id <span class=\"ql-token hljs-type\">int,</span></div><div class=\"ql-code-block\" data-language=\"sql\">  chat_id <span class=\"ql-token hljs-type\">int,</span></div><div class=\"ql-code-block\" data-language=\"sql\">  <span class=\"ql-token hljs-keyword\">primary key (user_id, chat_id)</span></div><div class=\"ql-code-block\" data-language=\"sql\">  <span class=\"ql-token hljs-comment\">-- primary key (chat_id, user_id) Тоже допускается</span></div><div class=\"ql-code-block\" data-language=\"sql\">);</div><div class=\"ql-code-block\" data-language=\"sql\"><br></div></pre><h1><br></h1><h1>Дополнительные вопросы</h1><p>Выбрать все чаты пользователя Вася в формате (chat_id,chat_name)</p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"sql\">  <span class=\"ql-token hljs-keyword\">select uc.chat_id, c.name chat_name</span></div><div class=\"ql-code-block\" data-language=\"sql\">  <span class=\"ql-token hljs-keyword\">from users u</span></div><div class=\"ql-code-block\" data-language=\"sql\">  <span class=\"ql-token hljs-keyword\">join user_chats uc on uc.user_id = u.id</span></div><div class=\"ql-code-block\" data-language=\"sql\">  <span class=\"ql-token hljs-keyword\">join chats c on c.id = uc.chat_id</span></div><div class=\"ql-code-block\" data-language=\"sql\">  <span class=\"ql-token hljs-keyword\">where u.name = 'Вася'</span></div></pre><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Какие еще виды соединений кроме join знаешь?</li></ol><p class=\"ql-indent-1\">Достаточно ответить про left join, right join</p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Что будет, если вместо join применить left join в этом запросе?</li></ol><p class=\"ql-indent-1\">Ничего не изменится</p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>Включает ответы на 17 грейд, задаем больше дополнительных вопросы</p><p><br></p><h2>Дополнительные вопросы</h2><p><br></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Что такое индекс? Сколько и какие индексы будут созданы по этой схеме?</li></ol><p class=\"ql-indent-2\">Индекс - это вспомогательная структура данных для ускорения доступа к таблице, неявно управляется ядром БД</p><p class=\"ql-indent-2\">4 - для каждой таблицы для полей с указанием primary key будет создан уникальный B-TREE индекс</p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>По мере роста размеров таблиц этот запрос начинает все медленнее работать, можешь понять почему и исправить?</li></ol><p class=\"ql-indent-1\">Добавить индекс на user(name), в более сложных случаях профилировать запрос с помощью EXPLAIN [ANALYZE]</p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><strong>[Не спрашивать, если кандидат не знает про explain]</strong> Что показывает эта команда?</li></ol><p class=\"ql-indent-1\">План запроса с оценкой сложности по узлам</p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><strong>[Не спрашивать, если кандидат не знает про explain]</strong> Какой узел плана однозначано показывает, что не хватает индекса?</li></ol><p class=\"ql-indent-1\">SeqScan</p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Как заполнять поле <em>id</em> при вставках в таблицы users, chats, messages</li></ol><p class=\"ql-indent-1\">Перейти на автоинкрементное поле</p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"sql\"><span class=\"ql-token hljs-keyword\">create</span> <span class=\"ql-token hljs-keyword\">table</span> users (</div><div class=\"ql-code-block\" data-language=\"sql\">    id serial <span class=\"ql-token hljs-keyword\">primary</span> key,</div><div class=\"ql-code-block\" data-language=\"sql\">);</div></pre><p>\t\tИли перейти на генерацию uuid на стороне приложения</p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Включает ответы на 18 грейд, задаем больше дополнительных вопросы</p><h2>Дополнительные вопросы</h2><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Чаты становятся популярными, число пользователей растет и нам скоро не хватит свободного места на диске для хранения всей переписки. Что нам делать?</li></ol><p class=\"ql-indent-1\">Нужно шардировать. Шардируем наиболее сильно растущие данные - в данном примере это таблица <em>messages</em>, потому что хранит генерируемый пользователем текст</p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Какой первичный ключ лучше - числовой или uuid?</li></ol>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 139,
                "title": "Базы данных"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2024-05-06T13:11:23Z",
        "interviewCount": 530,
        "question": "<p>Есть 3 сущности - пользователь, чат, сообщение</p><p><br></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>У пользователя есть имя и дата регистрации</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>У чата есть название и дата создания</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>У сообщения есть текст, автор и дата создания </li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Пользователь может состоять в нескольких чатах одновременно</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Сообщение обязательно принадлежит чату, сообщение не может принадлежать более чем 1 чату одновременно </li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Нужно описать предметную область в виде таблиц</li></ol>",
        "time": 20,
        "title": "Задача на РСУБД"
    },
    {
        "ID": 274,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">В кэш кладется `warehouse.Warehouse`, а assert делается с `*warehouse.Warehouse`.</span></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 138,
                "title": "Go (практика)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:28:35Z",
        "interviewCount": 527,
        "question": "<p>Это почти реальный пример из одного из наших сервисов. Этот код - обертка над кешем, который соотвественно пишет и читает данные из кэша. Не смотря на то, что внедрение данного кэша должно было облегчить основное хранилище, однако это не произошло. Почему?</p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">type Storage struct {</div><div class=\"ql-code-block\" data-language=\"plain\">    cache *lru.Cache</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">func (s *Storage) Set(wh *warehouse.Warehouse) {</div><div class=\"ql-code-block\" data-language=\"plain\">    s.cache.Put(wh.Id, *wh)</div><div class=\"ql-code-block\" data-language=\"plain\">}</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">func (s *Storage) Get(id types.WarehouseId) *warehouse.Warehouse {</div><div class=\"ql-code-block\" data-language=\"plain\">    item, ok := s.cache.Get(id)</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">    if ok {</div><div class=\"ql-code-block\" data-language=\"plain\">        if wh, ok := item.(*warehouse.Warehouse); ok {</div><div class=\"ql-code-block\" data-language=\"plain\">            return wh</div><div class=\"ql-code-block\" data-language=\"plain\">        }</div><div class=\"ql-code-block\" data-language=\"plain\">    }</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">    return nil</div><div class=\"ql-code-block\" data-language=\"plain\">}</div></pre>",
        "time": 5,
        "title": "Вопрос про \"звездочку\""
    },
    {
        "ID": 265,
        "additional": "<p><span style=\"color: var(--ozMainBlack);\">Q:&nbsp;</span><em style=\"color: rgb(127, 140, 141);\">Какие типы в go являются incomparable?</em></p><p>A: go не поддерживает сравнение для таких типов:</p><ul><li>slice</li><li>функции</li><li>структуры с incomparable полями</li><li>array c incomparable типами</li></ul><p><br></p>",
        "answers": [
            {
                "content": "<ol><li>B - incomparable type, т.е. типы, которые не поддерживается операторы сравнение&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">==</code>&nbsp;и&nbsp;<code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">!=</code></li><li>B - не тип</li><li>d - не является типом B</li><li>a или e уже определены выше, B/d не определены</li><li>race condition из-за конкурентной записи в map</li></ol><p><br></p><p>Если называет ~2/3 из этого списка, то 17 грейд</p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>Должен назвать все пункты из 17 грейда.</p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 137,
                "title": "Go (теория)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:19:56Z",
        "interviewCount": 480,
        "question": "<pre class=\"ql-syntax\" spellcheck=\"false\">a := <span class=\"hljs-keyword\">map</span>[B]<span class=\"hljs-type\">int</span>{}\na[d] = 0\ne, ok := a[d]\n</pre><p><br></p><p>В каких<span style=\"background-color: rgba(63, 67, 80, 0.04); color: rgb(63, 67, 80);\"> случаях данный код даст ошибку?</span></p>",
        "time": 5,
        "title": "Incomparable types"
    },
    {
        "ID": 290,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">В случае proxy клиент знает, что запрос/соединение пойдет через proxy в точку назначения. Если используется reverse proxy, то клиент ничего не знает о его существовании и не знает кем конкретно будет обработан его запрос.</span></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 140,
                "title": "Архитектура"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2021-10-19T20:44:45Z",
        "interviewCount": 394,
        "question": "<p>В чем разница между proxy / reverse-proxy?</p><p><br></p>",
        "time": 5,
        "title": "Proxy / reverse proxy"
    },
    {
        "ID": 2437,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77); background-color: rgb(255, 255, 255);\">Если кандидат затрудняется с ответом, то спросить а какие вообще структуры данных он знает и сложность операций в них. Как минимум (массив, словарь/мапа, деревья)</span></p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>Используем хештаблицу как основную структуру для кеша. Ключи в ней будут теми же, что и в LRU кеше, но со значениями сложнее - их мы оборачиваем в структуру Node - узел двусвязного списка. Node будет хранить ключ, значение, и ссылки на prev/next узлы.</p><p><br></p><p>Нам нужно реализовать работу с последовательностью операций, чтобы определять самый старый элемент. Здесь и нужен двусвязный список - элементы в нём располагаются в хронологическом порядке операций. Самый старый элемент будет в голове списка, новые и обновленные элементы будут перемещаться в хвост списка.</p><p><br></p><p>Если мы читаем по ключу не в первый раз, то нам может понадобиться переместить его из середины списка в хвост. Находим за O(1) нужный узел по ключу, за O(1) удаляем его из середины списка (обновляем ссылки соседних узлов) и перемещаем в конец.</p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>-</p>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 137,
                "title": "Go (теория)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2024-05-06T13:35:00Z",
        "interviewCount": 363,
        "question": "<p>Рассказать, как устроен LRU cache</p><p><br></p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">Кеш имеет фиксированный максимальный размер. </div><div class=\"ql-code-block\">Если после вставки нового элемента превышается максимально допустимый размер кеша, из него нужно удалить самый старый элемент.</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">Пример:</div><div class=\"ql-code-block\">cache = new LRU(capacity=2)</div><div class=\"ql-code-block\"><br></div><div class=\"ql-code-block\">cache.put(A, 1); // cache is {A=1}</div><div class=\"ql-code-block\">cache.put(B, 2); // cache is {A=1, B=2}</div><div class=\"ql-code-block\">cache.get(A);    // return 1</div><div class=\"ql-code-block\">cache.put(C, 3); // {A=1, C=3}, element B=2 was evicted</div><div class=\"ql-code-block\">cache.get(B);    // returns -1 (not found)</div><div class=\"ql-code-block\">cache.put(D, 4); // {D=4, C=3}</div><div class=\"ql-code-block\">cache.get(A);    // return -1 (not found)</div><div class=\"ql-code-block\">cache.get(C);    // return 3</div><div class=\"ql-code-block\">cache.get(D);    // return 4</div></pre>",
        "time": 10,
        "title": "LRU cache (Только теория)"
    },
    {
        "ID": 2000,
        "answers": [
            {
                "content": "<p>Это задача даже не на специфику работы оператора range, а просто на знание одного из основных принципов языка — <em>everything in Go is passed by value</em>. Массив является по сути <em>struct</em>'ом из трех полей — `ссылка на array`, `len` и `cap`, при вызове range происходит ровно то же самое, что и при вызове функции — эта структура копируется (а array на который ссылаемся — нет). Присваивая переменной новое значение мы никак не меняем исходный array, поэтому и выведется</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">a\nb\nc\nd\n</pre><p><br></p><p><br></p><p>А вот если менять значения в нижележащем array'е, то они будут меняться, и range их увидит</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tlst := []<span class=\"hljs-type\">string</span>{<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>, <span class=\"hljs-string\">\"d\"</span>}\n\n\t<span class=\"hljs-keyword\">for</span> k, v := <span class=\"hljs-keyword\">range</span> lst {\n\t\t<span class=\"hljs-keyword\">if</span> k == <span class=\"hljs-number\">0</span> {\n\t\t\tlst[<span class=\"hljs-number\">3</span>] = <span class=\"hljs-string\">\"z\"</span>\n\t\t}\n\t\tfmt.Println(v)\n\t}\n}\n</pre><p>выведет</p><pre class=\"ql-syntax\" spellcheck=\"false\">a\nb\nc\nz\n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 136,
                "title": "Скрининг"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2023-09-01T09:17:17Z",
        "interviewCount": 297,
        "question": "<p>Что выведет этот код, и почему?</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"fmt\"</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tlst := []<span class=\"hljs-type\">string</span>{<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>, <span class=\"hljs-string\">\"d\"</span>}\n\n\t<span class=\"hljs-keyword\">for</span> k, v := <span class=\"hljs-keyword\">range</span> lst {\n\t\t<span class=\"hljs-keyword\">if</span> k == <span class=\"hljs-number\">0</span> {\n\t\t\tlst = []<span class=\"hljs-type\">string</span>{<span class=\"hljs-string\">\"aa\"</span>, <span class=\"hljs-string\">\"bb\"</span>, <span class=\"hljs-string\">\"cc\"</span>, <span class=\"hljs-string\">\"dd\"</span>}\n\t\t}\n\t\tfmt.Println(v)\n\t}\n}\n</pre>",
        "time": 5,
        "title": "Modifying slice during iteration"
    },
    {
        "ID": 2644,
        "answers": [
            {
                "content": "<p>Кандидат рассказал только про свойства хеш-таблиц и что операции обычно выполняются за сложность O(1)</p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>Хеш-таблицы имеют под капотом массив определенной длины.</p><p><br></p><p>От ключа считается некий хеш с помощью хеш-функции, которая обеспечивает равномерное распределение. Хеш это какое-то большое число, которое потом нужно привести к длине массива. Приведение осуществляется остатком от деления.</p><p><br></p><p>Полученное число используется как индекс в массиве куда мы хотим положить пару \"ключ-значение\"</p><p><br></p><p>При таком подходе будут случаться коллизии, кандидат должен рассказать как они решаются: либо хранением списка внутри массива, либо поиском ближайшей свободной ячейки в массиве.</p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Все тоже самое что 18 грейд, но кандидат понимает как делать рехешинг, может примерно рассказать как написать хеш-функцию</p><p><br></p><p>Может привести примеры хеш-функций и рассказать какие из них хорошие и плохие (crc32, md5, aes, sha1 и тд)</p>",
                "difficulty": "GRADE_19"
            },
            {
                "content": "<p>Все тоже самое что 19 грейд, но кандидат может рассказать несколько способов решения коллизий, может порассуждать в какой момент лучше делать рехешинг, как его организовать рехешинг плавно. </p><p><br></p><p>Может дать детали реализации хеш-таблицы в конкретном языке программирования.</p><p><br></p><p>Может рассказать как написать хорошую хеш-функцию.</p>",
                "difficulty": "GRADE_20"
            }
        ],
        "blocks": [
            {
                "ID": 1000,
                "title": "Структуры данных"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2024-08-22T13:39:32Z",
        "interviewCount": 196,
        "question": "<p>Как устроена структура данных \"хеш-таблица\"? Интересует не детали реализации в каком-либо языке, а общая идея.</p><p><br></p><p>Допустим есть операция set. На вход подается ключ — строка, а значение — число. Что происходит внутри функции?</p>",
        "time": 5,
        "title": "Как устроена хеш-таблица"
    },
    {
        "ID": 2643,
        "answers": [
            {
                "content": "<p>Четкого ответа нет</p>",
                "difficulty": "GRADE_SCREENING"
            }
        ],
        "blocks": [
            {
                "ID": 136,
                "title": "Скрининг"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2024-08-22T13:22:14Z",
        "interviewCount": 161,
        "question": "<p>Расскажи самую сложную или интересную инженерную задачу, которую приходилось решать?</p><p><br></p><p>Дополнительные вопросы:</p><ol><li data-list=\"ordered\"><span class=\"ql-ui\" contenteditable=\"false\"></span>В чем была сложность? </li><li data-list=\"ordered\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Как удалось справиться с задачей?</li><li data-list=\"ordered\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Как бы ты решил задачу сейчас?</li></ol>",
        "time": 5,
        "title": "Самая сложная инженерная задача, которую приходилось решать"
    },
    {
        "ID": 2645,
        "answers": [
            {
                "content": "<p>Заметил что мьютекс — локальная переменная</p><p>Дал рекомендацию оформить это в структуру</p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>Посоветовал использовать defer для мьютексов</p><p>Предложил переписать GetOrCreate чтобы лочить мьютекс только один раз</p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Предложил использовать RWMutex</p><p>Заметил, что два отдельных лока в GetOrCreate могут привести к конкурентной записи </p>",
                "difficulty": "GRADE_19"
            },
            {
                "content": "<p>Предложил использовать sync.Map, рассказал чем подход с RWMutex (а за одно и посомневался почему RWMutex может оказаться медленнее) </p><p>Предложил сделать разбить кеш на несколько шардов с отдельным мьютексом</p>",
                "difficulty": "GRADE_20"
            }
        ],
        "blocks": [
            {
                "ID": 137,
                "title": "Go (теория)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2024-08-22T13:53:24Z",
        "interviewCount": 141,
        "question": "<p>Разработчик дал на ревью код своего нового кэша, нам необходимо провести код-ревью</p><p><br></p><p>Кэш будет использоваться под высокой нагрузкой в проде</p><p>Частота записи/чтения 20%/80% соответственно</p><p><br></p><p>Код:</p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"go\">package main</div><div class=\"ql-code-block\" data-language=\"go\"><br></div><div class=\"ql-code-block\" data-language=\"go\">import (</div><div class=\"ql-code-block\" data-language=\"go\">    \"fmt\"</div><div class=\"ql-code-block\" data-language=\"go\">    \"sync\"</div><div class=\"ql-code-block\" data-language=\"go\">)</div><div class=\"ql-code-block\" data-language=\"go\"><br></div><div class=\"ql-code-block\" data-language=\"go\">func main() {</div><div class=\"ql-code-block\" data-language=\"go\">    fmt.Println(GetOrCreate(\"hello\", \"world\"))</div><div class=\"ql-code-block\" data-language=\"go\">    fmt.Println(Get(\"hello\"))</div><div class=\"ql-code-block\" data-language=\"go\">}</div><div class=\"ql-code-block\" data-language=\"go\"><br></div><div class=\"ql-code-block\" data-language=\"go\"><br></div><div class=\"ql-code-block\" data-language=\"go\">var cache = make(map[string]string)</div><div class=\"ql-code-block\" data-language=\"go\"><br></div><div class=\"ql-code-block\" data-language=\"go\">// GetOrCreate проверяет существование ключа key</div><div class=\"ql-code-block\" data-language=\"go\">// Если такого нет, то создает новое значение</div><div class=\"ql-code-block\" data-language=\"go\">func GetOrCreate(key, value string) string {</div><div class=\"ql-code-block\" data-language=\"go\">    var m sync.Mutex</div><div class=\"ql-code-block\" data-language=\"go\"><br></div><div class=\"ql-code-block\" data-language=\"go\">    m.Lock()</div><div class=\"ql-code-block\" data-language=\"go\">    value = cache[key]</div><div class=\"ql-code-block\" data-language=\"go\">    m.Unlock() </div><div class=\"ql-code-block\" data-language=\"go\"><br></div><div class=\"ql-code-block\" data-language=\"go\">    if value != \"\" {</div><div class=\"ql-code-block\" data-language=\"go\">        return value</div><div class=\"ql-code-block\" data-language=\"go\">    }</div><div class=\"ql-code-block\" data-language=\"go\"><br></div><div class=\"ql-code-block\" data-language=\"go\">    m.Lock()</div><div class=\"ql-code-block\" data-language=\"go\">    cache[key] = value</div><div class=\"ql-code-block\" data-language=\"go\">    m.Unlock() </div><div class=\"ql-code-block\" data-language=\"go\">    return value</div><div class=\"ql-code-block\" data-language=\"go\">}</div><div class=\"ql-code-block\" data-language=\"go\"><br></div><div class=\"ql-code-block\" data-language=\"go\">func Get(key string) string {</div><div class=\"ql-code-block\" data-language=\"go\">    var m sync.Mutex</div><div class=\"ql-code-block\" data-language=\"go\">    m.Lock()</div><div class=\"ql-code-block\" data-language=\"go\">    v := cache[key]</div><div class=\"ql-code-block\" data-language=\"go\">    m.Unlock()</div><div class=\"ql-code-block\" data-language=\"go\">    return v</div><div class=\"ql-code-block\" data-language=\"go\">}</div></pre><p><br></p>",
        "time": 5,
        "title": "Ревью кода кеша"
    },
    {
        "ID": 2646,
        "answers": [
            {
                "content": "<p>Ограничивает кол-во потоков, которые использует Go для запуска кода</p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Дополнительный вопрос: \"Может ли приложение с GOMAXPROCS=4 потреблять больше 4ех ядер CPU\"</p><p><br></p><p>Да может. Это происходит из-за того, что Go Runtime запускает дополнительные потоки на блокирующие сисколы. В эти микро-моменты кол-во используемых ядер может быть больше GOMAXPROCS</p>",
                "difficulty": "GRADE_19"
            },
            {
                "content": "<p>Влияние GOMAXPROCS на троттлинг сервиса.</p><p><br></p><p>Кандидат может рассказать про использование в кубере, какое значение выставляется по умолчанию. Что будет, если выставить значение больше или меньше кол-ва ядер.</p>",
                "difficulty": "GRADE_20"
            }
        ],
        "blocks": [
            {
                "ID": 137,
                "title": "Go (теория)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2024-08-22T14:33:45Z",
        "interviewCount": 105,
        "question": "<p>Что такое GOMAXPROCS? Зачем это нужно? </p>",
        "time": 5,
        "title": "Что такое GOMAXPROCS?"
    },
    {
        "ID": 2738,
        "answers": [
            {
                "content": "<p>Время ответа, ошибки</p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>RPS, RT, Error Rate, железные метрики CPU, Memory</p><p><br></p><p>Дополнительный вопрос: \"Как правильно измерять RT сервиса, почему смотреть на средний RT это плохо и что использовать вместо среднего значения RT\"</p><p><br></p><p>Правильно смотреть квантили, они показывают какой процент запросов выполняются дольше значения. Например 0.95q = 5s показывает, что 5% запросов выполняются дольше 5s</p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Дополнительно скажет про метрики конкретного райнтайма, Garbage Collector, всех баз данных, RT внешних вызовов</p><p><br></p><p>Дополнительный вопрос: \"Есть ли какой-то опыт написания запросов в Promql и составления дашбордов в Grafana?\"</p><p><br></p><p>Может написать какой-нибудь запрос в одной из систем мониторинга, например в Prometheus, умеет пользоваться Grafana</p>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 141,
                "title": "ОС, сети и эксплуатация"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2024-10-02T12:14:10Z",
        "interviewCount": 81,
        "question": "<p>Какие будешь использовать для мониторинга своего сервиса?</p>",
        "time": 5,
        "title": "Какие метрики будешь использовать для мониторинга своего сервиса?"
    },
    {
        "ID": 2647,
        "answers": [
            {
                "content": "<p>Системный поток запускается внутри процесса</p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Процессы не шарят память между собой, а потоки внутри процесса — шарят. </p><p><br></p><p>Дополнительный вопрос: \"А как процессы могут обмениваться информацией?\"</p><p>Ответ: сокеты, пайпы, сигналы</p>",
                "difficulty": "GRADE_19"
            },
            {
                "content": "<p>И то и другое это Task в терминах ядра Linux. Отличие в том, что процессы по-умолчанию не шарят память, а потоки в рамках процесса — шарят. При этом процессы тоже могут шарить, делается это через специальные механизмы типа shm_open или mmap.</p>",
                "difficulty": "GRADE_20"
            }
        ],
        "blocks": [
            {
                "ID": 141,
                "title": "ОС, сети и эксплуатация"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2024-08-22T14:44:30Z",
        "interviewCount": 80,
        "question": "<p>Чем отличается процесс от системного потока?</p>",
        "time": 5,
        "title": "Процесс vs системный поток"
    },
    {
        "ID": 2739,
        "answers": [
            {
                "content": "<p>Посмотреть нагрузку CPU через top</p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>Предложит использовать еще какие-нибудь базовые инструменты: top, htop, iotop, ping, curl</p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Предложит посмотреть strace/lsof/netstat</p>",
                "difficulty": "GRADE_19"
            },
            {
                "content": "<p>tcpdump/perf/dmesg</p>",
                "difficulty": "GRADE_20"
            }
        ],
        "blocks": [
            {
                "ID": 141,
                "title": "ОС, сети и эксплуатация"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2024-10-02T12:24:14Z",
        "interviewCount": 69,
        "question": "<p>Сервис начал тормозить в продакшене. Как его можно задебажить, если никаких метрик нет, а есть только ssh на сервер?</p>",
        "time": 5,
        "title": "Сервис тормозит в продакшене"
    },
    {
        "ID": 2737,
        "answers": [
            {
                "content": "<p>Это значит, что некоторые запросы зависли и ожидают друг друга</p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Может привести примеры, когда случается дедлок и какие конкретно ресурсы ожидают два параллельных запроса, какие блокировки могут ожидать и тд</p>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 139,
                "title": "Базы данных"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2024-10-02T12:05:24Z",
        "interviewCount": 65,
        "question": "<p>Что такое deadlock, когда бывает?</p>",
        "time": 5,
        "title": "Что такое deadlock, когда бывает?"
    },
    {
        "ID": 2560,
        "answers": [
            {
                "content": "<p>0 2 4 6 8</p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>Расскажет про панику из-за дедлока если сделать канал не буферизированным </p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2024-07-22T15:13:20Z",
        "interviewCount": 63,
        "question": "<p>Что выведет этот код</p><p><br></p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"go\">package main</div><div class=\"ql-code-block\" data-language=\"go\"><br></div><div class=\"ql-code-block\" data-language=\"go\">func main(){</div><div class=\"ql-code-block\" data-language=\"go\">\tch := make(chan int, 1)</div><div class=\"ql-code-block\" data-language=\"go\"><br></div><div class=\"ql-code-block\" data-language=\"go\">\tfor i := 0; i &lt; 10; i++ {</div><div class=\"ql-code-block\" data-language=\"go\">\t\tselect {</div><div class=\"ql-code-block\" data-language=\"go\">\t\t\tcase x := &lt;-ch:</div><div class=\"ql-code-block\" data-language=\"go\">\t\t\t\tprint(x)</div><div class=\"ql-code-block\" data-language=\"go\">\t\t\tcase ch &lt;- i:</div><div class=\"ql-code-block\" data-language=\"go\">\t\t}</div><div class=\"ql-code-block\" data-language=\"go\">\t}</div><div class=\"ql-code-block\" data-language=\"go\">}</div></pre><p><br></p>",
        "time": 2,
        "title": "select по каналам"
    },
    {
        "ID": 2648,
        "answers": [
            {
                "content": "<p>Система убьет процесс</p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Кандидат должен рассказать, что есть два варианта: включен своп или нет. </p><p><br></p><p>Если своп включен, то система может жить в таком состоянии довольно долго тк для памяти будет использоваться диск.</p><p><br></p><p>Если своп отключен, то придет OOM Killer и начнет убивать процессы. Не факт, что умрет именно наш сервис, но рано или поздно его тоже убьет.</p>",
                "difficulty": "GRADE_19"
            },
            {
                "content": "<p>Дополнительный вопрос: \"На какой тип памяти система будет опираться при решении запустить OOM Killer?\"</p><p><br></p><p>Важно, что система оценивает не вирутальную память, а только реально используемую память, которая мапится в физическую. </p><p><br></p><p>Дополнительный вопрос: \"Зачем нужна виртуальная память?\"</p><p><br></p><p>Виртуальная память это концепт современных операционных систем позволяющая через механизм страниц транслировать части виртуальной памяти в другие типы памяти: диск, физическая память, память устройств и тд. Так же виртуальная память обеспечивает разделение памяти между процессами и возможность защищать куски памяти от операций записи или от выполнения кода.</p>",
                "difficulty": "GRADE_20"
            }
        ],
        "blocks": [
            {
                "ID": 141,
                "title": "ОС, сети и эксплуатация"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2024-08-23T12:59:21Z",
        "interviewCount": 60,
        "question": "<p>На голом сервере запущен какой-то сервис и в нем есть утечка памяти. Что произойдет, когда память закончится? Речь не про кубер и ограничения контейнеров, а про голый сервер.</p>",
        "time": 5,
        "title": "Утечка памяти"
    },
    {
        "ID": 2741,
        "answers": [
            {
                "content": "<p>Использовать strings.Builder</p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>&gt; Дополнительный вопрос, а как самому реализовать strings.Builder? Или добиться такого же эффекта.</p><p><br></p><p>Посчитать длину всех строк, выделить []bytes с этим размером и заполнить содержимое строками через copy(). </p>",
                "difficulty": "GRADE_19"
            },
            {
                "content": "<p>Может рассказать в каких случаях Go при операциях \"+\" над строками не будет переаллоцировать память и другие детали оптимизаций Go-компилятора</p>",
                "difficulty": "GRADE_20"
            }
        ],
        "blocks": [
            {
                "ID": 137,
                "title": "Go (теория)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2024-10-02T13:34:00Z",
        "interviewCount": 50,
        "question": "<p>Дан слайс из миллиона строк, нужно получить строку, склеенную из этих строк. Как правильно это сделать, какие есть подводные камни?</p>",
        "time": 5,
        "title": "Как правильно склеить много строк?"
    },
    {
        "ID": 2661,
        "answers": [
            {
                "content": "<p>Мьютексы</p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Мьютексы, семафоры, файлы</p>",
                "difficulty": "GRADE_19"
            },
            {
                "content": "<p>Может рассказать за spinlock, всякие гибридные схемы типа futex</p>",
                "difficulty": "GRADE_20"
            }
        ],
        "blocks": [
            {
                "ID": 141,
                "title": "ОС, сети и эксплуатация"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2024-09-03T11:29:19Z",
        "interviewCount": 48,
        "question": "<p>Какие знаешь примитивы синхронизации в ОС?</p>",
        "time": 5,
        "title": "Примитивы синхронизации"
    },
    {
        "ID": 2663,
        "answers": [
            {
                "content": "<p>Вызов какой-то функции в операционной системе, например чтение файла. </p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Дополнительные вопросы: </p><ol><li data-list=\"ordered\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Что происходит во время вызова сискола?</li><li data-list=\"ordered\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Что делает сисколл fork?</li><li data-list=\"ordered\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Что делает сисколл epoll?</li></ol><p><br></p><p>Ответы:</p><ol><li data-list=\"ordered\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Происходит переключение из User Space в Kernel Space, после чего система выполняет необходимые действия</li><li data-list=\"ordered\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Запускает копию процесса</li><li data-list=\"ordered\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Позволяет асинхоронно получать ивенты о том, что в из дескриптора можно вычитать кусок информации</li></ol><p><br></p><p><br></p>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 141,
                "title": "ОС, сети и эксплуатация"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2024-09-03T14:38:21Z",
        "interviewCount": 44,
        "question": "<p>Что такое сисколл? </p>",
        "time": 5,
        "title": "Что такое сисколл? "
    },
    {
        "ID": 2659,
        "answers": [
            {
                "content": "<p>При открытии файла тебе выдается некий идентификатор, который можно использовать для того чтобы совершать чтение/запись файла и другие операции</p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Это универсальный идентификатор, который выдает операционная система для работы со множеством сущностей: реальные файлы диске, виртуальные файлы в том числе файлы, замапленные на память, различные устройства ввода/вывода, пайпы, сокеты и тд. </p><p><br></p><p>Дополнительные вопросы:</p><ol><li data-list=\"ordered\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Что такое stdin/stdout/stderr, какие дескрипторы назначены для этих сущностей?</li></ol><p><br></p><p>Ответы:</p><ol><li data-list=\"ordered\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Это стандартные интерфейсы для приложения для ввода информации, вывода и вывода ошибок. Обычно при запуске приложений из консоли stdout/stderr перенаправляется в консоль. Имеют идентификаторы 0, 1, 2</li></ol>",
                "difficulty": "GRADE_19"
            },
            {
                "content": "<p>Дополнительные вопросы:</p><ol><li data-list=\"ordered\"><span class=\"ql-ui\" contenteditable=\"false\"></span>du/dh покызвает, что место в файловой системе еще есть, а записать ничего не возможно, т.к. “нет места”. Почему и как исправить?</li></ol><p><br></p><p>Ответ:</p><ol><li data-list=\"ordered\"><span class=\"ql-ui\" contenteditable=\"false\"></span>При удалении файла реальное освобождение пространства происходит только при закрытии дескрипторов всеми приложениями. Поэтому нужно найти программу которая держит дескрипторы и заставить ее отпустить эти дескрипторы.</li></ol>",
                "difficulty": "GRADE_20"
            }
        ],
        "blocks": [
            {
                "ID": 141,
                "title": "ОС, сети и эксплуатация"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2024-09-03T11:09:09Z",
        "interviewCount": 41,
        "question": "<p>Что такое файловый дескриптор? </p>",
        "time": 5,
        "title": "Что такое файловый дескриптор?"
    },
    {
        "ID": 2769,
        "answers": [
            {
                "content": "<p>Может рассказать, что есть потоки, есть горутины, которые на них мапятся. Что планировщик раньше был кооперативным, теперь он так же может и вытеснять горутины с потоков.</p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Ожидается краткое описание PMG модели: </p><p>P (processor) - логический процессор (не железо). Это условный контекст, который объединяет поток операционной системы (M) и очередь горутин. Количество горутин, привязанных к P неограниченно. По умолчанию количество P берётся из значения переменной среды GOMAXPROCS и равно количеству логических ядер компьютера. </p><p><br></p><p>M (machine thread) - поток OS. Он закреплён за P и имеет с ним отношение один к одному. </p><p><br></p><p>G (goroutine) - горутина</p><p><br></p><p>Дополнительный вопрос: \"Какая сложность у планировщика?\"</p><p>Ответ: \"O(1)\"</p><p><br></p><p>Дополнительный вопрос: \"В какие моменты горутина на потоке может переключиться?\"</p><p>Ответ: \"При вызове сискола, при блокировках на мьютексах, каналах и тд. Если горутина будет вытеснена.\"</p><p><br></p><p>Дополнительный вопрос: \"Как обрабатываются асинхронные сетевые вызовы?\"</p><p>Ответ: \"Через netpoller\"</p><p><br></p><p>Дополнительный вопрос: \"Как обрабатываются синхронные сисколлы?\"</p><p>Ответ: \"Поток на котором выполняется текущая горутина — блочится, при этом взамен него запускается дополнительный поток, который начинает обрабатывать очередь горутин\"</p>",
                "difficulty": "GRADE_19"
            },
            {
                "content": "<p>Дополнительный вопрос: \"Зачем нужны горутины и отдельный планировщик в Go, если есть потоки?\"</p><p>Ответ: \"Горутины удобны для написания конкурентного/параллельного кода, при этом переключение горутин в большинстве случаев быстрее потоков тк переключение делается в safe-point'ах, где не нужно сохранять/восстанавливать весь контекст выполнения, а лишь его часть.\"</p><p><br></p><p>Дополнительный вопрос: \"Как реализована вытеснение горутинг в Go? Каким образом шедулер получается управление, если все потокм заняты выполнением математики в горутинах?\"</p><p>Ответ: \"Вытеснение реализовано на сигналах OS\"</p>",
                "difficulty": "GRADE_20"
            }
        ],
        "blocks": [
            {
                "ID": 137,
                "title": "Go (теория)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2024-11-06T12:31:56Z",
        "interviewCount": 37,
        "question": "<p>Как работает планировщик в Go?</p>",
        "time": 5,
        "title": "Планировщик Go"
    },
    {
        "ID": 2660,
        "answers": [
            {
                "content": "<p>Прилкадные программы работают в User Space, а система работает в Kernel Space</p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>User space — окружение и режим процессора в котором ему доступна только виртуальная память текущего процесса, отсутствует часть низкоуровненых комманд процессора</p><p><br></p><p>Kernel space — соответственно окружение в котором работает система и ей доступен весь арсенал процессора в том числе доступ к устройствам, менеджмент памяти и тд. </p><p><br></p><p>Разделение нужно для безопасности так чтобы никакое прикладное ПО не могло сломать систему. Переключение между этими режимами происходит при вызове приложением сисколов (можно считать API операционной системы). </p>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 141,
                "title": "ОС, сети и эксплуатация"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2024-09-03T11:18:05Z",
        "interviewCount": 35,
        "question": "<p>Что такое user space и kernel space? Зачем нужно такое разделение? </p>",
        "time": 5,
        "title": "User Space  vs Kernel Space?"
    },
    {
        "ID": 2768,
        "answers": [
            {
                "content": "<p>Может рассказать, что чистятся объекты на которые не указывают другие объекты, которые привязаны к корню иерархии объектов. </p><p><br></p><p>Что сборка идет в два этапа, сначала пометка объектов, а потом собственно сборка</p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Дополнительный вопрос: \"Когда сборщик начинает работать?\"</p><p>Ответ: Превышение динамического лимита «сожранной» приложением памяти, установленного с помощью переменной GOGC, прошло две минуты, или если ручками запустить runtime.GC().</p><p><br></p><p>Дополнительный вопрос: \"Что за GOGC за что он отвечает?\"</p><p>Ответ: Он контролирует \"агрессивность\" GC. В случае если он будет 100, то это будет означать, что GC будет начинаться если размер хипа вырос на 100% относительно предыдущего значения.</p><p><br></p><p>Дополнительный вопрос: \"Откуда начинают считаться достигаемые объекты?\"</p><p>Ответ: Cтек и глобальные переменные</p>",
                "difficulty": "GRADE_19"
            },
            {
                "content": "<p>Дополнительный вопрос: \"Будет ли GC чистить объекты из sync.Pool?\" Ответ: Будет, но не полностью. Перед началом GC, объекты из общего пула будут перенесены в т.н. victim pool, оттуда GC их почистит.</p><p><br></p><p><br></p>",
                "difficulty": "GRADE_20"
            }
        ],
        "blocks": [
            {
                "ID": 137,
                "title": "Go (теория)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2024-11-06T12:10:39Z",
        "interviewCount": 22,
        "question": "<p>Как работает сборка мусора в Go?</p>",
        "time": 5,
        "title": "GC в Go"
    },
    {
        "ID": 2664,
        "answers": [
            {
                "content": "<p>Это единица структурирования виртуальной памяти, позволяет мапить виртуальную память на физическую либо на файл. Так же страничная организация позволяет защищать некоторые куски памяти от записи.  </p>",
                "difficulty": "GRADE_19"
            },
            {
                "content": "<p>Дополнительные вопросы:</p><ol><li data-list=\"ordered\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Если страницы мапятся на физическую память, то каждое обращение к памяти это поиск в некоторой мапе. Как это может работать быстро?</li><li data-list=\"ordered\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Что такое hugepages?</li></ol><p><br></p><p>Ответы:</p><ol><li data-list=\"ordered\"><span class=\"ql-ui\" contenteditable=\"false\"></span>У процессора есть специальный кеш для этого мапинга, поэтому если программа работает с близкими адресами памяти, то это работает очень быстро </li><li data-list=\"ordered\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Это механизм через который можно менять размер страницы со стандартных 4Кб до бОльших значений, например 256Мб. Это нужно для высокопроизодительных программ типа баз данных как раз для того, чтобы уменьшить кол-во обращений к мапингу.</li></ol>",
                "difficulty": "GRADE_20"
            }
        ],
        "blocks": [
            {
                "ID": 141,
                "title": "ОС, сети и эксплуатация"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2024-09-03T14:45:52Z",
        "interviewCount": 21,
        "question": "<p>Что такое страница памяти?</p>",
        "time": 5,
        "title": "Что такое страница памяти?"
    },
    {
        "ID": 2770,
        "answers": [
            {
                "content": "<p>Для работы даже простой hello world есть большое количество библиотек, котоырй будут работать: runtime (gc, рефлексия, паники) , также нужно подключить пакет fmt, где есть собственно имплементация Printf. </p><p><br></p><p>В бинаре будет содержаться информация для runtime инфа для работы рефлексии, динамической проверки типов, работы ПС, стек трейсов при панике, работы дебагеров и тд.  Можно вспомнить про инлайнинг функций/bound checks и тд, которые можно отключить.</p>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 137,
                "title": "Go (теория)"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2024-11-06T12:51:10Z",
        "interviewCount": 12,
        "question": "<p>Написали hello world, собрали приложение, почему бинарь весит 2МБ?</p>",
        "time": 2,
        "title": "Бинарь собранный Go"
    },
    {
        "ID": 2742,
        "additional": "<p>Можно пообщаться на следующие темы:</p><p><br></p><p><strong>Каналы:</strong></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Базовая теория</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Как ограничить кол-во запросов к API до 1-го в момент времени (семафор на каналах)</li></ol><p><strong>Мьютексы:</strong></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Базовая теория</li></ol>",
        "answers": [
            {
                "content": "<p>-</p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>На данный грейд ожидаем:</p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>может назвать готовые библиотеки <a href=\"https://github.com/golang/groupcache/tree/master/singleflight\" rel=\"noopener noreferrer\" target=\"_blank\">singleflight</a> или <a href=\"https://pkg.go.dev/golang.org/x/sync/singleflight\" rel=\"noopener noreferrer\" target=\"_blank\">sync/singleflight</a></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Реализация решения </li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Смог рассказать как это работает</li></ol><p><br></p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"go\"><span class=\"ql-token hljs-keyword\">type Dadata interface {</span></div><div class=\"ql-code-block\" data-language=\"go\">\tGetAddressByFias(ctx context.Context, address <span class=\"ql-token hljs-type\">string) (*AddressByFias, error)</span></div><div class=\"ql-code-block\" data-language=\"go\">}</div><div class=\"ql-code-block\" data-language=\"go\"><br></div><div class=\"ql-code-block\" data-language=\"go\"><span class=\"ql-token hljs-keyword\">type response struct {</span></div><div class=\"ql-code-block\" data-language=\"go\">\tch   <span class=\"ql-token hljs-keyword\">chan struct{}</span></div><div class=\"ql-code-block\" data-language=\"go\">\tvalue *AddressByFias</div><div class=\"ql-code-block\" data-language=\"go\">\terr  <span class=\"ql-token hljs-type\">error</span></div><div class=\"ql-code-block\" data-language=\"go\">}</div><div class=\"ql-code-block\" data-language=\"go\"><br></div><div class=\"ql-code-block\" data-language=\"go\"><span class=\"ql-token hljs-keyword\">type DadataAPIClient struct {</span></div><div class=\"ql-code-block\" data-language=\"go\">\texternalAPI Dadata</div><div class=\"ql-code-block\" data-language=\"go\">    <span class=\"ql-token hljs-comment\">// от кандидата требуется порасуждать про время хранения</span></div><div class=\"ql-code-block\" data-language=\"go\">\tm      <span class=\"ql-token hljs-keyword\">map[string]*response</span></div><div class=\"ql-code-block\" data-language=\"go\">\tmtx    sync.Mutex</div><div class=\"ql-code-block\" data-language=\"go\">}</div><div class=\"ql-code-block\" data-language=\"go\"><br></div><div class=\"ql-code-block\" data-language=\"go\"><span class=\"ql-token hljs-function\">func (c *DadataAPIClient) GetAddressByFias(ctx context.Context, address string) (*AddressByFias, error) {</span></div><div class=\"ql-code-block\" data-language=\"go\">\td.mtx.Lock()</div><div class=\"ql-code-block\" data-language=\"go\">\t<span class=\"ql-token hljs-comment\">// Если понимаем, что одна из конкурентно работающих горутин уже взяла в работу этот ключ,</span></div><div class=\"ql-code-block\" data-language=\"go\">\t<span class=\"ql-token hljs-comment\">// то встаем на ожидание ответа от нее.</span></div><div class=\"ql-code-block\" data-language=\"go\">\t<span class=\"ql-token hljs-comment\">// Иными словами, все горутины паркуются при чтении из канала ch, пока туда не поступит информация,</span></div><div class=\"ql-code-block\" data-language=\"go\">\t<span class=\"ql-token hljs-comment\">// что результат был получен.</span></div><div class=\"ql-code-block\" data-language=\"go\">\t<span class=\"ql-token hljs-keyword\">if resp, ok := d.m[address]; ok {</span></div><div class=\"ql-code-block\" data-language=\"go\">\t\td.mtx.Unlock()</div><div class=\"ql-code-block\" data-language=\"go\">\t\t<span class=\"ql-token hljs-comment\">// Ожидаем готовности данных к выдаче</span></div><div class=\"ql-code-block\" data-language=\"go\">\t\t&lt;-resp.ch</div><div class=\"ql-code-block\" data-language=\"go\">\t\t<span class=\"ql-token hljs-keyword\">return resp.value, resp.err</span></div><div class=\"ql-code-block\" data-language=\"go\">\t}</div><div class=\"ql-code-block\" data-language=\"go\"><br></div><div class=\"ql-code-block\" data-language=\"go\">\td.m[address] = &amp;response{</div><div class=\"ql-code-block\" data-language=\"go\">\t\tch: <span class=\"ql-token hljs-built_in\">make(chan struct{}),</span></div><div class=\"ql-code-block\" data-language=\"go\">\t}</div><div class=\"ql-code-block\" data-language=\"go\">\td.mtx.Unlock()</div><div class=\"ql-code-block\" data-language=\"go\"><br></div><div class=\"ql-code-block\" data-language=\"go\">\t<span class=\"ql-token hljs-comment\">// делаем поход в апи</span></div><div class=\"ql-code-block\" data-language=\"go\">\tfias, err := d.externalAPI.GetAddressByFias(ctx, address)</div><div class=\"ql-code-block\" data-language=\"go\"><br></div><div class=\"ql-code-block\" data-language=\"go\">\t<span class=\"ql-token hljs-comment\">// готовим данные к выдаче</span></div><div class=\"ql-code-block\" data-language=\"go\">\td.mtx.Lock()</div><div class=\"ql-code-block\" data-language=\"go\">\td.m[address].value = fias</div><div class=\"ql-code-block\" data-language=\"go\">\td.m[address].err = err</div><div class=\"ql-code-block\" data-language=\"go\">\td.mtx.Unlock()</div><div class=\"ql-code-block\" data-language=\"go\"><br></div><div class=\"ql-code-block\" data-language=\"go\">\t<span class=\"ql-token hljs-comment\">// Закрывая канал, мы делаем broadcast всем ожидающим горутинам, что</span></div><div class=\"ql-code-block\" data-language=\"go\">\t<span class=\"ql-token hljs-comment\">// можно отдавать данные наружу. Чтение из закрытого канала не блокирующее и возвращает zero value</span></div><div class=\"ql-code-block\" data-language=\"go\">\t<span class=\"ql-token hljs-built_in\">close(d.m[address].ch)</span></div><div class=\"ql-code-block\" data-language=\"go\">\t</div><div class=\"ql-code-block\" data-language=\"go\">\t<span class=\"ql-token hljs-comment\">// отдаем из рабочей горутины данные, полученные ею из апи</span></div><div class=\"ql-code-block\" data-language=\"go\">\t<span class=\"ql-token hljs-keyword\">return fias, err</span></div><div class=\"ql-code-block\" data-language=\"go\">}</div><div class=\"ql-code-block\" data-language=\"go\"><br></div></pre>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>На данный грейд ожидаем:</p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Условия 18-го грейда</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Может рассказать как решать проблему если наш сервис горизонтально масштабирован, вопрос про <strong>distribution lock</strong></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Может рассказать что такое <strong>lock contention</strong></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Может рассказать в чем разница между <strong>optimistic lock &amp; pessimistic lock</strong></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Может порассуждать про хранение результата, в краткосрочной или долгосрочной преспективе</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Можно ли хранить пустые ответы?</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Как инвалидировать кеш?</li></ol>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 140,
                "title": "Архитектура"
            },
            {
                "ID": 135,
                "title": "GO"
            }
        ],
        "createdAt": "2024-10-07T10:24:49Z",
        "interviewCount": 8,
        "question": "<p>Нашей команде необходимо произвести интеграцию с внешнем сервисом (например dadata). API у данного сервиса платное по этой причине необходимо реализовать механизм, который позволит оптимизировать взаимодействие с внешним API и ограничить кол-во <strong>ИДЕНТИЧНЫХ</strong> одновременных запросов к публичному API.</p><p><br></p><p><br></p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"go\"><span class=\"ql-token hljs-keyword\">type Dadata interface {</span></div><div class=\"ql-code-block\" data-language=\"go\">\tGetAddressByFias(ctx context.Context, address <span class=\"ql-token hljs-type\">string) (*AddressByFias, error)</span></div><div class=\"ql-code-block\" data-language=\"go\">}</div><div class=\"ql-code-block\" data-language=\"go\"><br></div><div class=\"ql-code-block\" data-language=\"go\"><span class=\"ql-token hljs-keyword\">type DadataAPIClient struct {</span></div><div class=\"ql-code-block\" data-language=\"go\">\texternalAPI Dadata</div><div class=\"ql-code-block\" data-language=\"go\">}</div><div class=\"ql-code-block\" data-language=\"go\"><br></div><div class=\"ql-code-block\" data-language=\"go\"><span class=\"ql-token hljs-function\">func (c *DadataAPIClient) GetAddressByFias(ctx context.Context, address string) (*AddressByFias, error) {</span></div><div class=\"ql-code-block\" data-language=\"go\">\t<span class=\"ql-token hljs-keyword\">return  d.externalAPI.GetAddressByFias(ctx, address)</span></div><div class=\"ql-code-block\" data-language=\"go\">}</div><div class=\"ql-code-block\" data-language=\"go\"><br></div></pre>",
        "time": 30,
        "title": "Singleflight"
    }
]