[
    {
        "ID": 2781,
        "answers": [
            {
                "content": "<p><span style=\"background-color: rgba(63, 67, 80, 0.04); color: rgb(63, 67, 80);\">Данное решение задачи неэффективное с точки зрения сложности алгоритмов ( O(N^2)), но показывает что кандидат умеет работать с коллекциями и строковыми значениями в базовом его понятии</span></p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def</span> <span class=\"ql-token hljs-title\">func</span>(<span class=\"ql-token hljs-params\">s</span>):</div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-comment\">#Создаем словарь для подсчета символов в строке</span></div><div class=\"ql-code-block\" data-language=\"python\">    count = {}</div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-comment\">#Прогоняем строку на кол-во уникальных символов</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-keyword\">for</span> i <span class=\"ql-token hljs-keyword\">in</span> s:</div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-comment\">#Проверяем что символ есть в словаре (Если нет. то дефолтом ставится 1, если есть прибавляет к ключу +1)</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">if</span> i <span class=\"ql-token hljs-keyword\">in</span> count:</div><div class=\"ql-code-block\" data-language=\"python\">            count[i] += <span class=\"ql-token hljs-number\">1</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">else</span>:</div><div class=\"ql-code-block\" data-language=\"python\">            count[i] = <span class=\"ql-token hljs-number\">1</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-comment\">#Создаем строку для результата</span></div><div class=\"ql-code-block\" data-language=\"python\">    result_str = <span class=\"ql-token hljs-string\">''</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-comment\"># Прогоняем ту же строку уже для собрания результата</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-keyword\">for</span> i <span class=\"ql-token hljs-keyword\">in</span> s:</div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-comment\"># Проверяем что символ уникален и вставляем в строку (</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">if</span> count[i] == <span class=\"ql-token hljs-number\">1</span>:</div><div class=\"ql-code-block\" data-language=\"python\">            result_str += <span class=\"ql-token hljs-string\">'('</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-comment\">#Иначе символ не уникален и вставляем в строку )</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">else</span>:</div><div class=\"ql-code-block\" data-language=\"python\">            result_str += <span class=\"ql-token hljs-string\">')'</span></div><div class=\"ql-code-block\" data-language=\"python\">     <span class=\"ql-token hljs-comment\">#Выводим результат</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-built_in\">print</span> result_str</div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\">func(<span class=\"ql-token hljs-string\">\"sunny string chapter\"</span>)</div></pre>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p><span style=\"background-color: rgba(63, 67, 80, 0.04); color: rgb(63, 67, 80);\">Данное решение показывает, что кандидат отлично знает работу алгоритмов и работу с ЯП Python (Решение задачи реализовано по сложности O(n))</span></p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def</span> <span class=\"ql-token hljs-title\">func</span>(<span class=\"ql-token hljs-params\">s</span>):</div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-comment\">#Создаем пустой словарь для подсчета символов в строке</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-built_in\">dict</span>= {}</div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-comment\">#Непосредственно сам подсчет (Если символы не найдены методом get то делаем +1(Уникальный) если символы уже ранее встречались, то кол-во символов будет 1(которое вернется по дефолту вначале) +1 найденый</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-keyword\">for</span> i <span class=\"ql-token hljs-keyword\">in</span> <span class=\"ql-token hljs-built_in\">str</span>:</div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-built_in\">dict</span>[i] = <span class=\"ql-token hljs-built_in\">dict</span>.get(i, <span class=\"ql-token hljs-number\">0</span>) + <span class=\"ql-token hljs-number\">1</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-comment\">#Далее мы с помощью функции join к пустой строке присоединяем наш массив из символов ( и ) а определяем какой вставить с помощью условия за каждый найденый символ с помощью цикла for) и выводим в консоль результат</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-built_in\">print</span>(<span class=\"ql-token hljs-string\">\"\"</span>.join(<span class=\"ql-token hljs-string\">'('</span> <span class=\"ql-token hljs-keyword\">if</span> word_dict[i] == <span class=\"ql-token hljs-number\">1</span> <span class=\"ql-token hljs-keyword\">else</span> <span class=\"ql-token hljs-string\">')'</span> <span class=\"ql-token hljs-keyword\">for</span> i <span class=\"ql-token hljs-keyword\">in</span> word))</div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\">s = <span class=\"ql-token hljs-string\">\"sunny string chapter\"</span></div><div class=\"ql-code-block\" data-language=\"python\">func(s)</div></pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2024-12-23T15:47:25Z",
        "interviewCount": 1,
        "question": "<p><span style=\"background-color: rgba(63, 67, 80, 0.04); color: rgb(63, 67, 80);\">Дана строка \"sunny string chapter\" (Или любая другая на вкус и цвет, главное чтобы несколько слов было), Необходимо преобразовать ее в набор символов состоящих из ( - Если символ уникальный и ) - Если символ повторяется в строке</span></p><p><br></p><p><br></p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def</span> <span class=\"ql-token hljs-title\">func</span>(<span class=\"ql-token hljs-params\">s</span>):</div><div class=\"ql-code-block\" data-language=\"python\">    ...</div></pre>",
        "time": 20,
        "title": "Замена символов в строке"
    },
    {
        "ID": 2524,
        "answers": [
            {
                "content": "<pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">import requests</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">import json</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">from typing import Optional</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">import time </span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def log(text: str):</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-built_in\">print(text)</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def parse() -&gt; Optional[list]:</span></div><div class=\"ql-code-block\" data-language=\"python\">    url = <span class=\"ql-token hljs-string\">\"https://company.local/api/v1/devices\"</span></div><div class=\"ql-code-block\" data-language=\"python\">    response = requests.get(url)</div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-keyword\">if response.status_code == 200:</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">try:</span></div><div class=\"ql-code-block\" data-language=\"python\">            <span class=\"ql-token hljs-keyword\">return json.loads(response.text)</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">except json.DecodeError:</span></div><div class=\"ql-code-block\" data-language=\"python\">            log(<span class=\"ql-token hljs-string\">\"Ошибка парсинга\")</span></div><div class=\"ql-code-block\" data-language=\"python\">            <span class=\"ql-token hljs-keyword\">return None</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">except Exception as e:</span></div><div class=\"ql-code-block\" data-language=\"python\">            log(<span class=\"ql-token hljs-string\">f\"Неизвестная ошибка: {e}\")</span></div><div class=\"ql-code-block\" data-language=\"python\">            <span class=\"ql-token hljs-keyword\">return None</span></div><div class=\"ql-code-block\" data-language=\"python\">            </div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-keyword\">return None</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def save(data: list, path: str):</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-keyword\">with open(path, \"w\") as f:</span></div><div class=\"ql-code-block\" data-language=\"python\">        f.write(<span class=\"ql-token hljs-string\">\"device_name,interface_name\")</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">for device in data:</span></div><div class=\"ql-code-block\" data-language=\"python\">            <span class=\"ql-token hljs-keyword\">for interface in device[\"interfaces\"]:</span></div><div class=\"ql-code-block\" data-language=\"python\">                f.write(<span class=\"ql-token hljs-string\">f\"{device['name']},{interface['name']}\")</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def schedule(path: str):</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-keyword\">while True:</span></div><div class=\"ql-code-block\" data-language=\"python\">        data = parse()</div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">if data:</span></div><div class=\"ql-code-block\" data-language=\"python\">            save(data, path)</div><div class=\"ql-code-block\" data-language=\"python\">        time.sleep(<span class=\"ql-token hljs-number\">60)</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\">schedule(<span class=\"ql-token hljs-string\">\"dump.csv\")</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div></pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2024-07-18T11:22:12Z",
        "interviewCount": 40,
        "question": "<p>Страница <a href=\"https://company.local/api/v1/devices\" rel=\"noopener noreferrer\" target=\"_blank\"><a href=\"https://company.local/api/v1/devices\" rel=\"noopener noreferrer\" target=\"_blank\">https://company.local/api/v1/devices</a></a> возвращает список устройств в JSON формате:</p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"json\"><span class=\"ql-token hljs-punctuation\">[</span></div><div class=\"ql-code-block\" data-language=\"json\">    <span class=\"ql-token hljs-punctuation\">{</span></div><div class=\"ql-code-block\" data-language=\"json\">        <span class=\"ql-token hljs-attr\">\"id\":</span> 1<span class=\"ql-token hljs-punctuation\">,</span></div><div class=\"ql-code-block\" data-language=\"json\">        <span class=\"ql-token hljs-attr\">\"name\":</span> \"Device1\"<span class=\"ql-token hljs-punctuation\">,</span></div><div class=\"ql-code-block\" data-language=\"json\">        <span class=\"ql-token hljs-attr\">\"interfaces\":</span> [</div><div class=\"ql-code-block\" data-language=\"json\">            <span class=\"ql-token hljs-punctuation\">{</span></div><div class=\"ql-code-block\" data-language=\"json\">                <span class=\"ql-token hljs-attr\">\"id\":</span> 101<span class=\"ql-token hljs-punctuation\">,</span></div><div class=\"ql-code-block\" data-language=\"json\">                <span class=\"ql-token hljs-attr\">\"name\":</span> \"Ethernet0\"</div><div class=\"ql-code-block\" data-language=\"json\">            <span class=\"ql-token hljs-punctuation\">},</span></div><div class=\"ql-code-block\" data-language=\"json\">            <span class=\"ql-token hljs-punctuation\">{</span></div><div class=\"ql-code-block\" data-language=\"json\">                <span class=\"ql-token hljs-attr\">\"id\":</span> 102<span class=\"ql-token hljs-punctuation\">,</span></div><div class=\"ql-code-block\" data-language=\"json\">                <span class=\"ql-token hljs-attr\">\"name\":</span> \"Ethernet1\"</div><div class=\"ql-code-block\" data-language=\"json\">            <span class=\"ql-token hljs-punctuation\">},</span></div><div class=\"ql-code-block\" data-language=\"json\">\t\t\t...</div><div class=\"ql-code-block\" data-language=\"json\">        <span class=\"ql-token hljs-punctuation\">]</span></div><div class=\"ql-code-block\" data-language=\"json\">    <span class=\"ql-token hljs-punctuation\">},</span></div><div class=\"ql-code-block\" data-language=\"json\">\t...</div><div class=\"ql-code-block\" data-language=\"json\"><span class=\"ql-token hljs-punctuation\">]</span></div></pre><p><br></p><p>Задача - получать ежеминутно список и записывать в csv-файл с заголовками</p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plaintext\">device_name,interface_name</div></pre>",
        "time": 15,
        "title": "Перекладывание джейсонов"
    },
    {
        "ID": 2480,
        "answers": [
            {
                "content": "<pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"python\">assert order == [\"session_fixture\", \"module_fixture\", \"autouse_fixture\", \"fixture_3\", \"fixture_1\", \"fixture_2\"]</div></pre><p><br></p><p><span style=\"color: rgb(63, 67, 80); background-color: rgba(63, 67, 80, 0.04);\">может с подсказками справиться с задачей. имеет понимание, что при autouse=True фикстура используется во всех тестах, знает, в каком порядке будут вызваны фикстуры </span><em style=\"color: rgb(63, 67, 80); background-color: rgba(63, 67, 80, 0.04);\">fixture_1, fixture_2, fixture_3, fixture_4</em><span style=\"color: rgb(63, 67, 80); background-color: rgba(63, 67, 80, 0.04);\">. упомянет, что </span><em style=\"color: rgb(63, 67, 80); background-color: rgba(63, 67, 80, 0.04);\">fixture_4</em><span style=\"color: rgb(63, 67, 80); background-color: rgba(63, 67, 80, 0.04);\"> будет вызвана после </span><em style=\"color: rgb(63, 67, 80); background-color: rgba(63, 67, 80, 0.04);\">fixture_3</em><span style=\"color: rgb(63, 67, 80); background-color: rgba(63, 67, 80, 0.04);\">.</span></p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"python\">assert order == [\"session_fixture\", \"module_fixture\", \"autouse_fixture\", \"fixture_3\", \"fixture_1\", \"fixture_2\"]</div></pre><p><br></p><p><span style=\"color: rgb(63, 67, 80); background-color: rgba(63, 67, 80, 0.04);\">может самостоятельно решить задачу. знает, что в рамках скоупа autouse фикстуры вызываются раньше других, знает последовательность вызова фикстур session-module-function</span></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2024-06-20T13:18:31Z",
        "interviewCount": 71,
        "question": "<p><strong style=\"background-color: rgba(63, 67, 80, 0.04); color: rgb(63, 67, 80);\">Описание задачи</strong><span style=\"background-color: rgba(63, 67, 80, 0.04); color: rgb(63, 67, 80);\"> - Порядок выполнения фикстур</span></p><p><strong style=\"background-color: rgba(63, 67, 80, 0.04); color: rgb(63, 67, 80);\">Что проверяем</strong><span style=\"background-color: rgba(63, 67, 80, 0.04); color: rgb(63, 67, 80);\"> - знания кандидата в порядке очередности выполнения фикстур</span></p><p><strong style=\"background-color: rgba(63, 67, 80, 0.04); color: rgb(63, 67, 80);\">Задача</strong><span style=\"background-color: rgba(63, 67, 80, 0.04); color: rgb(63, 67, 80);\"> Проанализировать код и написать в тесте корректный assert для order</span></p><p><br></p><p><br></p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\">order = []</div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-meta\">@pytest.fixture(scope=\"session\")</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def</span> <span class=\"ql-token hljs-title\">session_fixture</span>():</div><div class=\"ql-code-block\" data-language=\"python\">    order.append(<span class=\"ql-token hljs-string\">\"session_fixture\"</span>)</div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-meta\">@pytest.fixture(scope=\"module\")</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def</span> <span class=\"ql-token hljs-title\">module_fixture</span>():</div><div class=\"ql-code-block\" data-language=\"python\">    order.append(<span class=\"ql-token hljs-string\">\"module_fixture\"</span>)</div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-meta\">@pytest.fixture</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def</span> <span class=\"ql-token hljs-title\">fixture_1</span>(<span class=\"ql-token hljs-params\">fixture_3, fixture_4</span>):</div><div class=\"ql-code-block\" data-language=\"python\">    order.append(<span class=\"ql-token hljs-string\">\"fixture_1\"</span>)</div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-meta\">@pytest.fixture(scope=\"function\")</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def</span> <span class=\"ql-token hljs-title\">fixture_3</span>():</div><div class=\"ql-code-block\" data-language=\"python\">    order.append(<span class=\"ql-token hljs-string\">\"fixture_3\"</span>)</div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-meta\">@pytest.fixture(autouse=True)</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def</span> <span class=\"ql-token hljs-title\">autouse_fixture</span>():</div><div class=\"ql-code-block\" data-language=\"python\">    order.append(<span class=\"ql-token hljs-string\">\"autouse_fixture\"</span>)</div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-meta\">@pytest.fixture</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def</span> <span class=\"ql-token hljs-title\">fixture_2</span>():</div><div class=\"ql-code-block\" data-language=\"python\">    order.append(<span class=\"ql-token hljs-string\">\"fixture_2\"</span>)</div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-meta\">@pytest.fixture</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def</span> <span class=\"ql-token hljs-title\">fixture_4</span>():</div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-keyword\">yield</span></div><div class=\"ql-code-block\" data-language=\"python\">    order.append(<span class=\"ql-token hljs-string\">\"fixture_4\"</span>)</div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def</span> <span class=\"ql-token hljs-title\">test_order</span>(<span class=\"ql-token hljs-params\">fixture_1, module_fixture, fixture_2, session_fixture</span>):</div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-keyword\">pass</span></div></pre>",
        "time": 10,
        "title": "Порядок выполнения фикстур"
    },
    {
        "ID": 2328,
        "additional": "<p>18 грейд:</p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>написано работающее на представленной строке решение</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>нет избыточных проверок либо они скомбинированы после уточняющего вопроса</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>написаны тесты на:</li></ol><p>строку с одинаковыми числами</p><p>строку с пробелами</p><p>строку без чисел</p><p>строку с отрицательными числами</p><p>строку без букв</p><p>пустую строку</p><p>строку с числом, начинающимся на 0 – пример, 0123</p><p>строку с нецелыми числами (например, float)</p><p>строку с максимальным числом в начале, в середине, в конце</p><p><br></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>задача может быть решена без встроенной функции max, например, храним в переменной найденное число -&gt; сравниваем с новым найденным -&gt; если новое число больше, заменяем значение в переменной</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>для решения использованы регулярные выражения (понимает плюсы и минусы regex – скорость, сложность, читабельность)</li></ol><p><br></p><p>19+ грейд:</p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>всё, что указано для 18 грейда</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>ответил на вопрос про сложность реализованного решения (почти всегда это O(n))</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>в решении обработана строка с отрицательными числами</li></ol>",
        "answers": [
            {
                "content": "<pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-true\">import math</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-true\">def solution(example_string: str) -&gt; int | str:</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-true\">if not any(symbol.isdigit() for symbol in example_string):</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-true\">return \"There is no numbers in the string\"</span></div><div class=\"ql-code-block\" data-language=\"python\">    max_number = -math.inf</div><div class=\"ql-code-block\" data-language=\"python\">    current = <span class=\"ql-token hljs-true\">\"\"</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-true\">for symbol in example_string:</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-true\">if symbol == \"-\":</span></div><div class=\"ql-code-block\" data-language=\"python\">            <span class=\"ql-token hljs-true\">if current:</span></div><div class=\"ql-code-block\" data-language=\"python\">                max_number = <span class=\"ql-token hljs-true\">max(max_number, int(current))</span></div><div class=\"ql-code-block\" data-language=\"python\">            current = <span class=\"ql-token hljs-true\">\"-\"</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-true\">elif symbol.isdigit():</span></div><div class=\"ql-code-block\" data-language=\"python\">            current += symbol</div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-true\">else:</span></div><div class=\"ql-code-block\" data-language=\"python\">            max_number = <span class=\"ql-token hljs-true\">max(max_number, int(current))</span></div><div class=\"ql-code-block\" data-language=\"python\">            current = <span class=\"ql-token hljs-true\">\"\"</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-true\">if current:</span></div><div class=\"ql-code-block\" data-language=\"python\">        max_number = <span class=\"ql-token hljs-true\">max(max_number, int(current))</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-true\">return max_number</span></div></pre><p><br></p><p>Через регулярное выражение</p><p><br></p><p><br></p><p><br></p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"python\">import re</div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\">def solution4(string_with_numbers: str):</div><div class=\"ql-code-block\" data-language=\"python\">    return max(int(digits) for digits in re.findall(r\"\\d+\", string_with_numbers))</div></pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2024-03-05T12:20:30Z",
        "interviewCount": 286,
        "question": "<p>Есть строка из произвольных символов, нужно найти в ней максимальный int.</p><p>Пример строки:</p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">s = \"df122gk123dfgd124dfghjk1sdfg2db99\"</div></pre><p><br></p><p>Нужно протестировать своё решение, пример теста:</p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">assert solution(\"h33h23j1\") == 33, f\"Got {solution('h33h23j1')}, expected 33\"</div></pre>",
        "time": 15,
        "title": "Найти максимальное число в строке"
    },
    {
        "ID": 2193,
        "answers": [
            {
                "content": "<ul><li>% operator: <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">'Hello, %s' % (\"Ozon\")</code></li><li>format <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">'Hello, {}'.format(\"Ozon\")</code></li><li>f-строки <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">f'Hello, {\"Ozon\"}'</code></li></ul>",
                "difficulty": "GRADE_SCREENING"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T11:24:38Z",
        "interviewCount": 78,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Как собрать строку? Напишите несколько решений.</span></p>",
        "time": 5,
        "title": "Работа со строками: интерполяция строк"
    },
    {
        "ID": 2192,
        "additional": "<p>Q: <em style=\"color: rgb(127, 140, 141);\">Что можете рассказать про range(10)? Будет ли он хорошо работать, если там большое число?</em></p><p>A: Будет, в Python 3.* он работает как генератор, до Python 3.* для этого предназначался <code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">xrange()</code></p>",
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">[i*i for i in range(10)]\n</pre>",
                "difficulty": "GRADE_SCREENING"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T11:22:27Z",
        "interviewCount": 564,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Посчитайте однострочником квадраты чисел от 0 до 9</span></p>",
        "time": 5,
        "title": "Словари: квадраты чисел от 0 до 9"
    },
    {
        "ID": 2191,
        "additional": "<p>Q: <em style=\"color: rgb(127, 140, 141);\">Зачем в нем нужен dict()?</em></p><p>A: Без него мы увидим объект, возвращаемый zip</p><p>Q: <em style=\"color: rgb(127, 140, 141);\">Что будет, если длины кортежей не равны?</em></p><p>A: Ошибки не будет, zip возьмет одинаковое число элементов из обоих кортежей</p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">&gt;&gt;&gt; dict(zip(('a','b','c','d','e'),(1,2)))\n{'a': 1, 'b': 2}\n</pre>",
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">{'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n</pre><p><br></p>",
                "difficulty": "GRADE_SCREENING"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T11:17:16Z",
        "interviewCount": 224,
        "question": "<p>Представить результат команды zip. Что выведет выражение?</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">dict(zip(('a','b','c','d','e'),(1,2,3,4,5)))\n</pre>",
        "time": 5,
        "title": "Словари: zip"
    },
    {
        "ID": 2190,
        "additional": "<p>Q: <em style=\"color: rgb(127, 140, 141);\">Что такое sorted?</em></p><p>A: В питоне Batteries included - это встроенная функция</p>",
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">[1, 2, 3, 4, 5]\n</pre>",
                "difficulty": "GRADE_SCREENING"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T11:14:09Z",
        "interviewCount": 156,
        "question": "<p>Что выведет выражение?</p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">D = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nsorted([D[s] for s in D])\n</pre>",
        "time": 5,
        "title": "Словари: sorted и list comprehension"
    },
    {
        "ID": 2189,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">[<span class=\"hljs-meta\">1, 2</span>]\n</pre><p><br></p>",
                "difficulty": "GRADE_SCREENING"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T11:11:20Z",
        "interviewCount": 193,
        "question": "<p>Что выведет выражение?</p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">D = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n[i for i in range(3) if i in D.values()]\n</pre>",
        "time": 5,
        "title": "Словари: Условие в list comprehension"
    },
    {
        "ID": 2188,
        "additional": "<p>Q: <em style=\"color: rgb(127, 140, 141);\">Зачем это надо?</em></p><p>A: Функцию не нужно импортировать отдельно; легче читать и понимать, что функция относится к классу</p>",
        "answers": [
            {
                "content": "<p>Это декоратор для методов класса, которые не меняют его состояние/данные</p>",
                "difficulty": "GRADE_SCREENING"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T11:01:05Z",
        "interviewCount": 152,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Что такое и зачем нужен </span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">@staticmethod</code><span style=\"color: rgb(52, 73, 94);\">?</span></p>",
        "time": 5,
        "title": "Декораторы: @staticmethod"
    },
    {
        "ID": 2187,
        "additional": "<p><span style=\"color: rgb(0, 26, 52);\">Q: Напишите пример кода</span><em style=\"color: rgb(127, 140, 141);\">?</em></p><p>A:</p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">class MyComparableClass:\n\n  def __init__(self, val):\n     self.val = val\n\n  def __eq__(self, other):\n     return self.val == other.val\n</pre>",
        "answers": [
            {
                "content": "<p>Нужно описать магический метод <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">__eq__</code> Вообще методов для сравнения много - <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">__lt__, __le__</code> и так далее</p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T10:59:14Z",
        "interviewCount": 104,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Как сравнить два экземпляра класса?</span></p>",
        "time": 10,
        "title": "ООП: сравнение инстансов №2"
    },
    {
        "ID": 2186,
        "additional": "<p>Q: <em style=\"color: rgb(127, 140, 141);\">А если каскадным присвоением?</em></p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">a = b = C()\n\na == b\n</pre>",
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Будет </span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">False</code><span style=\"color: rgb(52, 73, 94);\">, это разные инстансы</span></p>",
                "difficulty": "GRADE_SCREENING"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T10:57:30Z",
        "interviewCount": 643,
        "question": "<p>Что будет результатом?</p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">class C:\n    pass\n \na = C()\nb = C()\n\na == b\n</pre>",
        "time": 5,
        "title": "ООП: сравнение инстансов №1"
    },
    {
        "ID": 2185,
        "additional": "<p>Q: <em style=\"color: rgb(127, 140, 141);\">Что такое </em><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\"><em>__repr__()</em></code><em style=\"color: rgb(127, 140, 141);\">?</em></p><p>A: Ещё одно строковое представление, отображается при добавлении в контейнеры (например в списки)</p><p><br></p><p>Q: <em style=\"color: rgb(127, 140, 141);\">В чем разница?</em></p><p>A: <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">__str__()</code> используется, например, при <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">print()</code> или <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">str()</code> - оно должна быть readable, <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">__repr__()</code> чаще используют для отладки;</p>",
        "answers": [
            {
                "content": "<p>Отладка/просто строковое представление инстанса</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">IPAddress</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, ip</span>):\n        self.ip = ip\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>):\n       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f\"IPAddress: <span class=\"hljs-subst\">{self.ip}</span>\"</span>\n</pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T10:53:34Z",
        "interviewCount": 31,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Для чего используется </span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">__str__</code><span style=\"color: rgb(52, 73, 94);\">?</span></p>",
        "time": 10,
        "title": "Магические методы: __str__"
    },
    {
        "ID": 2184,
        "additional": "<p>Q: <em style=\"color: rgb(127, 140, 141);\">Что изменится при присвоении?</em></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">x[0][3] = 10\n</pre><p>A: \"Python has names\" - у нас не три разных коробочки с числами</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">[[1, 2, 3, 10], [1, 2, 3, 10], [1, 2, 3, 10]]\n</pre><p>NB вот еще пример с инстансом, показывающий, как это работает</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">C</span>:\n    <span class=\"hljs-title\">pass</span>\n\n<span class=\"hljs-title\">a</span> = C()\n[<span class=\"hljs-meta\">a</span>] * <span class=\"hljs-number\">3</span>\n[&lt;__main__.C <span class=\"hljs-built_in\">object</span> at <span class=\"hljs-number\">0x110060670</span>&gt;, &lt;__main__.C <span class=\"hljs-built_in\">object</span> at <span class=\"hljs-number\">0x110060670</span>&gt;, &lt;__main__.C <span class=\"hljs-built_in\">object</span> at <span class=\"hljs-number\">0x110060670</span>&gt;]\n</pre><p><br></p>",
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">[[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T10:50:03Z",
        "interviewCount": 250,
        "question": "<p>Представить результат выражения</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attribute\">x</span> = [[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]] * <span class=\"hljs-number\">3</span>\n</pre>",
        "time": 10,
        "title": "Списки: list * 3"
    },
    {
        "ID": 2183,
        "additional": "<p>Q: <em style=\"color: rgb(127, 140, 141);\">Как проверить, что результат это </em><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\"><em>None</em></code><em style=\"color: rgb(127, 140, 141);\">?</em></p><p>A: Для этого есть ключевое слово <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">is</code></p><p><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">if pprinter(\"Hello, Ozon!\") is None: </code></p><p>Q: <em style=\"color: rgb(127, 140, 141);\">Какие реальные случаи применения могут быть?</em></p><p>A: Неуспешное подключение к БД, например - может вернуть <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">None</code></p>",
        "answers": [
            {
                "content": "<p>Она вернет <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">None</code></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">&gt;&gt;&gt; a = pprinter(\"Hi\")\nHi\n&gt;&gt;&gt; a\n&gt;&gt;&gt; type(a)\n&lt;class 'NoneType'&gt;\n</pre><p><br></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T10:46:38Z",
        "interviewCount": 131,
        "question": "<p>Что вернет функция без <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">return</code>?</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def <span class=\"hljs-title function_ invoke__\">pprinter</span>(<span class=\"hljs-keyword\">string</span>):\n    print(string)\n</pre>",
        "time": 5,
        "title": "None"
    },
    {
        "ID": 2182,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">def func(name, company='Ozon'):\n    print(name, 'на собеседовании в', company)\n\nfunc(\"Guido\", \"Microsoft\")\n\nGuido на собеседовании в Microsoft\n</pre><p><br></p><p><br></p><p><span style=\"color: rgb(23, 43, 77);\">Знает что функция начинается \"def\" и закрывается \"():\"</span></p><p><span style=\"color: rgb(23, 43, 77);\">Могут быть вопросы по синтаксису</span></p><p><span style=\"color: rgb(23, 43, 77);\">Для вывода текста нужно использовать print()</span></p><p><br></p>",
                "difficulty": "GRADE_16"
            },
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">def func(name, company='Ozon'):\n    print(name, 'на собеседовании в', company)\n\nfunc(\"Guido\", \"Microsoft\")\n\nGuido на собеседовании в Microsoft\n</pre><p><br></p><p><br></p><p><span style=\"color: rgb(23, 43, 77);\">Синтаксис без подсказки</span></p><p><span style=\"color: rgb(23, 43, 77);\">Правильно прокинуть аргумент по умолчанию (кроме джавы), </span></p><p><span style=\"color: rgb(23, 43, 77);\">Может рассказать какие конкатенации строк есть</span></p><p><span style=\"color: rgb(23, 43, 77);\">Название аргументов и функции носят говорящее название</span></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T10:43:03Z",
        "interviewCount": 647,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Написать функцию, которая печататет строку </span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">&lt;Name&gt; на собеседовании в &lt;company&gt;</code><span style=\"color: rgb(52, 73, 94);\">, по-умолчанию считаем, что компания это Ozon, но можно и свою компанию создать.</span></p>",
        "time": 10,
        "title": "Аргументы по-умолчанию"
    },
    {
        "ID": 2181,
        "additional": "<p>Q: <em style=\"color: rgb(127, 140, 141);\">Зачем это проверять?</em></p><p>A: чтобы не выполнять какой-то код при импорте этого файла как модуля. Часто после этой проверки выполняются отладочные принты или что-то подобное.</p>",
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Это условие, которое проверит, запущен ли файл напрямую или нет</span></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T10:38:35Z",
        "interviewCount": 107,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Почему в скриптах есть это выражение </span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">if __name__ == \"__main__\"</code></p>",
        "time": 2,
        "title": "if __name__ == \"__main__\""
    },
    {
        "ID": 2180,
        "additional": "<p>Q: <em style=\"color: rgb(127, 140, 141);\">Что еще внутри может быть?</em></p><p>A: <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">pip</code> - пакетный менеджер, еще <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">easy_install</code></p><p>Q: <em style=\"color: rgb(127, 140, 141);\">Зачем это?</em></p><p>A:</p><ul><li>избежать конфликты версий библиотек для разных проектов</li><li>держать несколько версий Python с разными библиотеками</li><li>изолировать окружение разработчика от хоста</li></ul><p>Q: <em style=\"color: rgb(127, 140, 141);\">Есть же докер/виртуалка?</em></p><p>A: venv это инструмент инкапсулирования только зависимостей, используйте его для этого, если ничего больше не нужно</p>",
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(24, 6, 32);\">Инструмент для работы с проектами на Python, обеспечивающий управление зависимостями и изоляцию проектов. Представляющий из себя </span>каталог, в который устанавливаются некоторые исполняемые файлы и скрипты.</p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T10:35:04Z",
        "interviewCount": 158,
        "question": "<p>Что из себя представляет python virtual environment и зачем он нужен?</p>",
        "time": 5,
        "title": "Python virtual environment"
    },
    {
        "ID": 2179,
        "additional": "<p>Q: <em style=\"color: rgb(127, 140, 141);\">А еще есть .egg?</em></p><p>A: Да, но это более старый формат, наверное его лучше избегать в современном окружении</p>",
        "answers": [
            {
                "content": "<p>platform wheel:</p><p><br></p><ul><li>сборка может включать бинарные файлы - например адаптер psycopg2 - тогда под каждую платформу будет свой пакет</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">psycopg2-2.8.6-cp27-cp27m-win32.whl\npsycopg2-2.8.6-cp27-cp27m-win_amd64.whl\n</pre><ul><li>сборка может зависеть так же от версии Python / abi</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">psycopg2-<span class=\"hljs-number\">2.8.6</span>-cp27-cp27m-win_amd64.<span class=\"hljs-property\">whl</span>\npsycopg2-<span class=\"hljs-number\">2.8.6</span>-cp34-cp34m-win_amd64.<span class=\"hljs-property\">whl</span>\n</pre><ul><li>но при этом Wheel не содержит .pyc файлов, если код совместим с Python 2 и 3 пакет может быть один и тот же - universal wheel</li><li>может быть так же пакет, который зависит от версии Python и только - pure-Python wheel</li></ul><p><br></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T10:24:21Z",
        "interviewCount": 2,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Рассказать про whl пакетирование, и то, какие задачи оно решает. В 2012 году вышел PEP 427, начиная с этого времени Wheel это стандарт пакетирования в Python. Когда для одного проекта собираютcя разные/одинаковые whl?</span></p>",
        "time": 10,
        "title": "Типы пакетов - .whl"
    },
    {
        "ID": 2178,
        "additional": "<p>Q: <em style=\"color: rgb(127, 140, 141);\">Какое отношение имеет к distutils?</em></p><p>A: Можно сказать, что Setuptools это удобная надстройка над более старым distutils</p><p>Q: <em style=\"color: rgb(127, 140, 141);\">Внутри проекта, который собирается Setuptools есть setup.cfg - зачем он?</em></p><p>A: Setuptools предлагает перейти от формата с setup.py к декларативной конфигурации</p><p>Q: <em style=\"color: rgb(127, 140, 141);\">В setup что может быть описано?</em></p><p>A:</p><p><br></p><ul><li>в нем есть метаданные - имя, версия пакета</li><li>описаны зависимости</li><li>могут быть описаны entry_points - скрипты, которые автоматически создадутся после установки</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">[<span class=\"hljs-meta\">options.entry_points</span>]\nconsole_scripts =\n    main = mypkg:some_func\n</pre><ul><li>могут быть data files (конфиги, например)</li></ul><p><br></p>",
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Пакет для сборки и дистрибуции других пакетов</span></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T10:19:22Z",
        "interviewCount": 9,
        "question": "<p><span style=\"color: rgb(0, 26, 52);\">Что такое Setuptools в двух словах?</span></p>",
        "time": 10,
        "title": "setuptools/distutils"
    },
    {
        "ID": 2177,
        "answers": [
            {
                "content": "<p>Нужна библиотека glob</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">import glob\n\nglob.glob('test[0-9].txt', recursive=True)\n</pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T10:11:28Z",
        "interviewCount": 1,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Как собрать файлы в папке (рекурсивно)?</span></p>",
        "time": 10,
        "title": "Сommon libs: файлы в папке"
    },
    {
        "ID": 2176,
        "answers": [
            {
                "content": "<p>Это модуль для сериализации и десереализации объектов. Например, чтобы передать объект или сохранить его между запусками.</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">import pickle\n\nd = {'a': 1}\n\nwith open('file.p', 'wb') as f:\n    pickle.dump(d, f)\n\nwith open('file.p', 'rb') as f:\n    loaded_d = pickle.load(f)\n\nprint(loaded_d)\n</pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T10:09:07Z",
        "interviewCount": 4,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Что такое pickle? Можете написать код?</span></p>",
        "time": 10,
        "title": "Common libs: pickle"
    },
    {
        "ID": 2175,
        "additional": "<p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">как запустить тест?</em></p><p>A: для запуска достаточно выполнить команду&nbsp;<code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">pytest</code>&nbsp;в директории с файлом или в родительских. Pytest находит файлы с префиксом test_*. Можно также указать файл как аргумент -&nbsp;<code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">pytest test_ozon.py</code>&nbsp;или запустить, вызвав модуль pytest&nbsp;<code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">python -m pytest test_ozon.py</code></p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">в чем разница между созданием файла в тесте и в фикстуре?</em></p><p>A: ошибка инициализации (например у нас файл уже существует) в фикстуре вернет&nbsp;<code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">ERROR test_ozon.py::...</code>, если это произойдет в тесте - тест будет помечен как FAIL.</p>",
        "answers": [
            {
                "content": "<p>Это фикстура (fixture) - механизм, который предлагает pytest для инициализации тестов, параметризации запуска и очистки окружения после них (в терминах arrange/act/assert/cleanup это arrange и cleanup). В предложенном коде создастся файл и управление вернется в тесты, после окончания тестов выполнится файл закроется и удалится.</p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T10:05:14Z",
        "interviewCount": 755,
        "question": "<p>Рассказать, что такое&nbsp;<code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">pseudo_lock()</code>&nbsp;в файле test_ozon.py:</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">import os, pytest\n\n\n@pytest.fixture\ndef pseudo_lock():\n    filename = \"file.lock\"\n    with open(filename, \"w+\") as f:\n        f.write(\"tests are going on\")\n        yield\n    os.remove(filename)\n\n\ndef test_open_base_url(pseudo_lock):\n    print(\"Hello, tests!\")\n    assert True == True\n</pre><p><br></p>",
        "time": 10,
        "title": "pytest: фикстуры"
    },
    {
        "ID": 2048,
        "answers": [
            {
                "content": "<p>Вариант реализации 1:</p><pre class=\"ql-syntax\" spellcheck=\"false\">\n<span class=\"hljs-keyword\">import</span>﻿ functools\n<span class=\"hljs-keyword\">import</span> time\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delayed</span>(<span class=\"hljs-params\">delay=<span class=\"hljs-number\">1</span></span>):\n    <span class=\"hljs-string\">\"\"\"Задержка перед вызовом функции\"\"\"</span><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decorator</span>(<span class=\"hljs-params\">func</span>):\n<span class=\"hljs-meta\">        @functools.wraps(<span class=\"hljs-params\">func</span>)def wrapper(<span class=\"hljs-params\">*args, **kwargs</span>):</span>\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f'Спим <span class=\"hljs-subst\">{delay}</span> сек.'</span>)\n            time.sleep(delay)\n            val = func(*args, **kwargs)\n            <span class=\"hljs-keyword\">return</span> val\n        <span class=\"hljs-keyword\">return</span> wrapper\n    <span class=\"hljs-keyword\">return</span> decorator\n\n<span class=\"hljs-meta\">@delayed(<span class=\"hljs-params\">delay=<span class=\"hljs-number\">0.5</span></span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">countdown</span>(<span class=\"hljs-params\">int_num</span>):\n    <span class=\"hljs-keyword\">if</span> int_num &lt; <span class=\"hljs-number\">1</span>:\n        exit(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-built_in\">print</span>(int_num)\n    countdown(int_num - <span class=\"hljs-number\">1</span>)    \n\ncountdown(<span class=\"hljs-number\">3</span>)\n\n<span class=\"hljs-comment\"># Спим 0.5 сек.</span>\n<span class=\"hljs-comment\"># 3</span>\n<span class=\"hljs-comment\"># Спим 0.5 сек.</span>\n<span class=\"hljs-comment\"># 2</span>\n<span class=\"hljs-comment\"># Спим 0.5 сек.</span>\n<span class=\"hljs-comment\"># 1</span>\n<span class=\"hljs-comment\"># Спим 0.5 сек. </span>\n</pre><p><br></p><p>Вариант реализации 2:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">from</span> functools <span class=\"hljs-keyword\">import</span> wraps\n<span class=\"hljs-keyword\">from</span> time <span class=\"hljs-keyword\">import</span> sleep\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Delayed</span>:\n    <span class=\"hljs-comment\"># запоминаем аргументы декоратора</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, delay=<span class=\"hljs-number\">1</span></span>):\n        self._delay = delay\n\n    <span class=\"hljs-comment\"># декоратор общего назначения</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__call__</span>(<span class=\"hljs-params\">self, func</span>):\n<span class=\"hljs-meta\">        @wraps(<span class=\"hljs-params\">func</span>)</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">wrapper</span>(<span class=\"hljs-params\">*args, **kwargs</span>):\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f'Спим <span class=\"hljs-subst\">{self._delay}</span> сек.'</span>)\n            sleep(self._delay)\n            val = func(*args, **kwargs)\n            <span class=\"hljs-keyword\">return</span> val\n        <span class=\"hljs-keyword\">return</span> wrapper\n\n<span class=\"hljs-meta\">@Delayed(<span class=\"hljs-params\">delay=<span class=\"hljs-number\">0.5</span></span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">countdown</span>(<span class=\"hljs-params\">int_num</span>):\n    <span class=\"hljs-keyword\">if</span> int_num &lt; <span class=\"hljs-number\">1</span>:\n        exit(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-built_in\">print</span>(int_num)\n    countdown(int_num - <span class=\"hljs-number\">1</span>)    \n        \ncountdown(<span class=\"hljs-number\">3</span>) \n<span class=\"hljs-comment\"># Спим 0.5 сек.</span>\n<span class=\"hljs-comment\"># 3</span>\n<span class=\"hljs-comment\"># Спим 0.5 сек.</span>\n<span class=\"hljs-comment\"># 2</span>\n<span class=\"hljs-comment\"># Спим 0.5 сек.</span>\n<span class=\"hljs-comment\"># 1</span>\n<span class=\"hljs-comment\"># Спим 0.5 сек. </span>\n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T15:22:11Z",
        "interviewCount": 192,
        "question": "<p>Реализуй декоратор с отложенным запуском.</p>",
        "time": 5,
        "title": "Реализация декоратора с отложенным запуском"
    },
    {
        "ID": 2047,
        "answers": [
            {
                "content": "<p>Реализовано не оптимально, просто работает.</p><p><strong>Подход</strong></p><ul><li>Проверьте, не пуст ли какой-либо из списков</li><li>Сначала нам нужно определить голову результирующего списка. Эта голова будет меньшей из голов заданных списков.</li><li>Перебирайте каждый узел списков, пока один из списков не будет полностью пройден.</li><li>При обходе списков определите меньший из узлов списков и добавьте его в результирующий список.</li><li>После завершения цикла может возникнуть случай, когда в списке останутся узлы. Мы добавим эти оставшиеся узлы в результирующий список</li></ul><p><br></p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Реализ<u>﻿</u>овано оптимально, соответственно, оценить сложность.</p><p><br></p><p><strong>Подход</strong></p><ul><li>Проверьте, не пуст ли какой-либо из списков</li><li>Сначала нам нужно определить голову результирующего списка. Эта голова будет меньшей из голов заданных списков.</li><li>Перебирайте каждый узел списков, пока один из списков не будет полностью пройден.</li><li>При обходе списков определите меньший из узлов списков и добавьте его в результирующий список.</li><li>После завершения цикла может возникнуть случай, когда в списке останутся узлы. Мы добавим эти оставшиеся узлы в результирующий список</li></ul><p><br></p><p><strong>Time Complexity</strong></p><p><strong><em>O(m + n)&nbsp;</em></strong></p><p><strong><em>m и n</em></strong>&nbsp; - число нод в каждом списке</p><p><br></p><p><strong>Space Complexity</strong></p><p><strong><em>O(1)</em></strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">\n<span class=\"hljs-attr\">class ListNode:</span>\n    <span class=\"hljs-string\">def</span> <span class=\"hljs-string\">__init__(self,</span> <span class=\"hljs-string\">val=0,</span> <span class=\"hljs-string\">nextNode=None):</span>\n        <span class=\"hljs-string\">self.val</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">val</span>\n        <span class=\"hljs-string\">self.next</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">nextNode</span>\n\n\n<span class=\"hljs-string\">def</span> <span class=\"hljs-string\">mergeTwoLists(list_one:</span> <span class=\"hljs-string\">ListNode,</span> <span class=\"hljs-attr\">list_two:</span> <span class=\"hljs-string\">ListNode)</span> <span class=\"hljs-string\">-&gt;</span> <span class=\"hljs-attr\">ListNode:</span>\n    <span class=\"hljs-comment\"># Check if either of the lists is null</span>\n    <span class=\"hljs-attr\">if list_one is None:</span>\n        <span class=\"hljs-string\">return</span> <span class=\"hljs-string\">list_two</span>\n    <span class=\"hljs-attr\">if list_two is None:</span>\n        <span class=\"hljs-string\">return</span> <span class=\"hljs-string\">list_one</span>\n    <span class=\"hljs-comment\"># Choose head which is smaller of the two lists</span>\n    <span class=\"hljs-string\">if</span> <span class=\"hljs-string\">list_one.val</span> <span class=\"hljs-string\">&lt;</span> <span class=\"hljs-attr\">list_two.val:</span>\n        <span class=\"hljs-string\">temp</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">head</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">ListNode(list_one.val)</span>\n        <span class=\"hljs-string\">list_one</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">list_one.next</span>\n    <span class=\"hljs-attr\">else:</span>\n        <span class=\"hljs-string\">temp</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">head</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">ListNode(list_two.val)</span>\n        <span class=\"hljs-string\">list_two</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">list_two.next</span>\n    <span class=\"hljs-comment\"># Loop until any of the list becomes null</span>\n    <span class=\"hljs-attr\">while list_one is not None and list_two is not None:</span>\n        <span class=\"hljs-string\">if</span> <span class=\"hljs-string\">list_one.val</span> <span class=\"hljs-string\">&lt;</span> <span class=\"hljs-attr\">list_two.val:</span>\n            <span class=\"hljs-string\">temp.next</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">ListNode(list_one.val)</span>\n            <span class=\"hljs-string\">list_one</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">list_one.next</span>\n        <span class=\"hljs-attr\">else:</span>\n            <span class=\"hljs-string\">temp.next</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">ListNode(list_two.val)</span>\n            <span class=\"hljs-string\">list_two</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">list_two.next</span>\n        <span class=\"hljs-string\">temp</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">temp.next</span>\n    <span class=\"hljs-comment\"># Add all the nodes in list_one, if remaining</span>\n    <span class=\"hljs-attr\">while list_one is not None:</span>\n        <span class=\"hljs-string\">temp.next</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">ListNode(list_one.val)</span>\n        <span class=\"hljs-string\">list_one</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">list_one.next</span>\n        <span class=\"hljs-string\">temp</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">temp.next</span>\n    <span class=\"hljs-comment\"># Add all the nodes in list_two, if remaining</span>\n    <span class=\"hljs-attr\">while list_two is not None:</span>\n        <span class=\"hljs-string\">temp.next</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">ListNode(list_two.val)</span>\n        <span class=\"hljs-string\">list_two</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">list_two.next</span>\n        <span class=\"hljs-string\">temp</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">temp.next</span>\n    <span class=\"hljs-string\">return</span> <span class=\"hljs-string\">head</span> \n</pre><p><br></p>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T15:19:31Z",
        "interviewCount": 24,
        "question": "<p>Объедините два отсортированных связанных списка и верните их как новый отсортированный список. Новый список должен быть составлен путем соединения узлов первых двух списков.</p><p><br></p><p><u>Ограничения</u>:</p><ul><li>Количество узлов в обоих списках находится в диапазоне&nbsp;[0, 50]</li><li>-100 ≤ Node.val ≤ 100</li><li>l1 и l2 отсортированы в неубывающем порядке.</li></ul><p><img src=\"https://jit.o3.ru/secure/attachment/2163674/2163674_image-2023-05-17-18-02-30-677.png\"></p>",
        "time": 25,
        "title": "Алгоритмическая подготовка"
    },
    {
        "ID": 2046,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">У таких интервью нет правильного ответа, суть в том, чтобы во время проектирования системы и решая определенных проблем и задач кандидат прошелся по основным технологиям и понятиям:</span></p><ul><li><strong>Scalability</strong>&nbsp;(Масштабируемость): способность системы справляться с растущими объемами нагрузки или трафика. Важно понимать различные подходы к масштабируемости, такие как горизонтальное масштабирование (добавление дополнительных машин в систему) и вертикальное масштабирование (добавление дополнительных ресурсов на одну машину).</li><li><strong>Fault tolerance (</strong>Отказоустойчивость): способность системы продолжать функционировать, несмотря на отказ одного или нескольких ее компонентов. Такие методы, как резервирование и балансировка нагрузки, могут помочь повысить отказоустойчивость системы.</li><li><strong>Load balancing (</strong>Балансировка нагрузки). Балансировщики нагрузки распределяют рабочие нагрузки между несколькими компьютерами, чтобы оптимизировать использование ресурсов и гарантировать, что ни один компьютер не будет перегружен.</li><li><strong>Caching</strong>&nbsp;(Кэширование): хранение часто используемых данных на уровне высокоскоростного хранилища для снижения нагрузки на базовое хранилище данных и повышения производительности системы.</li><li><strong>Availability</strong>&nbsp;(Доступность): способность системы своевременно реагировать на запросы. Это тесно связано с отказоустойчивостью и обычно измеряется в процентах от времени, в течение которого система находится в рабочем состоянии.</li><li><strong>Consistency</strong>&nbsp;(Непротиворечивость): Степень, в которой все узлы в распределенной системе видят одни и те же данные в одно и то же время. Согласованность можно разделить на различные уровни, такие как сильная согласованность, окончательная согласованность и отсутствие согласованности.</li><li><strong>Latency</strong>&nbsp;(Задержка): время, необходимое для обработки запроса и возврата ответа. Задержка является важным фактором при проектировании системы, особенно для систем, обрабатывающих данные в реальном времени.</li><li><strong>Throughput</strong>&nbsp;(Пропускная способность): количество запросов, которые система может обработать в единицу времени. Пропускная способность тесно связана с масштабируемостью и часто используется как мера производительности системы.</li><li><strong>Partition Tolerance</strong>&nbsp;(Устойчивость к разделению системы): Способность системы продолжать работу при возникновении сетевых разделов. В распределенных системах невозможно одновременно обеспечить согласованность и устойчивость к разделам, поэтому разработчик должен решить, какой из них более важен для варианта использования.</li><li><strong>CAP Theorem</strong>&nbsp;(Теорема CAP): Теорема утверждает, что распределенная система не может одновременно обеспечивать все три из следующих гарантий: непротиворечивость, доступность и устойчивость к разделению системы.</li><li><strong>ACID Properties</strong>&nbsp;(Свойства ACID): набор свойств, гарантирующих надежную обработку транзакций базы данных. Аббревиатура расшифровывается как атомарность, согласованность, изоляция и долговечность.</li></ul><p>&nbsp;</p><p>При проектировании системы нам 100% понадобится БД, так что тут кандидат должен будет выбрать в зависимости от задачи одну или несколько БД</p><ul><li><strong>Relational databases</strong></li><li><strong>NoSQL databases</strong></li><li><strong>Distributed key-value stores</strong></li><li><strong>Document databases</strong></li><li><strong>Graph databases</strong></li><li><strong>Time-series databases</strong></li></ul><p>&nbsp;</p><p><strong>Постановка задачи</strong></p><p>Спроектировать с нуля приложение&nbsp;<strong>Ozon.</strong></p><p>Далее нужно выбрать какую-нибудь отдельную тему, например «Система рекомендаций товаров», «Личный кабинет», «Заказ билетов», «Чат поддержки» и т.д.</p><p>&nbsp;</p><p>Например мы выбрали «Личный кабинет».</p><p><strong>&nbsp;</strong></p><p><strong>Функциональные требования</strong></p><ul><li>Должны получать каталог всей продукции и совершать покупки</li><li>и / или</li><li>Должен предоставлять функцию поиска</li><li>...</li></ul><p>&nbsp;</p><p><strong>Нефункциональные требования</strong></p><ul><li>Low latency (Низкая задержка)</li><li>High availability (Высокая доступность)</li><li>High consistency (Высокая консистенция)</li></ul><p>&nbsp;</p><p>&nbsp;</p><p>Далее кандидат должен, по идее начать задавать уточняющие вопросы например по нагрузке, если сразу двинется в бой — это плохо. По нагрузке мы можем сказать, что у нас 3000000 пользователей из них, например 5000000 ежедневно активных. Также можно накинуть цифр по заказам, продавцам, товарам. В общем, HighLoad.</p><p>&nbsp;</p><p>После этого начинаете рисовать архитектуру в каких-нибудь рисовалках.</p><p>Можете посоветовать кандидату начать с самой простой схемы и далее постепенно прорабатывать ее.</p><p><img src=\"https://jit.o3.ru/secure/attachment/2279221/2279221_image-2023-07-06-14-43-20-872.png\"></p><p><br></p><p><span style=\"color: rgb(23, 43, 77);\">Далее</span></p><p><img src=\"https://jit.o3.ru/secure/attachment/2279222/2279222_image-2023-07-06-14-43-42-108.png\"></p><p><br></p><p><span style=\"color: rgb(23, 43, 77);\">Затем</span></p><p><img src=\"https://jit.o3.ru/secure/attachment/2279223/2279223_image-2023-07-06-14-44-04-942.png\"></p><p><br></p><p><br></p><p>В общем, куда вас заведет общение.</p><p>Далее после верхнеуровнего проектирования вы можете перейти к конкретным компонентам, таким как: UI, проектированию API или схемы БД, или сосредоточится на алгоритме, а также поговорить о выборе инструментов.</p><p>В конце вы должны посмотреть на систему и проверить соответствует ли она функциональным и нефункциональным требованиям.</p>",
                "difficulty": "GRADE_20"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T15:04:36Z",
        "interviewCount": 43,
        "question": "<p>Необходимо спроектировать систему.</p><p><br></p><p>Собеседующий, должен выбрать тему, которая ему близка.</p><p>На просторах интернета много примеров «Design Interview», таких как: TinyURL, Dropbox, Distributed cache и т.д. Можно воспользоваться готовым примером или составить задачу самому.</p>",
        "time": 30,
        "title": "Проектирование систем"
    },
    {
        "ID": 2045,
        "answers": [
            {
                "content": "<p>Сложность O(log n)</p><pre class=\"ql-syntax\" spellcheck=\"false\">def search(nums, target):\n    # Устанавливаем границы поиска\n    # На первом этапе это весь массив\n\n    left = 0\n    right = len(nums) - 1\n\n    # До тех пор, пока поиск не сузится до 1 элемента, выполняем цикл\n    while left &lt;= right:\n        # Находим средний элемент списка\n        mid = int((left + right) / 2)\n        # Если средний элемент равен искомому - возвращаем его индекс\n        if nums[mid] == target:\n            return mid\n\n        # Если средний элемент меньше искомого значения, сдвигаем левую границу\n        # Следующий поиск будет на отрезке от среднего элемента до конца массива\n        # Если средний элемент больше искомого, сдвигаем правую границу\n        # Тогда следующий поиск будет от начала массива до середины\n\n        if nums[mid] &lt; target:\n            left = mid + 1\n        elif nums[mid] &gt; target:\n            right = mid - 1\n    # Если не найден искомый элемент при сужении области поиска до 1 элемента, вернется -1\n    return -1\n\n\nassert search([], -1) == -1\nassert search([-1, 0, 3, 5, 9, 12], 9) == 4\nassert search([-1, 0, 3, 5, 9], 0) == 1\nassert search([-1, 0, 3, 5, 9, 12], 2) == -1 \n</pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T14:58:14Z",
        "interviewCount": 46,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Дан массив целых чисел&nbsp;</span>nums<span style=\"color: rgb(23, 43, 77);\">, отсортированных по возрастанию, и целое число&nbsp;</span>target<span style=\"color: rgb(23, 43, 77);\">, необходимо написать функцию для поиска&nbsp;</span>target<span style=\"color: rgb(23, 43, 77);\">&nbsp;в&nbsp;</span>nums<span style=\"color: rgb(23, 43, 77);\">. Если&nbsp;</span>target<span style=\"color: rgb(23, 43, 77);\">&nbsp;существует, надо вернуть его индекс. В противном случае вернуть&nbsp;</span>-1.</p>",
        "time": 15,
        "title": "Бинарный поиск"
    },
    {
        "ID": 2044,
        "answers": [
            {
                "content": "<ul><li>Оба метода вызываются во время создания экземпляра класса.</li><li>__new__&nbsp;вызывается перед&nbsp;__init__</li><li>__new__&nbsp;по сути, конструктор,&nbsp;__init__ инициализатор&nbsp;</li><li>__new__&nbsp;статический метод класса запись&nbsp;__new__(cls, *args, **kwargs)</li><li>__new__&nbsp;возвращает инстанс класса,&nbsp;__init__ не возвращает ничего</li><li><br></li></ul><p>Пример использования&nbsp;__new__ singleton</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Singleton</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__new__</span>(<span class=\"hljs-params\">cls, *args, **kwargs</span>):\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">hasattr</span>(cls, <span class=\"hljs-string\">'instance'</span>):\n            cls.instance = <span class=\"hljs-built_in\">super</span>().__new__(cls, *args, **kwargs)\n        <span class=\"hljs-keyword\">return</span> cls.instance\n\n\nobj1 = Singleton()\nobj2 = Singleton()\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">id</span>(obj1), <span class=\"hljs-built_in\">id</span>(obj2), obj1 <span class=\"hljs-keyword\">is</span> obj2) \n</pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T14:51:13Z",
        "interviewCount": 38,
        "question": "<p>Расскажи об отличиях __new__ и __init__ .</p><p>Приведи пример использования __new__.</p><p><br></p><p><strong style=\"color: rgb(23, 43, 77);\">Дополнительный вопрос:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Что такое self?</span></p><p><strong>Ответ на дополнительный вопрос:</strong></p><p>self - это специальный параметр, который передается первым аргументом в метод класса и представляет собой ссылку на экземпляр класса</p>",
        "time": 7,
        "title": "Теоретический вопрос о отличиях __new__ и __init__"
    },
    {
        "ID": 2043,
        "answers": [
            {
                "content": "<p>Фикстуры в Pytest - это специальные функции, которые предоставляют подготовленное состояние или ресурсы для выполнения тестов. Они позволяют изолировать код тестов от деталей подготовки данных или настроек.</p><p>Пример:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">import</span> pytest\n\n\n<span class=\"hljs-meta\">@pytest.fixture</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">setup_data</span>():\n&nbsp; &nbsp; data = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> data\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_sum_values</span>(<span class=\"hljs-params\">setup_data</span>):\n&nbsp; &nbsp; total = <span class=\"hljs-built_in\">sum</span>(setup_data)\n&nbsp; &nbsp; assert total == 15 \n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T14:29:21Z",
        "interviewCount": 431,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Расскажите о фикстурах в Pytest и как их использовать.</span></p><p>Приведите пример.</p><p><br></p><p><strong style=\"color: rgb(0, 26, 52);\">Дополнительный вопрос 1:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">&nbsp;Какой декоратор используется для создания фикстур в Pytest , какие аргументы он принимает?</span></p><p><strong style=\"color: rgb(23, 43, 77);\">Ответ на доп. вопрос 1:</strong></p><p>Для создания фикстур используется декоратор `@pytest.fixture`, принимаемые аргументы:&nbsp;</p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>scope: Этот аргумент определяет область видимости фикстуры. Допустимые значения:&nbsp;'function'&nbsp;(по умолчанию),&nbsp;'class',&nbsp;'module',&nbsp;'session'. Например:&nbsp;@pytest.fixture(scope='module').</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>params: Позволяет параметризовать фикстуру, чтобы она могла предоставлять разные данные или ресурсы для разных тестов. Например:&nbsp;@pytest.fixture(params=[1, 2, 3]).</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>autouse: Если&nbsp;True, фикстура будет автоматически использоваться всеми тестами без явного указания в аргументах тестов. Например:&nbsp;@pytest.fixture(autouse=True). Добавить вопрос: \"Чем чревато использование&nbsp;autouse=True.\"</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>ids: Позволяет задать идентификаторы для параметризованных тестов, которые будут отображаться в отчетах о выполнении тестов.</li></ol><p><br></p><p><strong style=\"color: rgb(0, 26, 52);\">Дополнительный вопрос 2:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Что такое \"yield\" в контексте фикстур?</span></p><p><strong style=\"color: rgb(23, 43, 77);\">Ответ на доп. вопрос 2:</strong></p><p>Вместо того чтобы возвращать значение из фикстуры, вы можете использовать оператор&nbsp;yield&nbsp;внутри функции-фикстуры. Это позволяет выполнить код до и после выполнения теста, а затем вернуть значение после завершения теста. Это может быть полезно, например, для подготовки и очистки ресурсов.</p><p><br></p><p><br></p><p><br></p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">import pytest</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># Фикстура, создающая данные</div><div class=\"ql-code-block\" data-language=\"plain\">@pytest.fixture</div><div class=\"ql-code-block\" data-language=\"plain\">def data_fixture():</div><div class=\"ql-code-block\" data-language=\"plain\">    data = [1, 2, 3, 4, 5]</div><div class=\"ql-code-block\" data-language=\"plain\">    return data</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># Фикстура, использующая данные из другой фикстуры</div><div class=\"ql-code-block\" data-language=\"plain\">@pytest.fixture</div><div class=\"ql-code-block\" data-language=\"plain\">def process_data(data_fixture):</div><div class=\"ql-code-block\" data-language=\"plain\">    processed_data = [x * 2 for x in data_fixture]</div><div class=\"ql-code-block\" data-language=\"plain\">    return processed_data</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">def test_data_processing(process_data):</div><div class=\"ql-code-block\" data-language=\"plain\">    assert len(process_data) == 5</div><div class=\"ql-code-block\" data-language=\"plain\">    assert process_data == [2, 4, 6, 8, 10] </div></pre>",
        "time": 4,
        "title": "Теоретический вопрос о фикстурах в Pytest"
    },
    {
        "ID": 2042,
        "answers": [
            {
                "content": "<p>Pytest - это фреймворк для тестирования в Python. Он позволяет создавать и запускать тесты с удобным синтаксисом. </p><p>Пример:</p><pre class=\"ql-syntax\" spellcheck=\"false\">def <span class=\"hljs-title function_\">test_addition</span><span class=\"hljs-params\">()</span>:\n&nbsp; &nbsp; result = <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">3</span>\n&nbsp; &nbsp; assert result == 5 \n</pre>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T14:20:48Z",
        "interviewCount": 185,
        "question": "<p>Расскажите про функционал Pytest.</p><p><br></p><p><strong>Дополнительный вопрос 1:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Как запустить все тесты в директории с помощью Pytest?</span></p><p><strong style=\"color: rgb(23, 43, 77);\">Ответ на доп. вопрос 1:</strong></p><p>Вы можете выполнить команду `pytest` в командной строке, указав путь к директории с тестами.</p><p><br></p><p><strong>Дополнительный вопрос 2:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Что такое фикстуры в Pytest и для чего они используются?</span></p><p><strong style=\"color: rgb(23, 43, 77);\">Ответ на доп. вопрос 2:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Фикстуры - это функции, которые создают предварительные условия для тестов. Они могут быть использованы для подготовки данных или настроек перед выполнением тестов.</span></p><p><br></p><p><strong>Дополнительный вопрос 3:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Как можно передать фикстуру в тестовую функцию?</span></p><p><strong style=\"color: rgb(23, 43, 77);\">Ответ на доп. вопрос 3:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Фикстуры передаются в тестовую функцию как аргументы. Название аргумента должно соответствовать имени фикстуры.</span></p><p><br></p><p><strong>Дополнительный вопрос 4:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Как можно параметризовать тесты с использованием Pytest?</span></p><p><strong style=\"color: rgb(23, 43, 77);\">Ответ на доп. вопрос 4:</strong></p><p>Для параметризации тестов можно использовать декоратор <em class=\"hljs-meta\">@pytest</em><em>.</em><em class=\"hljs-property\">mark</em><em>.</em><em class=\"hljs-property\">parametrize</em> и передать набор параметров и ожидаемых результатов.</p>",
        "time": 5,
        "title": "Теоретический вопрос про функционал Pytest"
    },
    {
        "ID": 2041,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Магические методы, также известные как специальные методы или методы перегрузки операторов, это методы с определенными именами, начинающимися и заканчивающимися двойным подчеркиванием (например,&nbsp;</span><em style=\"color: rgb(23, 43, 77);\">init</em><span style=\"color: rgb(23, 43, 77);\">,&nbsp;</span><em style=\"color: rgb(23, 43, 77);\">str</em><span style=\"color: rgb(23, 43, 77);\">,&nbsp;</span><em style=\"color: rgb(23, 43, 77);\">add</em>)<span style=\"color: rgb(23, 43, 77);\">. Они позволяют определить поведение объектов при выполнении определенных операций, таких как создание объекта, преобразование в строку или выполнение операций сложения.</span></p><p><br></p><p>Пример метода:</p><pre class=\"ql-syntax\" spellcheck=\"false\">class MyClass:\n&nbsp; &nbsp; def __init__(self, value):\n&nbsp; &nbsp; &nbsp; &nbsp; self.value = value&nbsp; &nbsp; \n    \n    def __add__(self, other):\n&nbsp; &nbsp; &nbsp; &nbsp; return self.value + other.value\n\nobj1 = MyClass(5)\nobj2 = MyClass(10)\nresult = obj1 + obj2\nprint(result) &nbsp;# Output: 15\n \n</pre><p><br></p>",
                "difficulty": "GRADE_SCREENING"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T14:14:06Z",
        "interviewCount": 184,
        "question": "<p>Что такое магические методы в Python?</p><p>Назови несколько из них, что они делают?</p>",
        "time": 4,
        "title": "Магические методы в Python"
    },
    {
        "ID": 2040,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Инкапсуляция в Python используется для скрытия данных и методов внутри класса и предоставления контролируемого доступа к ним. Она реализуется с помощью модификаторов доступа и соглашений о наименовании.</span></p><p><span style=\"color: rgb(23, 43, 77);\">Пример:</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">class MyClass:\n    _private_attr = 1  # Приватный атрибут класса\n    __protected_attr = 2  # Защищенный атрибут класса\n    \n    def __init__(self):\n        self._private_var = 10  # Приватная переменная\n\n    def public_method(self):\n        print(\"Public method\")\n\n    def _private_method(self):  # Приватный метод\n        print(\"Private method\") \n    \n    def __protected_method(self):  # Защищенный метод\n &nbsp; &nbsp; &nbsp; &nbsp;print(\"Protected method\") \n\nmy_class = MyClass()\nprint(my_class.__protected_attr) #AttributeError\n</pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T12:51:03Z",
        "interviewCount": 148,
        "question": "<p>Зачем нужна инкапсуляция и как реализовать ее на практике в Python?</p><p><span style=\"color: rgb(23, 43, 77);\">Можно попросить привести пример кода.</span></p><p><br></p><p><strong style=\"color: rgb(23, 43, 77);\">Дополнительный вопрос 1:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Какие модификаторы доступа используются в Python для реализации инкапсуляции?</span></p><p><strong style=\"color: rgb(23, 43, 77);\">Ответ на доп. вопрос 1:</strong></p><p>В Python используются модификаторы доступа: public, protected и private, хотя они основаны на соглашениях, а не на явных ограничениях языка.</p><p><br></p><p><strong style=\"color: rgb(23, 43, 77);\">Дополнительный вопрос 2:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Какие соглашения о наименовании применяются для обозначения приватных атрибутов и методов в Python?</span></p><p><strong style=\"color: rgb(23, 43, 77);\">Ответ на доп. вопрос 2:</strong></p><p>Приватные атрибуты и методы обычно именуются с префиксом \"_\".</p><p><br></p><p><strong style=\"color: rgb(23, 43, 77);\">Дополнительный вопрос 3:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Можно ли получить доступ к приватным атрибутам и методам извне класса?</span></p><p><strong style=\"color: rgb(23, 43, 77);\">Ответ на доп. вопрос 3:</strong></p><p>В Python приватные атрибуты и методы все равно доступны извне, но их использование считается неявным нарушением соглашений и может привести к ошибкам или неожиданным результатам.</p>",
        "time": 10,
        "title": "Инкапсуляция и реализация ее на практике"
    },
    {
        "ID": 2039,
        "answers": [
            {
                "content": "<p><strong>Компилятор</strong> - это программа, которая преобразует исходный код на языке программирования в машинный код или байт-код, создавая исполняемый файл. Компиляция происходит один раз перед запуском программы.</p><p><strong>Интерпретатор</strong> - это программа, которая читает и анализирует исходный код на языке программирования и выполняет его построчно во время выполнения программы, без создания отдельного исполняемого файла.</p><p><br></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T12:47:48Z",
        "interviewCount": 65,
        "question": "<p>Расскажите разницу между компилятором и интерпретатором.</p><p><br></p><p><strong style=\"color: rgb(23, 43, 77);\">Дополнительные вопрос 1:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Какой подход более эффективен с точки зрения производительности: компиляция или интерпретация?</span></p><p><strong>Ответ на доп. вопрос 1:</strong></p><p>Компиляция обычно более эффективна с точки зрения производительности, так как машинный код выполняется напрямую компьютером без дополнительных шагов интерпретации.</p><p><br></p><p><strong style=\"color: rgb(23, 43, 77);\">Дополнительные вопрос 2:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Какие языки программирования обычно компилируются, а какие интерпретируются?</span></p><p><strong>Ответ на доп. вопрос 2:</strong></p><p>Языки, такие как C, C++, Java, компилируются, тогда как Python, JavaScript, Ruby являются интерпретируемыми.</p><p><br></p><p><strong style=\"color: rgb(23, 43, 77);\">Дополнительные вопрос 3:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Существуют ли гибридные подходы, которые объединяют компиляцию и интерпретацию?</span></p><p><strong>Ответ на доп. вопрос 3:</strong></p><p>Да, существуют гибридные подходы, называемые JIT (Just-In-Time) компиляцией, где исходный код частично компилируется во время выполнения программы для повышения производительности.</p>",
        "time": 4,
        "title": "Разница между компилятором и интерпретатором"
    },
    {
        "ID": 2038,
        "answers": [
            {
                "content": "<pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">class Car:</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-keyword\">def</span> <span class=\"ql-token hljs-title\">__init__</span>(<span class=\"ql-token hljs-params\">self, color: str, price: float</span>):</div><div class=\"ql-code-block\" data-language=\"python\">        self.color = color</div><div class=\"ql-code-block\" data-language=\"python\">        self.price = price</div><div class=\"ql-code-block\" data-language=\"python\">    </div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-keyword\">def</span> <span class=\"ql-token hljs-title\">get_final_price</span>(<span class=\"ql-token hljs-params\">self</span>) -&gt; <span class=\"ql-token hljs-built_in\">float</span>:</div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">if self.color == \"красный\":</span></div><div class=\"ql-code-block\" data-language=\"python\">            <span class=\"ql-token hljs-keyword\">return self.price * 1.15</span></div><div class=\"ql-code-block\" data-language=\"python\">    </div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">return self.price</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">class HeavyCar(Car):</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-keyword\">def __init__(self, color: str, price: float, has_trailer: bool):</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-built_in\">super().__init__(color, price)</span></div><div class=\"ql-code-block\" data-language=\"python\">        self.has_trailer = has_trailer</div><div class=\"ql-code-block\" data-language=\"python\">    </div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-keyword\">def get_final_price(self) -&gt; float:</span></div><div class=\"ql-code-block\" data-language=\"python\">        koef = <span class=\"ql-token hljs-number\">1.0</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">if self.color == \"красный\":</span></div><div class=\"ql-code-block\" data-language=\"python\">            koef += <span class=\"ql-token hljs-number\">0.15</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">if self.has_trailer is True:</span></div><div class=\"ql-code-block\" data-language=\"python\">            koef += <span class=\"ql-token hljs-number\">0.25</span></div><div class=\"ql-code-block\" data-language=\"python\">    </div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">return self.price * koef</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div></pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T12:14:20Z",
        "interviewCount": 290,
        "question": "<ol><li data-list=\"ordered\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Написать класс Car, у которого есть свойства - color (текст), price (нецелое число) . Реализовать метод get_final_price - если цвет \"красный\", то цена на 15% дороже от базовой (price).</li><li data-list=\"ordered\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Создать класс HeavyCar, унаследованный от Car, Добавить новое свойство - has_trailer (признак того, есть прицеп; булево). Переопределить метод get_final_price: учесть, что если у автомобиля есть прицеп, то цена на 25% дороже от базовой (price).</li></ol>",
        "time": 15,
        "title": "Задача на знание ООП"
    },
    {
        "ID": 2037,
        "answers": [
            {
                "content": "<p>Объектно - ориентированное программирование (ООП) - методология программирования, основанная на представлении программы в виде совокупности объектов, каждый из которых является экземпляром определённого класса, а классы образуют иерархию наследования.</p><p><br></p><p><br></p><p>Основные принципы ООП:</p><p><span style=\"color: windowtext;\">Инкапсуляция </span><span style=\"color: rgb(17, 17, 17);\">— это контроль доступа к полям и методам объекта. Под контролем доступа подразумевается не только можно/нельзя, но и различные валидации, вычисления и прочее динамическое поведение. </span></p><p><span style=\"color: windowtext;\">Наследование</span><span style=\"color: rgb(17, 17, 17);\"> — это механизм системы, который позволяет наследовать одними классами свойства и поведение других классов для дальнейшего расширения или модификации. </span></p><p><span style=\"color: windowtext;\">Полиморфизм</span><span style=\"color: rgb(17, 17, 17);\"> — свойство системы, позволяющее иметь множество реализаций одного интерфейса.</span></p><p>Абстракция - для выделения в моделируемом предмете важного для решения конкретной задачи по предмету, в конечном счёте — контекстное понимание предмета, формализуемое в виде класса.</p><p><br></p>",
                "difficulty": "GRADE_16"
            },
            {
                "content": "<p>Может дополнить о плюсах ООП.</p><p>Преимущества ООП:</p><ul><li>Возможность легкой модификации, при грамотном анализе и проектировании</li><li>Возможность отката при наличии версий</li><li>Более легкая расширяемость</li><li>Более естественная декомпозиция программного обеспечения, которая существенно облегчает его разработку.</li><li>Сокращение количества межмодульных вызовов и уменьшение объемов информации, передаваемой между модулями.</li><li>Увеличивается показатель повторного использования кода.</li></ul><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T12:07:05Z",
        "interviewCount": 328,
        "question": "<p>Расскажите, что такое ООП?</p><p><span style=\"color: rgb(17, 17, 17);\">Расскажите основные принципы ООП</span></p>",
        "time": 3,
        "title": "Принципы ООП"
    },
    {
        "ID": 2036,
        "answers": [
            {
                "content": "<p>Зависит от типа данных передается в переменной.</p><p><br></p><p><strong>Неизменяемые</strong>&nbsp;объекты передаются по значению. Это значит, что при изменении значения переменной будет создан новый объект. К этому типу относятся:</p><ul><li>числовые данные (int, float, complex)</li><li>символьные строки (str)</li><li>кортежи (tuple)&nbsp;</li></ul><p><strong>Изменяемые</strong>&nbsp;объекты передаются по ссылке. Это значит, что при изменении значения переменной объект будет изменен. К этому типу относятся:</p><ul><li>списки (list)</li><li>множества (set)</li><li>словари (dict)</li></ul>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T12:03:36Z",
        "interviewCount": 117,
        "question": "<p>Какие переменные в python передаются по ссылке, а какие по значению?</p>",
        "time": 5,
        "title": "Теоретический вопрос о разнице между ссылкой и значением."
    },
    {
        "ID": 2035,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">def bubble_sort(arr):\n    n = len(arr)\n    \n    for i in range(n):\n        swapped = False\n        \n        for j in range(0, n-i-1):\n            if arr[j] &gt; arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                swapped = True\n        \n        if not swapped:\n            break\n    \n    return arr \n</pre><p><br></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T11:25:44Z",
        "interviewCount": 35,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Напишите простую функцию для сортировки массива простых чисел пузырьком.</span></p>",
        "time": 10,
        "title": "Сортировка массива чисел пузырьком."
    },
    {
        "ID": 2034,
        "answers": [
            {
                "content": "<p>Может описать/знает что это такое, может быть как работает.</p><p><br></p><p>Сортировка пузырьком - это простой алгоритм сортировки, который проходит по списку элементов и сравнивает пары соседних элементов. Если элементы находятся в неправильном порядке, то они меняются местами. Этот процесс повторяется до тех пор, пока весь список не будет отсортирован.</p><p>В процессе выполнения данного алгоритма элементы с большими значениями оказываются в конце списка, а элементы с меньшими значениями постепенно перемещаются по направлению к началу списка. Образно говоря, тяжелые элементы падают на дно, а легкие медленно всплывают подобно пузырькам воздуха. При этом в начале сортировки отсортированным становится конец списка, а не его начало.</p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T11:24:33Z",
        "interviewCount": 4,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Опишите сортировку пузырьком.</span></p>",
        "time": 10,
        "title": "Теоретический вопрос о сортировке пузырьком"
    },
    {
        "ID": 2033,
        "answers": [
            {
                "content": "<p>XML (eXtensible Markup Language) - это язык разметки, который используется для представления структурированных данных. Он представляет данные в виде дерева элементов с помощью тегов и атрибутов.&nbsp;</p><p>Преимущества XML по сравнению с JSON для сериализации и десериализации данных:</p><ol><li>Структурированность: XML позволяет представлять сложные структуры данных с использованием вложенных элементов и иерархии. Это особенно полезно, когда данные имеют сложную структуру или требуют дополнительной метаинформации.</li><li>Расширяемость: XML является расширяемым языком, что означает, что вы можете определить собственные теги и структуры данных, которые соответствуют вашим потребностям. Это делает XML гибким для различных сценариев и требований.</li><li>Читаемость: XML имеет человекочитаемый формат, который легко понять и интерпретировать. Это полезно при отладке, а также при сотрудничестве с другими разработчиками или при обмене данными между системами.</li></ol><p><br></p><p>Недостатки XML по сравнению с JSON для сериализации и десириализации данных:</p><ol><li>Объем данных: XML обычно имеет больший объем данных по сравнению с JSON из-за использования тегов и атрибутов. Это может привести к увеличению размера файлов или объему передаваемых данных.</li><li>Сложность: XML имеет более сложный синтаксис и требует строгой структуры данных. Это может усложнить процесс разработки и обработки данных.</li><li>Производительность: Обработка XML может быть более ресурсоемкой операцией по сравнению с JSON, особенно при работе с большими объемами данных. Это может повлиять на производительность приложений.</li></ol><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T11:20:57Z",
        "interviewCount": 5,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Что такое XML и какие преимущества и недостатки у него по сравнению с JSON для сериализации и десериализации данных?</span></p>",
        "time": 5,
        "title": "Сравнение XML и JSON для сериализации и десиреализации данных."
    },
    {
        "ID": 2032,
        "answers": [
            {
                "content": "<p>Сериализация и десериализация - это процессы преобразования данных в определенный формат для передачи или сохранения, а затем восстановления данных из этого формата обратно в исходную структуру данных. В Python для сериализации и десериализации данных можно использовать различные форматы данных, включая:</p><ol><li>JSON (JavaScript Object Notation): JSON - это легкий формат обмена данными, основанный на синтаксисе объектов JavaScript. Он широко используется для передачи данных между клиентом и сервером, а также для сохранения и загрузки данных.</li><li>XML (eXtensible Markup Language): XML - это язык разметки, который позволяет представлять данные в структурированном формате. В Python есть модуль&nbsp;xml.etree.ElementTree, который предоставляет функции для сериализации и десериализации данных в формате XML.</li><li>YAML (YAML Ain't Markup Language): YAML - это формат сериализации данных, который часто используется для конфигурационных файлов. В Python есть модуль&nbsp;pyyaml, который позволяет сериализовать и десериализовать данные в формате YAML.</li></ol><p><br></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T11:17:38Z",
        "interviewCount": 54,
        "question": "<p>Что такое сериализация и десериализация данных? Какие форматы данных можно использовать для сериализации и десериализации в Python?</p><p><br></p>",
        "time": 5,
        "title": "Теоретический вопрос по сериализации и десериализации данных."
    },
    {
        "ID": 2031,
        "answers": [
            {
                "content": "<p>Возможный ответ:</p><pre class=\"ql-syntax\" spellcheck=\"false\">import sys\n\n\ndef filter_strings(strings, is_unique):\n    filtered_strings = []\n\n    for string in strings:\n        unique_chars = set(string)\n\n        if is_unique and len(unique_chars) == len(string):\n            filtered_strings.append(string)\n        elif not is_unique and len(unique_chars) != len(string):\n            filtered_strings.append(string)\n\n    return filtered_strings\n\n\ndef main():\n    # Проверяем, были ли переданы аргументы командной строки\n    if len(sys.argv) &gt; 1:\n        # Получаем аргументы командной строки\n        strings = input(\"Введите список строк через запятую(пр. hello,world): \").split(\",\")\n        is_unique = sys.argv[1].lower() == \"true\"\n\n        # Фильтруем строки\n        filtered_strings = filter_strings(strings, is_unique)\n\n        # Выводим отфильтрованные строки на консоль\n        for string in filtered_strings:\n            print(string)\n    else:\n        print(\"Не были переданы аргументы командной строки.\")\n\n\nif __name__ == \"__main__\":\n    main()\n</pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T11:13:17Z",
        "interviewCount": 1,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Написать консольное приложение, которое принимает на вход список строк + аргумент is_unique(True или False) и выводит на экран только те строки, которые содержат только уникальные символы(при True) или только с неуникальными символами(при False)</span></p>",
        "time": 10,
        "title": "Написание консольного приложения (усложненная задача)"
    },
    {
        "ID": 2030,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Возможный ответ:</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">num1 = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Введите первое число: \"</span>))\nnum2 = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Введите второе число: \"</span>))\n\nresult = num1 + num2\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"Сумма чисел <span class=\"hljs-subst\">{num1}</span> и <span class=\"hljs-subst\">{num2}</span> равна <span class=\"hljs-subst\">{result}</span>\"</span>)\n \n</pre><p>Ответ д<span style=\"color: rgb(23, 43, 77);\">олжен проходить проверку:</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">assert num1 + num2 == result\n</pre><p><br></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T11:11:35Z",
        "interviewCount": 6,
        "question": "<p>Написать простое консольное приложение, которое просит пользователя ввести два числа и выводит на экран их сумму.</p>",
        "time": 10,
        "title": "Написание консольного приложения"
    },
    {
        "ID": 2029,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(0, 26, 52);\">Это хорошо знакомая конструкция</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'1.txt'</span>, <span class=\"hljs-string\">'w'</span>) <span class=\"hljs-keyword\">as</span> file:\n    file.write(<span class=\"hljs-string\">\"Hello, Ozon!\"</span>)\n</pre><p><span style=\"color: rgb(0, 26, 52);\">После завершения блока - файл \"закроется\" в любом случае, даже если будет внутри Exception.</span></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T11:03:23Z",
        "interviewCount": 243,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Что такое и зачем нужен менеджер контекста?</span></p><p><span style=\"color: rgb(23, 43, 77);\">Приведите пример и описание как работает выход из блока с ним.</span></p>",
        "time": 5,
        "title": "Теоретический вопрос о контекстном менеджере (contextmanager)"
    },
    {
        "ID": 2028,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Через магические методы </span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">__enter__, __exit__, __open__</code><span style=\"color: rgb(23, 43, 77);\">:</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyManager</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__enter__</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">pass</span>   \n \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__exit__</span>(<span class=\"hljs-params\">self, <span class=\"hljs-built_in\">type</span>, value, traceback</span>):\n        <span class=\"hljs-keyword\">pass</span>\n\n<span class=\"hljs-keyword\">with</span> MyManager <span class=\"hljs-keyword\">as</span> mgr:\n    <span class=\"hljs-keyword\">pass</span> \n</pre><p><br></p><p><span style=\"color: rgb(23, 43, 77);\">Через декоратор:</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">from</span> contextlib <span class=\"hljs-keyword\">import</span> contextmanager\n\n<span class=\"hljs-meta\">@contextmanager</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">tag</span>(<span class=\"hljs-params\">name</span>):\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f'&lt;<span class=\"hljs-subst\">{name}</span>&gt;'</span>)\n    yieldprint(<span class=\"hljs-string\">f'&lt;<span class=\"hljs-subst\">{name}</span>&gt;'</span>)\n\n<span class=\"hljs-keyword\">with</span> tag(<span class=\"hljs-string\">'h1'</span>):\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'Hello, Ozon!'</span>) \n\n<span class=\"hljs-comment\">#Результат выполнения:</span>\n<span class=\"hljs-comment\">#﻿&lt;h1&gt;</span>\n<span class=\"hljs-comment\">#Hello, Ozon!</span>\n<span class=\"hljs-comment\">#&lt;h1&gt;</span>\n\n\n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T10:59:51Z",
        "interviewCount": 300,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Рассказать что такое контекстный менеджер, какие задачи решает?</span></p><p><br></p><p><strong>Дополнительный вопрос 1:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Что делает метод&nbsp;</span><em style=\"color: rgb(23, 43, 77);\">enter</em><span style=\"color: rgb(23, 43, 77);\">&nbsp;в контекст-менеджере?</span></p><p><strong>Ответ на доп. вопрос 1:</strong></p><p>Метод&nbsp;<em>enter</em>&nbsp;выполняет код, который должен быть выполнен при входе в контекст, например, инициализацию ресурсов.</p><p><br></p><p><strong>Дополнительный вопрос 2:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Что делает метод&nbsp;</span><em style=\"color: rgb(23, 43, 77);\">exit</em><span style=\"color: rgb(23, 43, 77);\">&nbsp;в контекст-менеджере?</span></p><p><strong>Ответ на доп. вопрос 2:</strong></p><p>Метод&nbsp;<em>exit</em>&nbsp;выполняет код, который должен быть выполнен при выходе из контекста, например, освобождение ресурсов или обработку исключений.</p><p><br></p><p><strong>Дополнительный вопрос 3:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Какие преимущества использования контекст-менеджера?</span></p><p><strong>Ответ на доп. вопрос 3:</strong></p><p>Использование контекст-менеджера позволяет гарантировать корректное открытие и закрытие ресурсов, обработку исключений и упрощает код благодаря автоматическому выполнению определенных действий при входе и выходе из контекста.</p>",
        "time": 3,
        "title": "Рассказать про контекстный менеджер (contextmanager)"
    },
    {
        "ID": 2027,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-title class_\">Hi</span>\n(<span class=\"hljs-string\">'Ozon'</span>, {<span class=\"hljs-string\">'a'</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'b'</span>: <span class=\"hljs-number\">2</span>})\n{<span class=\"hljs-string\">'pi'</span>: <span class=\"hljs-number\">3.14</span>, <span class=\"hljs-string\">'e'</span>: <span class=\"hljs-number\">2.71</span>}&nbsp;\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T10:55:13Z",
        "interviewCount": 458,
        "question": "<p>Необходимо представить результат выражений:</p><pre class=\"ql-syntax\" spellcheck=\"false\">def <span class=\"hljs-keyword\">func</span>(val, <span class=\"hljs-operator\">*</span>args, <span class=\"hljs-operator\">**</span>kwargs):\n    <span class=\"hljs-built_in\">print</span>(val)\n    <span class=\"hljs-built_in\">print</span>(args)\n    <span class=\"hljs-built_in\">print</span>(kwargs)\n<span class=\"hljs-keyword\">\nfunc</span>(<span class=\"hljs-string\">\"Hi\"</span>, <span class=\"hljs-string\">\"Ozon\"</span>, {<span class=\"hljs-string\">\"a\"</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"b\"</span>: <span class=\"hljs-number\">2</span>}, pi<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">3.14</span>, e<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">2.71</span>) <span class=\"hljs-comment\">// code placeholder</span>\n</pre><p><br></p>",
        "time": 3,
        "title": "Распаковка аргументов в Python"
    },
    {
        "ID": 2026,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">func</span>(<span class=\"hljs-params\">val, *args, **kwargs</span>): \n    <span class=\"hljs-built_in\">print</span>(val)\n    <span class=\"hljs-built_in\">print</span>(args)\n    <span class=\"hljs-built_in\">print</span>(kwargs)\n</pre>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T10:52:05Z",
        "interviewCount": 195,
        "question": "<p>Необходимо написать функцию с переменным количеством аргументов, привести пример работы.</p>",
        "time": 5,
        "title": "Написание функции с переменным количество аргументов"
    },
    {
        "ID": 2025,
        "additional": "<p>Q: Исправьте скрипт, что бы получить корректный результат</p><p>A: </p><pre class=\"ql-syntax\" spellcheck=\"false\">func_list = [lambda x, i=i: x*i for i in range(9)]\nfor f in func_list:\n&nbsp; &nbsp; print(f(2))&nbsp;\n</pre>",
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">16\n16\n16\n16\n16\n16\n16\n16\n16\n</pre><p><br></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T10:48:47Z",
        "interviewCount": 83,
        "question": "<p>Имеется список сформированный с помощью лямбда функции, написать, что будет выведено на экран после запуска скрипта&nbsp;</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">func_list = [lambda x: x*i for i in range(9)]\nfor f in func_list:\n&nbsp; &nbsp; print(f(2)) \n</pre>",
        "time": 5,
        "title": "Работа с lambda-функциями"
    },
    {
        "ID": 2024,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">get_name = lambda d: d[<span class=\"hljs-string\">\"имя\"</span>] &nbsp;\nnames = list(<span class=\"hljs-keyword\">map</span>(get_name, people))\n\n<span class=\"hljs-built_in\">print</span>(names) # [<span class=\"hljs-string\">'Алексей'</span>, <span class=\"hljs-string\">'Борис'</span>, <span class=\"hljs-string\">'Валерия'</span>]\n</pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T10:46:40Z",
        "interviewCount": 39,
        "question": "<p>Написать лямбда-функцию для возврата значения ключа \"имя\" из словаря, и получить с помощью нее список имен.</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">people = [\n&nbsp; {\"имя\": \"Алексей\", \"возраст\": 32},\n&nbsp; {\"имя\": \"Борис\", \"возраст\": 27},\n&nbsp; {\"имя\": \"Валерия\", \"возраст\": 21}\n]\n \n</pre><p><br></p>",
        "time": 5,
        "title": "Использование lambda-функции для возврата значения ключа из словаря"
    },
    {
        "ID": 2023,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">is_even = lambda x: True if x % 2 == 0 else False\n\nПример использования:\n\nprint(is_even(4)) # True\nprint(is_even(7)) # False \n</pre><p><br></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T10:44:39Z",
        "interviewCount": 51,
        "question": "<p>Написать lambda-функцию для определения четности числа</p>",
        "time": 5,
        "title": "Использование lambda-функции для определения четности числа "
    },
    {
        "ID": 2022,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">import json\n\nstudents_json = '''{\n    \"students\": [\n        {\n            \"name\": \"John\",\n            \"age\": 18,\n            \"courses\": [\n                {\n                    \"name\": \"Math\",\n                    \"grade\": 4\n                },\n                {\n                    \"name\": \"English\",\n                    \"grade\": 5\n                }\n            ]\n        },\n        {\n            \"name\": \"Jane\",\n            \"age\": 19,\n            \"courses\": [\n                {\n                    \"name\": \"Math\",\n                    \"grade\": 5\n                },\n                {\n                    \"name\": \"English\",\n                    \"grade\": 4\n                }\n            ]\n        }\n    ]\n}'''\n\nstudents_dict = json.loads(students_json)\n\nnum_students = len(students_dict[\"students\"])\nprint(\"Количество студентов:\", num_students)\n\ntotal_age = 0\nfor student in students_dict[\"students\"]:\n    total_age += student[\"age\"]\n\navg_age = total_age / num_students\nprint(\"Средний возраст студентов:\", avg_age)\n\ncourse_grades = {}\nfor student in students_dict[\"students\"]:\n    for course in student[\"courses\"]:\n        course_name = course[\"name\"]\n        grade = course[\"grade\"]\n        if course_name not in course_grades:\n            course_grades[course_name] = [grade]\n        else:\n            course_grades[course_name].append(grade)\n\nfor course_name, grades in course_grades.items():\n    avg_grade = sum(grades) / len(grades)\n    print(\"Средний балл по курсу\", course_name + \":\", avg_grade)\n\nall_grades = []\nfor course_grades in course_grades.values():\n    all_grades += course_grades\navg_all = sum(all_grades) / len(all_grades)\nprint(\"Общий средний балл по всем курсам:\", avg_all) \n\nassert num_students == 2, \"Количество студентов != 2\"\nassert avg_age == 18.5, \"Средний возраст студентов != 18.5\"\nassert avg_all == 4.5, \"Общий средний балл по всем курсам != 4.5\"\n</pre><p><br></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T10:38:21Z",
        "interviewCount": 125,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Необходимо написать программу, которая принимает на вход JSON-строку с данными о студентах в формате:</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"students\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n        <span class=\"hljs-punctuation\">{</span>\n            <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"John\"</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"age\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">18</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"courses\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n                <span class=\"hljs-punctuation\">{</span>\n                    <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Math\"</span><span class=\"hljs-punctuation\">,</span>\n                    <span class=\"hljs-attr\">\"grade\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">4</span>\n                <span class=\"hljs-punctuation\">},</span>\n                <span class=\"hljs-punctuation\">{</span>\n                    <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"English\"</span><span class=\"hljs-punctuation\">,</span>\n                    <span class=\"hljs-attr\">\"grade\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">5</span>\n                <span class=\"hljs-punctuation\">}</span>\n            <span class=\"hljs-punctuation\">]</span>\n        <span class=\"hljs-punctuation\">},</span>\n        <span class=\"hljs-punctuation\">{</span>\n            <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Jane\"</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"age\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">19</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"courses\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n                <span class=\"hljs-punctuation\">{</span>\n                    <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Math\"</span><span class=\"hljs-punctuation\">,</span>\n                    <span class=\"hljs-attr\">\"grade\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">5</span>\n                <span class=\"hljs-punctuation\">},</span>\n                <span class=\"hljs-punctuation\">{</span>\n                    <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"English\"</span><span class=\"hljs-punctuation\">,</span>\n                    <span class=\"hljs-attr\">\"grade\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">4</span>\n                <span class=\"hljs-punctuation\">}</span>\n            <span class=\"hljs-punctuation\">]</span>\n        <span class=\"hljs-punctuation\">}</span>\n    <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</pre><p><br></p><p><span style=\"color: rgb(23, 43, 77);\">Затем вычисляет и выводит на экран</span></p><p><span style=\"color: rgb(23, 43, 77);\">• количество студентов</span></p><p><span style=\"color: rgb(23, 43, 77);\">• средний возраст студентов</span></p><p><span style=\"color: rgb(23, 43, 77);\">• средний балл по каждому курсу</span></p><p><span style=\"color: rgb(23, 43, 77);\">• общий средний балл по всем курсам</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">Количество студентов: <span class=\"hljs-number\">2</span>\nСредний возраст студентов: <span class=\"hljs-number\">18.5</span>\nСредний балл <span class=\"hljs-keyword\">по</span> курсу Math: <span class=\"hljs-number\">4.5</span>\nСредний балл <span class=\"hljs-keyword\">по</span> курсу English: <span class=\"hljs-number\">4.5</span>\nОбщий средний балл по всем курсам: 4.5 \n</pre>",
        "time": 15,
        "title": "Парсинг Json и вложенные циклы"
    },
    {
        "ID": 2021,
        "answers": [
            {
                "content": "<pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">while True:</div><div class=\"ql-code-block\" data-language=\"plain\">    word = input('введите слово: ')</div><div class=\"ql-code-block\" data-language=\"plain\">    if 'A' in word:</div><div class=\"ql-code-block\" data-language=\"plain\">        print(word)</div><div class=\"ql-code-block\" data-language=\"plain\">        break </div></pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T10:35:09Z",
        "interviewCount": 57,
        "question": "<p>Необходимо написать программу, которая содержит</p><pre class=\"ql-syntax\" spellcheck=\"false\"> <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">'введите слово: '</span>) \n</pre><p>и проверяет его. В случае если слово содержит букву \"А\" то цикл останавливается и слово печатается</p><p>иначе запрашивает заново input.</p>",
        "time": 7,
        "title": "Цикл WHILE"
    },
    {
        "ID": 2020,
        "answers": [
            {
                "content": "<p>Вариант 1:</p><pre class=\"ql-syntax\" spellcheck=\"false\">result = [<span class=\"hljs-built_in\">dict</span>(<span class=\"hljs-built_in\">zip</span>(columns, row)) <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> rows]\n</pre><p><br></p><p>Вариант 2:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attribute\">result</span> = []\nfor row in rows:\n    d = {}\n    <span class=\"hljs-attribute\">for</span> index, col in enumerate(columns):\n        d[columns[index]] = row[index]\n    result.append(d)\n</pre><p><br></p><p>Вариант 3 (через функцию):</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\">def <span class=\"hljs-title\">my_zip</span><span class=\"hljs-params\">(cols, row)</span>:\n    d =</span> {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> index in <span class=\"hljs-title\">range</span><span class=\"hljs-params\">(len(cols))</span>:\n        d[cols[index]] =</span> row[index]\n    <span class=\"hljs-keyword\">return</span> d\n\nresult = []\n<span class=\"hljs-keyword\">for</span> row in rows:\n    result.<span class=\"hljs-built_in\">append</span>(<span class=\"hljs-built_in\">my_zip</span>(columns, row))\n</pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T10:30:07Z",
        "interviewCount": 34,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Необходимо упаковать следующие данные в список словарей:</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">columns = 'id', 'item_name', 'price'\nrows =&nbsp;[(1, 'Coca-Cola', '100'), (2, 'Pants', '2000')]\n</pre><p>Ожидаемый результат:</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">[ {'id': 1, 'item_name': 'Coca-Cola', 'price': '100'}, {'id': 2, 'item_name': 'Pants', 'price': '2000'}]&nbsp;\n</pre>",
        "time": 8,
        "title": "Цикл FOR"
    },
    {
        "ID": 2019,
        "answers": [
            {
                "content": "<p><span class=\"hljs-number\">1</span>. Цикл <span class=\"hljs-keyword\">for</span> используется для перебора элементов в итерируемом объекте. </p><p>Каждый элемент присваивается переменной на каждой итерации цикла.&nbsp;</p><p><br></p><p>Пример:</p><pre class=\"ql-syntax\" spellcheck=\"false\">\n<span class=\"hljs-attribute\">fruits</span> = [<span class=\"hljs-string\">\"apple\"</span>, <span class=\"hljs-string\">\"banana\"</span>, <span class=\"hljs-string\">\"cherry\"</span>]\nfor fruit in fruits:\n&nbsp; &nbsp; print(fruit)\n\n</pre><p> </p><p><span class=\"hljs-number\">2</span>. Цикл <span class=\"hljs-keyword\">while</span> используется для повторения блока кода, пока условие истинно.&nbsp;</p><p><br></p><p>Пример:</p><pre class=\"ql-syntax\" spellcheck=\"false\">i <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">while</span> i <span class=\"hljs-operator\">&lt;</span> <span class=\"hljs-number\">6</span>:\n&nbsp; &nbsp; <span class=\"hljs-built_in\">print</span>(i)\n&nbsp; &nbsp; i <span class=\"hljs-operator\">+=</span> <span class=\"hljs-number\">1</span>\n\n</pre><p><span class=\"hljs-number\">3</span>. Цикл <span class=\"hljs-keyword\">do</span><span class=\"hljs-operator\">-</span><span class=\"hljs-keyword\">while</span> отсутствует в <span class=\"hljs-type\">Python</span>, </p><p>но его можно эмулировать, используя цикл <span class=\"hljs-keyword\">while</span> с проверкой условия в конце цикла.</p><p><br></p><p>Пример:</p><pre class=\"ql-syntax\" spellcheck=\"false\">i = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n&nbsp; &nbsp; <span class=\"hljs-built_in\">print</span>(i)\n&nbsp; &nbsp; i += <span class=\"hljs-number\">1</span>\n&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> i &gt; <span class=\"hljs-number\">5</span>:\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">break</span>\n</pre><p><br></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T10:25:27Z",
        "interviewCount": 87,
        "question": "<p>Расскажите о видах циклов в python.</p>",
        "time": 5,
        "title": "Теоретический вопрос о циклах в Python"
    },
    {
        "ID": 2018,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">import json\n\nuser_json = '''{\n    \"name\": \"John\",\n    \"age\": 30,\n    \"city\": \"New York\"\n}'''\n\nuser_dict = json.loads(user_json)\nfor k, v in user_dict.items():\n     print('{k}: {v}')\n</pre><p><br></p><p><br></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T10:22:39Z",
        "interviewCount": 20,
        "question": "<p>Написать программу, которая принимает на вход JSON-строку с данными о пользователе в формате:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"John\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"age\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">30</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"city\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"New York\"</span>\n<span class=\"hljs-punctuation\">}</span>\n</pre><p><br></p><p>Затем выводит на экран информацию о пользователе в виде через цикл:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">John</span> \n<span class=\"hljs-attr\">age:</span> <span class=\"hljs-number\">30</span> \ncity: New York \n</pre>",
        "time": 7,
        "title": "Цикл FOR"
    },
    {
        "ID": 2017,
        "answers": [
            {
                "content": "<p>Ошибку в первом случае - потому что строка неизменяемый объект; во втором случае False</p><pre class=\"ql-syntax\" spellcheck=\"false\">&gt;&gt;&gt; \"1234567890\"[6] = 7\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: 'str' object does not support item assignment\n&gt;&gt;&gt; \"1234567890\"[6] == 7\nFalse\n</pre><p><br></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T09:40:39Z",
        "interviewCount": 455,
        "question": "<p>Что выведут строки:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-string\">\"1234567890\"</span>[<span class=\"hljs-number\">6</span>] = <span class=\"hljs-number\">7</span>\n<span class=\"hljs-string\">\"1234567890\"</span>[<span class=\"hljs-number\">6</span>] == <span class=\"hljs-number\">7</span>\n</pre><p><br></p><p><strong>Дополнительный вопрос:</strong></p><p>Как получить <strong>True</strong>?</p><p><br></p><p><strong>Ответ на доп. вопрос:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">\"1234567890\"[6] == '7'\n</pre>",
        "time": 5,
        "title": "Работа со строками: символ в строке"
    },
    {
        "ID": 2016,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">([10, <span class=\"hljs-string\">'a'</span>], [123], [10, <span class=\"hljs-string\">'a'</span>])\n</pre><p>Во втором случае передается объект списка, изменяет он, в первом и третьем изменяется тот, что был создан по-умолчанию.</p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T09:37:01Z",
        "interviewCount": 446,
        "question": "<p>Есть следующая функция, испльзованная в определении переменных:</p><pre class=\"ql-syntax\" spellcheck=\"false\">def <span class=\"hljs-title function_\">append_list</span><span class=\"hljs-params\">(val, list=[])</span>:\n    list.append(val)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">list</span>\n\n<span class=\"hljs-variable\">list1</span> <span class=\"hljs-operator\">=</span> append_list(<span class=\"hljs-number\">10</span>)\nlist2 = append_list(<span class=\"hljs-number\">123</span>,[])\nlist3 = append_list(<span class=\"hljs-string\">'a'</span>)\n</pre><p>Представьте, что вернется при вызове переменных:</p><pre class=\"ql-syntax\" spellcheck=\"false\">list1, list2, list3\n</pre>",
        "time": 5,
        "title": "list append №2"
    },
    {
        "ID": 2015,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">['a', 'b', 2]\n</pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T09:31:18Z",
        "interviewCount": 40,
        "question": "<p>Представьте результаты выражений</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">append_list</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">list</span>=[]</span>):\n    <span class=\"hljs-built_in\">list</span>.append(<span class=\"hljs-built_in\">len</span>(<span class=\"hljs-built_in\">list</span>))\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>\n\nappend_list([<span class=\"hljs-string\">'a'</span>,<span class=\"hljs-string\">'b'</span>])\n</pre><p><br></p><p><strong>Дополнительный вопрос:</strong></p><p>Что вернется, если вызвать <strong><em>append_list() </em></strong>?</p><p><strong>Ответ на доп. вопрос:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">[0]\n</pre>",
        "time": 4,
        "title": "list append"
    },
    {
        "ID": 2014,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Упадет, уже внутри функции - аннотации не проверяют типы. Python - язык с динамической типизацией. Но это нужно - чтобы статический анализатор мог найти ошибку.</span></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T09:25:57Z",
        "interviewCount": 85,
        "question": "<p>У нас новый питон, в нем можно писать аннотации типов, но они не избавляют нас от ошибок.</p><p>Что будет в результате выполнения?</p><pre class=\"ql-syntax\" spellcheck=\"false\">def sum(a: int, b: int) -&gt; int:\n    return a+b\n    \nsum(\"A\", 1)\n</pre><p><br></p>",
        "time": 3,
        "title": "Python 3.6+: аннотации типов"
    },
    {
        "ID": 2013,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">&gt;&gt;&gt; False and True\nFalse\n&gt;&gt;&gt; 7 &lt; 7 or True\nTrue\n&gt;&gt;&gt; not 2 == 2\nFalse\n</pre><p><br></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T09:23:31Z",
        "interviewCount": 533,
        "question": "<p>Представьте результаты выражений</p><pre class=\"ql-syntax\" spellcheck=\"false\">&gt;&gt;&gt; False and True\n&gt;&gt;&gt; 7 &lt; 7 or True\n&gt;&gt;&gt; not 2 == 2\n</pre>",
        "time": 3,
        "title": "False or True"
    },
    {
        "ID": 2012,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Это принципы для эффективного проектирования программных приложений.</span></p><p><span style=\"color: rgb(23, 43, 77);\">S – Принцип единственной ответственности (Single Responsibility Principle),</span></p><p><span style=\"color: rgb(23, 43, 77);\">O – Принцип открытости/закрытости (Open‐Closed Principle),</span></p><p><span style=\"color: rgb(23, 43, 77);\">L – Принцип подстановки Барбары Лисков (Liskov Substitution Principle),</span></p><p><span style=\"color: rgb(23, 43, 77);\">I – Принцип разделения интерфейсов (Interface Segregation Principle),</span></p><p><span style=\"color: rgb(23, 43, 77);\">D – Принцип инверсии зависимостей (Dependency Inversion Principle).</span></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-03T21:06:26Z",
        "interviewCount": 93,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Что такое SOLID? Как расшифровывается данная аббревиатура?</span></p>",
        "time": 4,
        "title": "Теоретический вопрос о принципах SOLID"
    },
    {
        "ID": 2011,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">The Principle of Least Surprise (or Astonishment) — не используйте решения, в которых есть непонятные моменты или которые могут завести в тупик.</span></p><p><span style=\"color: rgb(23, 43, 77);\">Keep It Simple Stupid (KISS) — используйте самое простое решение.</span></p><p><span style=\"color: rgb(23, 43, 77);\">You Ain’t Gonne Need It (YAGNI) — создавайте решения для текущих проблем, а не возможных в будущем.</span></p><p><span style=\"color: rgb(23, 43, 77);\">Don’t Repeat Yourself (DRY) — удаляйте дублирование в коде.</span></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-03T21:04:15Z",
        "interviewCount": 10,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Назовите основные принципы разработки</span></p>",
        "time": 3,
        "title": "Теоретический вопрос о основных принципах разработки"
    },
    {
        "ID": 2010,
        "additional": "<p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Если мы хотим выполнить обработку исключения в&nbsp;</em><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\"><em>except</em></code><em style=\"color: rgb(127, 140, 141);\">?</em></p><p>A: То есть мы хотим выполнить его только при определенной ошибке? надо написать синтаксис:</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">except TypeError:\n    n = 1\n</pre><p><br></p>",
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Напечатается 'Hi, Ozon', в n будет 1&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">finally</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;выполнится в любом случае, блок except если что-то пойдет не так в&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">try</code></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-03T21:02:05Z",
        "interviewCount": 329,
        "question": "<p>Представить результат выполнения кода Описать, как работает эта конструкция.</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">try</span>:\n    n = <span class=\"hljs-number\">1</span> + <span class=\"hljs-string\">'A'</span>\n<span class=\"hljs-keyword\">except</span>:\n    n = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">finally</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'Hi, Ozon'</span>)\n</pre><p><br></p>",
        "time": 7,
        "title": "Конструкция try/catch"
    },
    {
        "ID": 2009,
        "answers": [
            {
                "content": "<p>1. Композиция используется, когда нужно создать новый класс, который содержит другой класс в качестве поля. Это может быть полезно, когда вам нужно использовать функциональность одного класса в другом классе без наследования. Кроме того, композиция позволяет создавать более гибкие и модульные системы.</p><p>2. Наследование используется, когда нужно создать новый класс на основе уже существующего класса, чтобы унаследовать его свойства и методы. Это может быть полезно, когда вы хотите создать новый класс, который является расширением существующего класса. Наследование позволяет создавать более простые и понятные иерархии классов.</p><p>3. Агрегация используется, когда необходимо создать новый класс, который содержит несколько других классов. Это может быть полезно, когда вы хотите создать новый класс, который является коллекцией других классов. Агрегация позволяет создавать более сложные иерархии классов, чем композиция или наследование.</p><p><br></p><p>Выбор между композицией, наследованием и агрегацией зависит от конкретных требований к системе и задачи, которую необходимо решить. Важно понимать, что каждый из этих механизмов имеет свои преимущества и недостатки, которые следует учитывать при выборе подходящего решения.</p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-03T20:56:26Z",
        "interviewCount": 59,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Необходимо объяснить, когда следует использовать композицию, наследование, агрегацию в объектно-ориентированном программировании.</span></p>",
        "time": 5,
        "title": "Теоретический вопрос о принципах ООП."
    },
    {
        "ID": 2008,
        "answers": [
            {
                "content": "<p><strong>1. Типизация</strong>&nbsp;- это процесс определения типов данных, используемых в программировании. Она позволяет контролировать правильность использования переменных и функций, а также упрощает чтение и понимание кода.</p><p><strong>2. Существует два основных вида типизации</strong>: динамическая и статическая. Статическая типизация требует указания типов данных явно, в то время как динамическая типизация позволяет определять типы автоматически, на основе контекста.</p><p><strong>3 &amp; 4. В Python существует возможность явной типизации, которая была добавлена в версии 3.5</strong>. Она позволяет указывать типы данных для аргументов функций, а также для переменных, используемых в программе.</p><p><strong>5. Mypy</strong>&nbsp;- это инструмент для статической проверки типов в Python. Он позволяет обнаруживать ошибки, связанные с неправильным использованием типов данных, еще до запуска программы. Mypy использует синтаксис языка Python для определения типов данных и может быть использован вместе с явной типизацией в Python.</p><p>&nbsp;</p><p><strong>6. Плюсы типизации:</strong></p><ol><li>Упрощает чтение кода и позволяет быстрее понимать, какие переменные используются в программе.</li><li>Помогает избежать ошибок, связанных с неправильным использованием переменных.</li><li>Позволяет быстрее обнаруживать ошибки в программе.</li><li>Упрощает документирование кода.</li></ol><p><strong>Минусы типизации</strong>:</p><ol><li>Требует больше кода для объявления переменных и указания их типов.</li></ol>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-03T20:54:14Z",
        "interviewCount": 24,
        "question": "<p>1. Что такое типизация?</p><p>2. Какие виды типизации существуют?</p><p>3. Какие особенности имеет типизация в Python?</p><p>4. С какой версии Python поддерживает типизацию?</p><p>5. Что такое mypy и как он связан с типизацией в Python?</p><p>6. Возможные плюсы и минусы типизации</p>",
        "time": 5,
        "title": "Теоретический вопрос о типизации."
    },
    {
        "ID": 2007,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Программа работает. Добавлено логирование с обычным print'ом.</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">def my_decorator(func): &nbsp; &nbsp; \n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        print(\"Before function call\")\n        res = func(*args, **kwargs)\n        print(\"After function call\")\n        return res\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print(\"Hello!\")\n\n\nsay_hello()\n</pre>",
                "difficulty": "GRADE_16"
            },
            {
                "content": "<p>Программа работает корректно при любых допустимых входных данных, за исключением случаев, когда введенные данные не соответствуют ожидаемому типу.</p><pre class=\"ql-syntax\" spellcheck=\"false\">def my_decorator(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        print(\"Before function call\")\n        res = func(*args, **kwargs)\n        print(\"After function call\")\n        return res\n    return wrapper\n\ntry:\n    @my_decorator\n    def say_hello(name: str):\n        print(f\"Hello, {name}!\")\n    say_hello(\"Peter\")\nexcept TypeError:\n    print(\"Ошибка: неверный тип данных.\")\n</pre>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Программа работает корректно при допустимых входных данных, но может выдавать некорректный результат или ошибку при некоторых недопустимых входных данных.</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">def my_decorator(func):\n&nbsp; &nbsp; @functools.wraps(func)\n&nbsp; &nbsp; def wrapper(*args, **kwargs):\n&nbsp; &nbsp; &nbsp; &nbsp; if not all(isinstance(arg, int) for arg in args):\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(\"Ошибка: неверный тип аргументов.\")\n&nbsp; &nbsp; &nbsp; &nbsp; else:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(\"Before function call\")\n&nbsp; &nbsp; &nbsp; &nbsp; res = func(*args, **kwargs)\n&nbsp; &nbsp; &nbsp; &nbsp; print(\"After function call\")\n&nbsp; &nbsp; &nbsp; &nbsp; return res\n&nbsp; &nbsp; return wrapper\n\n@my_decorator\ndef sum_numbers(a, b, c=None):\n&nbsp; &nbsp; if c is not None:\n&nbsp; &nbsp; &nbsp; &nbsp; print(f\"{a} + {b} + {c} = {a + b + c}\")\n&nbsp; &nbsp; else:\n&nbsp; &nbsp; &nbsp; &nbsp; print(f\"{a} + {b} = {a + b}\")\n\nsum_numbers(2, 3)\nsum_numbers(2, \"3\")\nsum_numbers(2, 3, c=4) \n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-03T20:51:10Z",
        "interviewCount": 315,
        "question": "<p>Напишите программу на Python, которая принимает на вход функцию и декоратор, и применяет декоратор к функции.</p><p><br></p><p><strong>Примечание</strong>: Декоратор должен изменять поведение функции, например, добавлять логирование или проверку аргументов.</p>",
        "time": 10,
        "title": "Написание декоратора"
    },
    {
        "ID": 2006,
        "answers": [
            {
                "content": "<p><strong>Ответ на теоретическую часть:</strong></p><p>В Python есть несколько стандартных типов данных:</p><p><br></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Numbers (числа)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Strings (строки)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Lists (списки)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Dictionaries (словари)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Tuples (кортежи)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Sets (множества)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Boolean (логический тип данных)</li></ol><p>Будет плюсом, если кандидат упомянул про frozenset()</p><p><br></p><p>Эти типы данных можно, в свою очередь, классифицировать по нескольким признакам:</p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>изменяемые (списки, словари и множества)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>неизменяемые (числа, строки и кортежи)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>упорядоченные (списки, кортежи, строки и словари)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>неупорядоченные (множества)</li></ol>",
                "difficulty": "GRADE_SCREENING"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-03T20:47:51Z",
        "interviewCount": 291,
        "question": "<p>Какие типы данных существуют в Python?</p>",
        "time": 3,
        "title": "Типы данных"
    },
    {
        "ID": 2005,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Возможные варианты: pycodestyle, pylint, pyflakes, flake8</span></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-03T20:40:19Z",
        "interviewCount": 3,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Какие python линтеры вы знаете?</span></p><p><br></p><p><strong style=\"color: rgb(23, 43, 77);\">Дополнительный вопрос 1:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Какие правила можно не соблюдать&nbsp;?</span></p><p><strong>Ответ на доп. вопрос 1:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Зависит от договоренностей в команде/проекте - часто вместо максимальной длины строки 79 берется другое значение</span></p><p><br></p><p><strong style=\"color: rgb(23, 43, 77);\">Дополнительный вопрос 2:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Как можно настроить/изменить поведение линтера</span></p><p><strong>Ответ на доп. вопрос 2:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Зависит от линтера - можно создать конфигурационный файл, в котором указать или изменит нужные/ненужные нам опции, либо передать в опции при запуске</span></p>",
        "time": 3,
        "title": "Виды python-линтеров."
    },
    {
        "ID": 2004,
        "answers": [
            {
                "content": "<p>Линтеры, форматтеры.</p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-03T20:37:23Z",
        "interviewCount": 20,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Что может помочь соблюдать принятый в компании или команде кодстайл?</span></p><p><br></p><p><strong style=\"color: rgb(23, 43, 77);\">Дополнительный вопрос:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Как мы можем гарантировать, что код в репозитории соответствует принятому кодстайлу?</span></p><p><strong style=\"color: rgb(23, 43, 77);\">Ответ на дополнительный вопрос:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Джоба с линтером в пайплайне.</span></p>",
        "time": 3,
        "title": "Вопрос по кодстайл"
    },
    {
        "ID": 2003,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Namedtuple - неизменяемый, более простая структура данных, занимает меньше памяти.</span></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-03T20:31:04Z",
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Чем namedtuple отличается от dataclass?</span></p><p><br></p><p><strong style=\"color: rgb(23, 43, 77);\">Дополнительный вопрос: </strong></p><p>Когда следует использовать namedtuple?</p><p><strong>Ответ на дополнительный вопрос:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Когда нужен кортеж (распаковка, итерация)</span></p>",
        "time": 3,
        "title": "Теоретический вопрос о namedtuple"
    },
    {
        "ID": 2002,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Коллекции - это специальные типы данных (контейнеров), выступающие альтернативами встроенным контейнерам (list, set, tuple, dict). Они могут хранить в себе различные типы данных, к которым можно обращаться, а также специальные функции и методы для работы с этими данными (в зависимости от коллекции).</span></p><p><span style=\"color: rgb(23, 43, 77);\">Коллекции: namedtuple(), deque, ChainMap, Counter, OrderedDict, defaultdict, UserDict, UserList, UserString</span></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-03T20:28:44Z",
        "interviewCount": 10,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Что представляют из себя коллекции (collections) в python. Назовите какие коллекции вы знаете?</span></p>",
        "time": 4,
        "title": "Теоретический вопрос о коллекциях"
    },
    {
        "ID": 2001,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">from collections import namedtuple\n\n\nUserEmails = namedtuple('UserEmails', ['main', 'home', 'work'], defaults=(None, None))\nnew_user = UserEmails(main='main@user.com', work='work@user.com')\n\nsend_message(email=new_user.main, text='email for main')\n\nfor email in new_user:\n    if email:\n        send_message(email=email, text='email for all')\n</pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-03T20:24:16Z",
        "interviewCount": 1,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Необходимо реализовать dataclass User в виде namedtuple и скорректировать логику</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">from</span> dataclasses <span class=\"hljs-keyword\">import</span> dataclass, astuple\n\n\n<span class=\"hljs-meta\">@dataclass</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserEmails</span>:\n    main: <span class=\"hljs-built_in\">str</span>\n    home: <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-literal\">None</span>\n    work: <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-literal\">None</span>\n\nnew_user = UserEmails(main=<span class=\"hljs-string\">'main@user.com'</span>, work=<span class=\"hljs-string\">'work@user.com'</span>)\n\nsend_message(email=new_user.main, text=<span class=\"hljs-string\">'email for main'</span>)\n\n<span class=\"hljs-keyword\">for</span> email <span class=\"hljs-keyword\">in</span> astuple(new_user):\n    <span class=\"hljs-keyword\">if</span> email:\n        send_message(email=email, text=<span class=\"hljs-string\">'email for all'</span>)\n</pre><p><br></p><p><strong>Дополнительные вопросы:</strong></p><p><br></p><p>1. Чем namedtuple отличается от dataclass?</p><ul><li>Неизменяемый, более простая структура данных, занимает меньше памяти</li></ul><p>2. <span style=\"color: rgb(23, 43, 77);\">Когда следует использовать?</span></p><ul><li>Когда нужен кортеж (распаковка, итерация)</li></ul>",
        "time": 7,
        "title": "Методы работы с коллекциями"
    },
    {
        "ID": 1959,
        "answers": [
            {
                "content": "<p>Проверяем, что кандидат знает библиотеки <strong>request</strong>, <strong>urllib</strong> или любую другую для создания запросов в <strong>python</strong>. Убедится, что знает <strong>retry</strong> и понимает, что http-взаимодействие не гарантирует стопроцентное получение данных.</p><p>Примерный каркас, как должен выглядеть набросок клиента:</p><pre class=\"ql-syntax\" spellcheck=\"false\">import functools\nimport time\nimport requests\n\nURL = \"https://petstore.swagger.io/\"\n\n\nclass RequestNotOk(Exception):\n    pass\n\n\ndef retry(exceptions=(Exception, ), tries=-1, delay=1, back_off=1, exception_handler=None):\n    \"\"\"Декоратор позволяет сделать несколько запросов к апи с экспоненциальным ростом\n    времени ожидания между запросами.\n\n    :param exceptions: список обрабатываемых исключений.\n    :param tries: количество попыток\n    :param delay: количество секунд для ожидания\n    :param back_off: значение для увеличения времени ожидания после каждой ошибки\n    :param exception_handler: функция для кастомной обработки ошибок\n    \"\"\"\n    def _wrap(func):\n        @functools.wraps(func)\n        def _inner(*args, **kwargs):\n            _tries, _delay = tries, delay\n            while True:\n                try:\n                    return func(*args, **kwargs)\n                except exceptions as ex:\n                    _tries -= 1\n                    is_retry_possible = _tries &gt;= 0\n                    if exception_handler is not None:\n                        exception_handler(ex, is_retry_possible, retry_delay=_delay)\n                    if not is_retry_possible:\n                        raise\n                    time.sleep(_delay)\n                    _delay *= back_off\n        return _inner\n    return _wrap\n\n\n@retry(\n    exceptions=(RequestNotOk, ConnectionError, BrokenPipeError),\n    tries=5,\n    back_off=2,\n)\ndef get_data(url, **params):\n    result = requests.get(url, params=params)\n    if result.ok:\n        return result\n    raise RequestNotOk(\"Fail to get data\", result.text)\n\n\n@retry(\n    exceptions=(RequestNotOk, ConnectionError, BrokenPipeError),\n    tries=5,\n    back_off=2,\n)\ndef post_new_pet(**data):\n    result = requests.post(URL, json=data)\n    if result.ok:\n        return result\n    raise RequestNotOk(\"Fail to post data\", result.text)\n\n\ndef get_pets(**params):\n    first_batch = get_data(URL, **params)\n    data = first_batch.json()['data']\n    if len(data.json()['data']):\n        yield from data\n    while data['next']:\n        batch = get_data(data['next'], **params)\n        if len(batch.json()['data']):\n            yield from batch.json()['data']\n\n\n# Пример вызовов:\npost_new_pet({\n    'name': 'oleg',\n    'age': 23\n})\n\nfor i in get_pets():\n    print(i)\n</pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T09:39:21Z",
        "interviewCount": 17,
        "question": "<p>Есть API с информацией о питомцах&nbsp;<a href=\"https://petstore.swagger.io/#/\" rel=\"noopener noreferrer\" target=\"_blank\">https://petstore.swagger.io/#/</a></p><p>Написать клиент у которого будет метод получения и создания питомцев.</p><p>Метод получения должен быть с генератором и лимитом offset-a.</p>",
        "time": 15,
        "title": "Написание клиента для сервиса"
    },
    {
        "ID": 1958,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">from typing import Any\n\n\nclass ListNode:\n    def <span class=\"hljs-built_in\">__init__</span>(self, val=None, next_element=None):\n        self.val = val\n        self.next = next_element\n\nclass LinkedList:\n    def <span class=\"hljs-built_in\">__init__</span>(self):\n        self.head = None\n\n    def <span class=\"hljs-built_in\">add_to_front</span>(self, val: Any):\n        new_node = <span class=\"hljs-built_in\">ListNode</span>(val)\n        new_node.next = self.head\n        self.head = new_node\n\n    def <span class=\"hljs-built_in\">add_to_end</span>(self, val: Any) -&gt; None:\n        pointer = self.head\n        if pointer is None:\n            self.<span class=\"hljs-built_in\">add_to_front</span>(val)\n        else:\n            while pointer.next:\n                pointer = pointer.next\n            pointer.next = <span class=\"hljs-built_in\">ListNode</span>(val)\n\n    def <span class=\"hljs-built_in\">print_list</span>(self):\n        temp = self.head\n        if (temp != None):\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Список содержит:\"</span>, end=<span class=\"hljs-string\">\" \"</span>)\n            while (temp != None):\n                <span class=\"hljs-built_in\">print</span>(temp.val, end=<span class=\"hljs-string\">\" \"</span>)\n                temp = temp.next\n            <span class=\"hljs-built_in\">print</span>() # этот принт для красоты принтования \n&nbsp; &nbsp; &nbsp; &nbsp; else:\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Список пустой.\"</span>)\n</pre><p>Пример вызовов:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attribute\">ll</span> = LinkedList()\nll.add_to_front(<span class=\"hljs-string\">'23'</span>)\nll.add_to_front(<span class=\"hljs-string\">'oleg'</span>)\nll.print_list()\n\nll.add_to_end(<span class=\"hljs-string\">'рыжий'</span>)\nll.add_to_end(<span class=\"hljs-string\">'пыжий'</span>)\nll.print_list()\n</pre><p>Ответ:</p><pre class=\"ql-syntax\" spellcheck=\"false\">Список содержит: oleg 23\nСписок содержит: oleg 23 рыжий пыжий\n</pre>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Дополнительный вопрос для 19: </span></p><p><span style=\"color: rgb(23, 43, 77);\">Дополнительно реализовать добавление элемента в переданную позицию связанного списка (</span><strong style=\"color: rgb(23, 43, 77);\">add_to_position</strong><span style=\"color: rgb(23, 43, 77);\">).</span></p><p><br></p><p>Ответ:</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">from typing import Any\n\n\nclass ListNode:\n    def <span class=\"hljs-built_in\">__init__</span>(self, val=None, next_element=None):\n        self.val = val\n        self.next = next_element\n\nclass LinkedList:\n    def <span class=\"hljs-built_in\">__init__</span>(self):\n        self.head = None\n\n    def <span class=\"hljs-built_in\">add_to_front</span>(self, val: Any):\n        new_node = <span class=\"hljs-built_in\">ListNode</span>(val)\n        new_node.next = self.head\n        self.head = new_node\n\n    def <span class=\"hljs-built_in\">add_to_end</span>(self, val: Any) -&gt; None:\n        pointer = self.head\n        if pointer is None:\n            self.<span class=\"hljs-built_in\">add_to_front</span>(val)\n        else:\n            while pointer.next:\n                pointer = pointer.next\n            pointer.next = <span class=\"hljs-built_in\">ListNode</span>(val)\n\n    def <span class=\"hljs-built_in\">add_to_position</span>(self, position: int, val: Any):\n        pointer = self.head\n        i = <span class=\"hljs-number\">1</span>\n        while i != position-<span class=\"hljs-number\">1</span> and pointer.next:\n            i+=<span class=\"hljs-number\">1</span>\n            pointer = pointer.next\n        new = <span class=\"hljs-built_in\">ListNode</span>(val)\n        new.next = pointer.next\n        pointer.next = new\n\n\n    def <span class=\"hljs-built_in\">print_list</span>(self):\n        temp = self.head\n        if (temp != None):\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Список содержит:\"</span>, end=<span class=\"hljs-string\">\" \"</span>)\n            while (temp != None):\n                <span class=\"hljs-built_in\">print</span>(temp.val, end=<span class=\"hljs-string\">\" \"</span>)\n                temp = temp.next\n            <span class=\"hljs-built_in\">print</span>() # этот принт для красоты принтования \n&nbsp; &nbsp; &nbsp; &nbsp; else:\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Список пустой.\"</span>)\n</pre><p>Пример вызовов:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attribute\">ll</span> = LinkedList()\nll.add_to_front(<span class=\"hljs-string\">'23'</span>)\nll.add_to_front(<span class=\"hljs-string\">'oleg'</span>)\nll.print_list()\n\nll.add_to_end(<span class=\"hljs-string\">'рыжий'</span>)\nll.add_to_end(<span class=\"hljs-string\">'пыжий'</span>)\nll.print_list()\n\nll.add_to_position(<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">\"пёс\"</span>)\nll.print_list()\n</pre><p>Ответ:</p><pre class=\"ql-syntax\" spellcheck=\"false\">Список содержит: oleg 23\nСписок содержит: oleg 23 рыжий пыжий\nСписок содержит: oleg 23 пёс рыжий пыжий\n</pre><p><br></p>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T09:30:47Z",
        "interviewCount": 9,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Есть элемент связанного списка (</span><strong style=\"color: rgb(23, 43, 77);\">ListNode</strong><span style=\"color: rgb(23, 43, 77);\">).</span></p><p><span style=\"color: rgb(23, 43, 77);\">Реализовать для него методы добавления элемента в начало(</span><strong style=\"color: rgb(23, 43, 77);\">add_to_front</strong><span style=\"color: rgb(23, 43, 77);\">) и конец(</span><strong style=\"color: rgb(23, 43, 77);\">add_to_end</strong><span style=\"color: rgb(23, 43, 77);\">).</span></p>",
        "time": 15,
        "title": "Связанные списки"
    },
    {
        "ID": 1957,
        "answers": [
            {
                "content": "<p>Понимает как написать.</p><pre class=\"ql-syntax\" spellcheck=\"false\">def generate_item() -&gt; int:\n&nbsp; &nbsp; return random.<span class=\"hljs-built_in\">randint</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">20</span>)\n\ndef <span class=\"hljs-built_in\">remove_items</span>(item_ids):\n&nbsp; &nbsp; pass\n\n@pytest.fixture\ndef <span class=\"hljs-built_in\">setup_items</span>():\n&nbsp; &nbsp; item_ids = []\n&nbsp; &nbsp; def <span class=\"hljs-built_in\">callback</span>(count):\n&nbsp; &nbsp; &nbsp; &nbsp; for i in <span class=\"hljs-built_in\">range</span>(count):\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; item_ids.<span class=\"hljs-built_in\">append</span>(<span class=\"hljs-built_in\">generate_item</span>())\n&nbsp; &nbsp; &nbsp; &nbsp; return item_ids\n&nbsp; &nbsp; yield callback\n&nbsp; &nbsp; <span class=\"hljs-built_in\">remove_items</span>(item_ids)\n\n\ndef <span class=\"hljs-built_in\">test_a</span>(setup_items):\n&nbsp; &nbsp; ...\n&nbsp; &nbsp; item_ids = <span class=\"hljs-built_in\">setup_items</span>(count=<span class=\"hljs-number\">3</span>) # [<span class=\"hljs-number\">123</span>,<span class=\"hljs-number\">321</span>,<span class=\"hljs-number\">213</span>]\n&nbsp; &nbsp; ...\n</pre>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>Помимо возможности написать, может еще и объяснить как это работает и почему. Может реализовать с использованием <strong>request.addfinalizer</strong></p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Кандидат может рассказать о нюансах.</p><p>Например, что будет, если для хранения результата использовать простой тип (int, str), после yield данные будут пустые и так далее.</p>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T09:14:31Z",
        "interviewCount": 60,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Есть фикстура, которая создает товары в БД.</span></p><p><span style=\"color: rgb(23, 43, 77);\">Необходимо дополнить/изменить данную фикстуру, добавив очистку данных из БД.</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\">def <span class=\"hljs-title\">generate_item</span>() -&gt; <span class=\"hljs-built_in\">int</span>:\n&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> random.<span class=\"hljs-title\">randint</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">20</span></span>)\n\n@pytest.fixture\ndef <span class=\"hljs-title\">setup_items</span>():\n&nbsp; &nbsp; def <span class=\"hljs-title\">callback</span>(<span class=\"hljs-params\">count</span>):\n&nbsp; &nbsp; &nbsp; &nbsp; item_ids</span> = []\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\">count</span>):\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; item_ids.<span class=\"hljs-title\">append</span>(<span class=\"hljs-params\">generate_item(</span>))\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> item_ids\n&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> callback\n\ndef <span class=\"hljs-title\">test_a</span>(<span class=\"hljs-params\">setup_items</span>):\n&nbsp; &nbsp; ...\n&nbsp; &nbsp; item_ids</span> = setup_items(count=<span class=\"hljs-number\">3</span>) <span class=\"hljs-meta\"># [123,321,213]</span>\n&nbsp; &nbsp; ... \n</pre><p><br></p><p><strong><u>Дополнительный вопрос для 19-го грейда:</u></strong></p><p><span style=\"color: rgb(23, 43, 77);\">В чем принципиальное отличие </span><strong style=\"color: rgb(23, 43, 77);\">yeild</strong><span style=\"color: rgb(23, 43, 77);\"> от </span><strong style=\"color: rgb(23, 43, 77);\">request.addfinalizer</strong><span style=\"color: rgb(23, 43, 77);\"> и в каких ситуациях какой из подходов лучше использовать?</span></p><p><strong><u>Ответ на доп. вопрос</u></strong>:</p><ol><li>Разница в том, что с помощью addfinalizer можно зарегистрировать тирдаун сразу после определения фикстуры и далее уже писать сетап фикстуры. Если в такой ситуации использовать yield, то выполнение программы до yield может даже не дойти, а часть данных может уже создаться, поэтому при падении в сетап секции данные не почистятся, а в случае с addfinalizer эти данные буду очищены.</li><li>В addfinalizer сложнее управлять областью видимости переменных.</li></ol><p><br></p>",
        "time": 15,
        "title": " Использование teardown в фикстурах."
    },
    {
        "ID": 1956,
        "additional": "<p><em style=\"color: rgb(51, 51, 51);\">Какие подходы можно использовать для снижения цикломатической сложности?</em></p><p><br></p><ul><li><strong><em>ответ:</em></strong></li><li>Разбиение сложных функций на несколько более мелких функций с целью уменьшения количества условных конструкций и циклов в каждой из них.</li><li>Применение раннего выхода из функций или методов, чтобы избежать глубокой вложенности условных операторов.</li><li>Использование более понятных и простых алгоритмов, где это возможно.</li><li>Внимательное проектирование кода с целью уменьшения избыточных проверок и излишних циклов.</li><li>Регулярный рефакторинг кода для улучшения его структуры и снижения сложности.</li></ul><p><br></p><p><br></p><p><em style=\"color: rgb(51, 51, 51);\">Задача. Вычислите цикломатическую сложность следующей функции:</em></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">python\ndef calculate_grade(score):\n    if score &gt;= 90:\n        grade = 'A'elif score &gt;= 80:\n        grade = 'B'elif score &gt;= 70:\n        grade = 'C'else:\n        grade = 'D'return grade\n</pre><p><br></p><p><strong style=\"color: rgb(23, 43, 77);\"><em>ответ:</em></strong></p><p><span style=\"color: rgb(23, 43, 77);\">E = 4 (4 условных ветвления)</span></p><p><span style=\"color: rgb(23, 43, 77);\">N = 4 (4 базовых блока)</span></p><p><span style=\"color: rgb(23, 43, 77);\">P = 1 (1 компонент связности)</span></p><p><span style=\"color: rgb(23, 43, 77);\">M = E - N + 2P = 4 - 4 + 2*1 = 2</span></p>",
        "answers": [
            {
                "content": "<ul><li>Увеличение сложности понимания кода, что делает его менее читаемым и поддерживаемым.</li><li>Увеличение количества возможных путей выполнения, усложняющее тестирование и повышающее вероятность ошибок.</li><li>Снижение производительности программы из-за избыточных условных проверок и циклов.</li><li>Увеличение вероятности наличия скрытых ошибок и проблем в коде.</li></ul><p><br></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T09:10:21Z",
        "interviewCount": 6,
        "question": "<p><span style=\"color: rgb(51, 51, 51);\">Какие проблемы могут возникнуть при высокой цикломатической сложности кода?</span></p>",
        "time": 8,
        "title": "Цикломатическая сложность"
    },
    {
        "ID": 1955,
        "additional": "<p><em style=\"color: rgb(51, 51, 51);\">Как вычисляется цикломатическая сложность функции или метода?</em></p><p><strong style=\"color: rgb(23, 43, 77);\"><em>ответ:</em></strong></p><p><span style=\"color: rgb(23, 43, 77);\">Цикломатическая сложность может быть вычислена по формуле М = E - N + 2P, где:</span></p><p><span style=\"color: rgb(23, 43, 77);\">М - цикломатическая сложность</span></p><p><span style=\"color: rgb(23, 43, 77);\">E - количество ребер в графе потока управления (количество переходов между узлами в коде)</span></p><p><span style=\"color: rgb(23, 43, 77);\">N - количество узлов в графе потока управления (количество базовых блоков кода)</span></p><p><span style=\"color: rgb(23, 43, 77);\">P - количество компонент связности (независимых путей) в графе потока управления</span></p><p><br></p><p><br></p><p><em style=\"color: rgb(51, 51, 51);\">Какие значения цикломатической сложности указывают на более сложный код, а какие на менее сложный?</em></p><p><br></p><ul><li><strong><em>﻿ответ:</em></strong></li><li>Обычно, чем выше значение цикломатической сложности, тем более сложным считается код. Ниже приведены общие интерпретации значений:</li><li>Значение цикломатической сложности равное 1 означает отсутствие условных конструкций и циклов - самый простой код.</li><li>Значения в диапазоне 2-5 говорят о низкой до умеренной сложности кода.</li><li>Значения в диапазоне 6-10 указывают на код средней сложности.</li><li>Значения выше 10 считаются высокой сложностью и сигнализируют о том, что код, возможно, нуждается в упрощении и рефакторинге</li></ul>",
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Цикломатическая сложность - это метрика программного кода, используемая для количественной оценки сложности кода. Она позволяет определить количество линейно независимых путей выполнения в программе, что дает представление о количестве тестовых случаев, необходимых для полного покрытия кода. Основная цель цикломатической сложности заключается в выявлении сложных и малочитаемых участков кода, что может помочь улучшить качество программы и облегчить её тестирование.</span></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T09:07:28Z",
        "interviewCount": 32,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Что такое цикломатическая сложность и какова её основная цель?</span></p>",
        "time": 7,
        "title": "Цикломатическая сложность"
    },
    {
        "ID": 1954,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">import pytest\nimport requests\n\n\n@pytest.fixture(scope='session')\ndef uuid_response():\n    response = requests.get('https://httpbin.org/uuid')\n    assert response.ok, 'GET /uuid failed'\n    return response.json()['uuid']\n\ndef test_post_anything(uuid_response):\n    response = requests.post(url='https://httpbin.org/anything',\n                             json={'uuid': uuid_response})\n    assert response.ok, 'POST /anything failed'\n    assert response.json()['json']['uuid'] == uuid_response, 'response not equal request'\n\ndef test_get_anything(uuid_response):\n    response = requests.get(url='https://httpbin.org/anything',\n                            params={'uuid': uuid_response})\n    assert response.ok, 'GET /anything failed'\n    assert response.json()['args']['uuid'] == uuid_response, 'response not equal request'\n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T09:05:01Z",
        "interviewCount": 220,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Во фрагменте кода представлен шаблон теста. </span></p><p>Необходимо добавить логику фикстуры и тестов в соответствии с описанием в докстрингах.</p><pre class=\"ql-syntax\" spellcheck=\"false\">@pytest.fixture\ndef uuid_from_response():\n    \"\"\"\n    вызывает GET \"https://httpbin.org/uuid\n    возвращает uuid из ответа\n    запускается один раз за прогон\n    \"\"\"\n    pass\n\ndef test_post_anything():\n    \"\"\"\n    вызывает POST https://httpbin.org/anything c json телом запроса {\"uuid\": &lt;uuid из фикстуры&gt;}\n    проверяет, что код ответа успешный\n    проверяет, что в теле ответа поле json соответствует отправленному телу запроса\n    \"\"\"\n    pass\n\ndef test_get_anything():\n    \"\"\"\n    вызывает GET https://httpbin.org/anything c параметром uuid=&lt;uuid из фикстуры&gt;\n    проверяет, что код ответа успешный\n    проверяет, что в теле ответа поле args соответствует отправленному параметру в формате {'param_name': param_value}\n    \"\"\"\n    pass\n</pre><p><br></p><p><br></p><p><br></p>",
        "time": 15,
        "title": "Реализация логики фикстур"
    },
    {
        "ID": 1953,
        "additional": "<p><span style=\"color: rgb(23, 43, 77);\">Какой scoup по дефолту стоит?</span></p><p><strong>Ответ:</strong></p><p>function</p>",
        "answers": [
            {
                "content": "<p>1) Фикстура — это ресурс или объект, который можно рассматривать как набор условий или предопределенное состояние, необходимое тесту для правильного выполнения, зачастую фикстуры создаются, чтобы генерировать какие-то данные еще до теста и возвращать их для использования в тесте или перед тестом.</p><p>2) Да, может. </p><p>3) <strong>yield</strong> используется если есть постусловие (teardown) после выполнения теста.</p><p><strong>return</strong> используется в случае, когда постусловия выполнения теста нет.</p><p>4) Область видимости фикстур указывается параметром scope. Области видимости бывают:</p><ul><li>(scope=”function”) один раз для каждой функции теста</li><li>(scope=”class”) Выполняется один раз для каждого тестового класса, независимо от количества тестовых методов в классе.</li><li>(scope='module') Выполняется один раз для каждого модуля, независимо от того, сколько тестовых функций или методов или других фикстур при использовании модуля.</li><li>(scope='session') Выполняется один раз за сеанс. Все методы и функции тестирования, использующие фикстуру области сеанса, используют один вызов setup и teardown.</li></ul><p>&nbsp;</p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T09:00:06Z",
        "interviewCount": 78,
        "question": "<p>Ответить на теоретические вопросы:</p><p>1) Что такое фикстура и зачем она нужна?</p><p>2) Может ли фикстура использоваться другими фикстурами?</p><p>3) В каких случаях желательно использовать yield и return?</p><p>4) Какие бывают области видимости фикстур и каким параметром он указывается?</p>",
        "time": 5,
        "title": "Теоретические знания по фикстурам"
    },
    {
        "ID": 1952,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">def <span class=\"hljs-title function_\">divider</span><span class=\"hljs-params\">(a, b)</span>:\n&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span> b <span class=\"hljs-title function_\">and</span> <span class=\"hljs-params\">(a / b)</span> ** <span class=\"hljs-number\">3</span> or <span class=\"hljs-string\">'Нули в знаменателе не приветствуются'</span>\n</pre><p>Проверка данной функции:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-meta prompt_\">&gt;</span>&gt;&gt; <span class=\"hljs-built_in\">print</span>(divider(10, 4))\n15.625\n\n&gt;&gt;&gt; print(divider(10, 0))\nНули в знаменателе не приветствуются\n\n\n&gt;&gt;&gt; print(divider(-12.2, 2))\n-226.98099999999997\n\n\n&gt;&gt;&gt; print(divider(-6.4, 0))\nНули в знаменателе не приветствуются{code}\n</pre><p><br></p><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:56:44Z",
        "question": "<p>Напишите функцию <strong>divider(a: int, b: int)</strong>, принимающую 2 числовых параметра.&nbsp;</p><p>Задача функции: разделить a на b (где a-числитель, b-знаменатель) и возвести в куб.</p><p>Если в b (знаменателе) будет ноль, нужно вернуть: «Нули в знаменателе не приветствуются».&nbsp;</p><p>Решите задание без использования условия if, применяя свойства логических операторов.</p>",
        "time": 10,
        "title": "Использование логических операторов и сравнения при написании кода"
    },
    {
        "ID": 1951,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">True\n</pre>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:53:00Z",
        "interviewCount": 5,
        "question": "<p>Представьте результат выражения:</p><pre class=\"ql-syntax\" spellcheck=\"false\">not 2 and 2 &lt; 5 or set(([1, 2, 3])) &amp; set(([2])) and {1} - {2} == {1}\n</pre>",
        "time": 4,
        "title": "Логические операторы"
    },
    {
        "ID": 1950,
        "additional": "<ol><li>Можно ли получить доступ к приватному атрибуту из вне класса? Если да, то как? Напиши пример.&nbsp;</li></ol><p><strong><em>ответ:</em></strong></p><ol><li>Да.</li><li>Для доступа&nbsp;к приватному атрибуту используются префиксное подчеркивание и имя класса. Пример&nbsp;</li></ol><pre class=\"ql-syntax\" spellcheck=\"false\">class MyClass:\n&nbsp; &nbsp; def __init__(self):\n&nbsp; &nbsp; &nbsp; &nbsp; self.__private_attribute = \"Private\"\n\nobj = MyClass()\nprint(obj._MyClass__private_attribute) &nbsp;# Выводит \"Private\"\n</pre>",
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Модификаторы доступа в Python определяют уровень доступности атрибутов и методов класса. Они позволяют контролировать, какие части программы имеют доступ к определенным атрибутам и методам, обеспечивая инкапсуляцию и безопасность кода.</span></p><p><span style=\"color: rgb(23, 43, 77);\">Модификаторы бывают:</span></p><p><strong style=\"color: rgb(23, 43, 77);\">private</strong><span style=\"color: rgb(23, 43, 77);\">&nbsp;- Приватные атрибуты и методы объявляются с использованием двойного подчеркивания __ в начале именования, например, {</span><em style=\"color: rgb(23, 43, 77);\">}private_attribute</em><span style=\"color: rgb(23, 43, 77);\">.</span></p><p><strong style=\"color: rgb(23, 43, 77);\">protected</strong><span style=\"color: rgb(23, 43, 77);\">&nbsp;- Защищенные атрибуты и методы объявляются с использованием одного подчеркивания _ в начале именования, например,&nbsp;</span><em style=\"color: rgb(23, 43, 77);\">{</em><span style=\"color: rgb(23, 43, 77);\">}protected_attribute{_}.</span></p><p><strong style=\"color: rgb(23, 43, 77);\">public</strong><span style=\"color: rgb(23, 43, 77);\">&nbsp;- Публичные атрибуты и методы не имеют явного модификатора доступа и объявляются без использования подчеркиваний, например,&nbsp;</span><em style=\"color: rgb(23, 43, 77);\">public_attribute</em><span style=\"color: rgb(23, 43, 77);\">&nbsp;или&nbsp;</span><em style=\"color: rgb(23, 43, 77);\">public_method</em><span style=\"color: rgb(23, 43, 77);\">.</span></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:48:30Z",
        "interviewCount": 13,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Что такое модификаторы доступа в Python и зачем они нужны и какие бывают?</span></p>",
        "time": 6,
        "title": "Понимание модификаторов доступа в Python и как их применять"
    },
    {
        "ID": 1949,
        "additional": "<p><span style=\"color: rgb(23, 43, 77);\">Какие типы паттернов проектирования ООП можете перечислить?</span></p><p><strong style=\"color: rgb(23, 43, 77);\"><em><span class=\"ql-cursor\">﻿</span>ответ:</em></strong></p><p><span style=\"color: rgb(23, 43, 77);\">Ожидается, что назовет несколько: Порождающего типа, Структурного типа, Поведенческого типа</span></p>",
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Ожидается, что назовет несколько, например: сингелтон, билдер, стратегия strategy, адаптер adapter, декоратор decorator, фабрика factory method, фасад facade, цепочка обязанностей chain of responsibility, посредник mediator, наблюдатель observer</span></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:45:34Z",
        "interviewCount": 69,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Какие паттерны проектирования ООП знаете/можете назвать?</span></p>",
        "time": 3,
        "title": "Знает основные паттерны ООП"
    },
    {
        "ID": 1948,
        "answers": [
            {
                "content": "<p>пример кода на 3 вопрос:</p><pre class=\"ql-syntax\" spellcheck=\"false\">import multiprocessing\n\ndef calculate_square_sum(n):\n    square_sum = 0\n    for i in range(1, n + 1):\n        square_sum += i ** 2\n    return square_sum\n\nif __name__ == '__main__':\n    n = int(input(\"Введите значение N: \"))\n\n    # Создаем пул процессов\n    pool = multiprocessing.Pool()\n\n    # Распределяем задачи между процессами\n    results = pool.map(calculate_square_sum, [n])\n\n    # Закрываем пул процессов\n    pool.close()\n    pool.join()\n\n    # Выводим результат\n    print(\"Сумма квадратов чисел от 1 до\", n, \":\", results[0]) \n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:44:06Z",
        "interviewCount": 30,
        "question": "<ol><li>Расскажите о проектах/задачах в которых вы использовали многопоточность или многопроцессорность? Какие проблемы помогли решить модули multiprocessing и threading.</li><li>С каким проблемами/сложностями вы сталкивались при работе с многопоточностью или многопроцессорностью и как решали эти проблемы?&nbsp;</li><li>Напишите программу, используя модуль multiprocessing, которая рассчитывает сумму квадратов чисел от 1 до N, где N - целое.</li></ol>",
        "time": 10,
        "title": "Опыт работы с модулями multiprocessing, threading"
    },
    {
        "ID": 1947,
        "answers": [
            {
                "content": "<p><strong style=\"color: rgb(23, 43, 77);\">\"Фабрика\" (Factory pattern)</strong></p><ol><li>Кандидат должен распознать паттерн проектирования \"Фабрика\" (Factory pattern) как подходящее решение для данной проблемы. Он должен объяснить, что данный паттерн позволяет абстрагировать процесс создания объектов и делегировать его наследникам фабричного класса. Выбор паттерна обусловлен необходимостью создания различных типов заказов с уникальными свойствами и специальной логикой.</li><li>Кандидат должен предложить реализацию паттерна \"Фабрика\" в контексте создания заказов. Например, можно создать абстрактный класс \"Order\" с методом \"process_order\", который будет реализован в наследниках, представляющих конкретные типы заказов (например, \"RegularOrder\", \"WholesaleOrder\", \"ScheduledOrder\"). Кроме того, можно создать фабричный класс \"OrderFactory\", у которого будет метод \"create_order\" для создания нужного типа заказа в зависимости от переданных параметров.</li><li>Кандидат должен объяснить, что использование паттерна \"Фабрика\" позволяет облегчить создание различных типов заказов в будущем. При необходимости добавления новых типов заказов, достаточно создать новый класс, наследующийся от абстрактного класса \"Order\" и реализовать соответствующую логику. Фабричный класс \"OrderFactory\" не требует изменений, так как он работает с абстрактными типами заказов и создает их на основе переданных параметров. Это позволяет легко добавлять новые типы заказов без внесения изменений в существующий код и облегчает поддержку системы</li></ol>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:39:01Z",
        "interviewCount": 2,
        "question": "<p>Вы разрабатываете систему управления заказами в интернет-магазине. Вам требуется реализовать механизм создания различных типов заказов: обычных заказов, оптовых заказов и заказов с доставкой на определенную дату. Каждый тип заказа имеет свои уникальные свойства и требует специальной логики для создания.</p><p><strong><em>Задание:</em></strong></p><p>Объясните, какой паттерн проектирования можно использовать для решения данной проблемы и почему выбор пал на него.</p><p>Продемонстрируйте пример реализации этого паттерна в контексте создания заказов.</p><p>Объясните преимущества использования выбранного паттерна и как он облегчает создание различных типов заказов в будущем.</p>",
        "time": 10,
        "title": "Понимание где и какие стоит применять паттерны проектирования (Factory pattern)"
    },
    {
        "ID": 1946,
        "answers": [
            {
                "content": "<p><strong>\"Наблюдатель\" (Observer pattern)</strong></p><ol><li>Кандидат должен понять, что речь о паттерне проектирования \"Наблюдатель\" (Observer pattern) как подходящее решение для данной проблемы. Он должен объяснить, что данный паттерн позволяет установить однонаправленную связь между наблюдателями (компоненты интерфейса) и субъектом (активность продавцов). Выбор паттерна обусловлен необходимостью мгновенного обновления информации о действиях пользователей на различных компонентах интерфейса приложения.</li><li>Кандидат должен предложить реализацию паттерна \"Наблюдатель\" в контексте отслеживания активности пользователей. Например, можно создать класс \"Observer\" с методами \"update\", который будет представлять интерфейс для всех наблюдателей и реализован компонентами интерфейса (наблюдателями), и класс \"UserActivity\" (субъект), который будет содержать список наблюдателей и методы для добавления/удаления наблюдателей и оповещения их об активности продавцов.</li><li>Кандидат должен объяснить, что использование паттерна \"Наблюдатель\" позволяет облегчить отслеживание активности продавцов в будущем. При добавлении новых компонентов интерфейса, требующих отображения активности продавцов, необходимо просто добавить их в список наблюдателей субъекта.</li></ol>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:37:15Z",
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Вы разрабатываете приложение интернет магазина и столкнулись с задачей отслеживания активности продавцов. Вам необходимо обновлять информацию о действиях продавцов (например, публикации нового товара, изменения цены, изменения количества товара) в режиме реального времени на различных компонентах интерфейса приложения.</span></p><p><strong style=\"color: rgb(23, 43, 77);\"><em>Задание:</em></strong></p><p><span style=\"color: rgb(23, 43, 77);\">Объясните, какой паттерн проектирования можно использовать для решения данной проблемы и почему выбор пал на него. Продемонстрируйте пример реализации этого паттерна в контексте отслеживания активности продавцов(пользователей). Объясните преимущества использования выбранного паттерна и как он облегчает отслеживание активности продавцов в будущем.</span></p>",
        "time": 10,
        "title": "Понимание где и какие стоит применять паттерны проектирования (Observer pattern)"
    },
    {
        "ID": 1945,
        "answers": [
            {
                "content": "<p><strong style=\"color: rgb(23, 43, 77);\">\"Singleton pattern\"</strong></p><ol><li><span style=\"color: rgb(23, 43, 77);\">Кандидат должен предложить реализацию паттерна \"Singleton\" в контексте журнала активности. </span></li><li><span style=\"color: rgb(23, 43, 77);\">Кандидат должен объяснить, что использование паттерна&nbsp;\"Singleton\" обеспечивает гарантию единственности экземпляра журнала активности в системе.</span></li></ol>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:34:54Z",
        "interviewCount": 11,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Вы разрабатываете систему управления журналом активности пользователей в веб-приложении. Вам требуется реализовать механизм записи активности пользователей в журнал и обеспечить доступ к этому журналу из разных частей системы. Однако, вы хотите, чтобы в системе существовал только один экземпляр журнала активности, чтобы избежать несогласованности данных.</span></p><p><strong style=\"color: rgb(23, 43, 77);\"><em>Задание:</em></strong></p><p><span style=\"color: rgb(23, 43, 77);\">Объясните, какой паттерн проектирования можно использовать для решения данной проблемы и почему выбор пал на него.</span></p><p><span style=\"color: rgb(23, 43, 77);\">Продемонстрируйте пример реализации этого паттерна в контексте журнала активности.</span></p><p><span style=\"color: rgb(23, 43, 77);\">Объясните преимущества использования выбранного паттерна и как он обеспечивает гарантию единственности экземпляра журнала активности в системе</span></p>",
        "time": 10,
        "title": "Понимание где и какие стоит применять паттерны проектирования(\"Singleton pattern\")"
    },
    {
        "ID": 1944,
        "answers": [
            {
                "content": "<p><strong style=\"color: rgb(23, 43, 77);\">\"Декоратор\" (Decorator pattern)</strong></p><ol><li><span style=\"color: rgb(23, 43, 77);\">Кандидат должен предложить реализацию паттерна \"Декоратор\" в контексте обработки и отображения данных в различных форматах.</span></li><li><span style=\"color: rgb(23, 43, 77);\">Кандидат должен объяснить, что использование паттерна \"Декоратор\" позволяет добавлять новый функционал к объектам динамически. В данном случае, новые форматы данных или дополнительные операции могут быть добавлены путем создания новых декораторов, которые оборачивают базовый объект</span></li></ol>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:34:08Z",
        "interviewCount": 6,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Вы разрабатываете систему для обработки и отображения данных в различных форматах (например, текстовом, XML, JSON).&nbsp;</span></p><p><span style=\"color: rgb(23, 43, 77);\">Ваша задача состоит в добавлении дополнительного функционала к основному объекту, который позволяет изменять или расширять&nbsp;</span></p><p><span style=\"color: rgb(23, 43, 77);\">его поведение без необходимости изменения существующего кода.</span></p><p><strong style=\"color: rgb(23, 43, 77);\"><em>Задание:</em></strong></p><p><span style=\"color: rgb(23, 43, 77);\">Объясните, какой паттерн проектирования можно использовать для решения данной проблемы и почему выбор пал на него.Продемонстрируйте пример реализации этого паттерна в контексте обработки и отображения данных в различных форматах.Объясните преимущества использования выбранного паттерна и как он облегчает добавление нового функционала в будущем.</span></p>",
        "time": 10,
        "title": "Понимание где и какие стоит применять паттерны проектирования(Decorator pattern)"
    },
    {
        "ID": 1943,
        "additional": "<p>Доп вопрос:</p><p><em style=\"color: rgb(23, 43, 77);\">Как решаются проблемы GIL с CPU-bout операциями в многопоточных программах?</em></p><p><span style=\"color: rgb(23, 43, 77);\">ответ:</span></p><p><span style=\"color: rgb(23, 43, 77);\">Использовать процессы вместо потоков multiprocessing. Использование библиотек Numba, NumPy или SciPy.</span></p>",
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">В данном случае многопоточная реализация не даст прироста к производительности</span></p>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:26:37Z",
        "interviewCount": 95,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">1. Есть 2 реализации, в один поток и многопоточная(изображения ниже). Какой прирост производительности мы получим при многопоточном запуске? (показать 2 картинки с реализацией</span>, или приведённые нижу куски кода<span style=\"color: rgb(23, 43, 77);\">)</span></p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">from threading import Thread\n\nCOUNT = 50000000\n\n\ndef countdown(n):\n    while n &gt; 0:\n        n -= 1\n\n\ncountdown(COUNT) \n</pre><p><br></p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">from threading import Thread\n\nCOUNT = 50000000\n\n\ndef countdown(n):\n    while n &gt; 0:\n        n -= 1\n\n\nt1 = Thread(target=countdown, args=(COUNT // 2,))\nt2 = Thread(target=countdown, args=(COUNT // 2,))\n\nt1.start()\nt2.start()\nt1.join()\nt2.join() \n</pre><p><br></p><p><br></p><p><img src=\"https://jit.o3.ru/secure/attachment/2143593/2143593_image-2023-05-11-10-53-07-173.png\"></p><p><img src=\"https://jit.o3.ru/secure/attachment/2143598/2143598_image-2023-05-11-10-53-42-076.png\"></p>",
        "time": 2,
        "title": "Понимание GIL"
    },
    {
        "ID": 1942,
        "answers": [
            {
                "content": "<p><strong style=\"color: rgb(23, 43, 77);\">1.ответ на первый вопросы:</strong></p><p>\t<span style=\"color: rgb(23, 43, 77);\">Global Interpreter Lock (Глобальная блокировка интерпретатора) его </span>\t\t\t<span style=\"color: rgb(23, 43, 77);\">задача состоит в том, чтобы сделать интерпретатор CPython </span>\t<span style=\"color: rgb(23, 43, 77);\">потокобезопасным.</span></p><p>\t<span style=\"color: rgb(23, 43, 77);\">GIL позволяет только одному потоку ОС выполнять байт-код Python в любой момент времени. Следствием этого является невозможность&nbsp;ускорить выполнение кода Python с интенсивным использованием процессора путем распределения работы между несколькими потоками.</span></p><p><strong style=\"color: rgb(23, 43, 77);\">2.ответ на первый вопросы:</strong></p><p><span style=\"color: rgb(23, 43, 77);\"><span class=\"ql-cursor\">﻿</span>GIL не сильно влияет на производительность I/O-операций в многопоточных программах, т. к. в процессе ожидания от I/O блокировка распространяется по потокам. Когда Python вызывает любую операционную систему, прием передачу данных, чтение запись файла и т.д. он для потока который вызвал функцию отключает GIL, после получения ответа GIL возвращается. Однако программа, потоки которой будут работать исключительно с процессором (например обработка изображения по частям), из-за блокировки не только станет однопоточной, но и на её выполнение будет затрачиваться больше времени, чем если бы она изначально была строго однопоточной.</span></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:23:44Z",
        "interviewCount": 115,
        "question": "<ol><li><span style=\"color: rgb(23, 43, 77);\">Что такое GIL? Зачем он нужен?</span></li><li><span style=\"color: rgb(23, 43, 77);\"><span class=\"ql-cursor\">﻿</span>В чем разница влияния GIL на I/O-bout и CPU-bound операции?</span></li></ol>",
        "time": 2,
        "title": "GIL и зачем он нужен"
    },
    {
        "ID": 1941,
        "answers": [
            {
                "content": "<p>Кандидат назовет несколько:</p><p>Импорты</p><p>Константы</p><p>Нейминги</p><p>Пробелы </p><p>Длина строки</p><p>Отступы</p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:20:13Z",
        "interviewCount": 18,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Есть кусок скрипта(картинка ниже). Есть ли какие-то несоответствия с PEP8 ?</span></p><p><img src=\"https://jit.o3.ru/secure/attachment/2143437/2143437_image-2023-05-11-10-38-56-502.png\"></p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">import requests, os, datetime\nimport sys, MyPackage\nfrom wath import *\n\nConst1 = 3\nCONST2 = 4\na = 25\nb = \"John\"\n\n\n\ndef numbersSum(nums):\n    return sum(nums)\nx=2+3\ny = ( 1 + 2 ) * 3\nstring = \"This is a very long story, consisting of a large number of symbols, words. They are written in one line, although they do not fit in length.\"\nif a == 1:\n    print(\"x is 1\") \n</pre>",
        "time": 4,
        "title": "Несоответствия с PEP8"
    },
    {
        "ID": 1940,
        "answers": [
            {
                "content": "<p>Ожидаем что назовет линтеры c несколькими примерами:</p><ol><li>pylint&nbsp;</li><li>flake8</li><li>PyCharm&nbsp;</li></ol><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:14:20Z",
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Какие инструменты помогают следовать стандартам PEP8?</span></p>",
        "time": 3,
        "title": "Инструменты для PEP8?"
    },
    {
        "ID": 1939,
        "answers": [
            {
                "content": "<ol><li><strong>Отступы</strong>&nbsp;(использовать 4 пробела на каждом уровне отступов)</li><li>Пробелы - самый предпочтительный&nbsp;<strong>метод отступов</strong>.</li><li>Ограничьте&nbsp;<strong>длину строки</strong>&nbsp;максимум 79 символами. Для более длинных блоков текста с меньшими структурными ограничениями (строки документации или комментарии), длину строки следует ограничить 72 символами.</li><li><strong>Пустые строки.</strong>&nbsp;Отделяйте функции верхнего уровня и определения классов двумя пустыми строками.Определения методов внутри класса разделяются одной пустой строкой.</li><li><strong>Именование</strong></li><li><strong>Импорты</strong>&nbsp;Импортируйте модули в алфавитном порядке, разделяйте группы импортов пустой строкой и избегайте использования символа *.</li><li><strong>Пробелы вокруг операторов.</strong>&nbsp;Используйте пробелы вокруг операторов (=, +, -, *, /, //, %, и т. д.), но не используйте пробелы вокруг символа индексирования или среза.</li><li><strong>Названия функций и методов.</strong>&nbsp;Используйте глаголы в названиях функций и методов, используйте нижнее подчеркивание для разделения слов..</li></ol><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:09:31Z",
        "interviewCount": 14,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Какие основные правила </span>PEP8<span style=\"color: rgb(23, 43, 77);\">, можете перечислить?</span></p>",
        "time": 2,
        "title": "Основные правила PEP8"
    },
    {
        "ID": 1938,
        "answers": [
            {
                "content": "<ol><li>PEP8 — это руководство по стилю кода для языка программирования Python.Он описывает рекомендации и правила для написания читаемого, понятного и консистентного кода на Python.</li><li>Причин соблюдать:</li><li class=\"ql-indent-1\">Код читается гораздо чаще, чем пишется</li><li class=\"ql-indent-1\">PEP8 помогает сделать код более читаемым и понятным для других программистов, которые могут работать с вашим кодом.</li><li class=\"ql-indent-1\">соблюдение стандартов PEP8 может помочь сделать код более консистентным</li><li class=\"ql-indent-1\">соблюдение стандартов PEP8 может помочь обнаружить ошибки и потенциальные проблемы в коде.</li><li class=\"ql-indent-1\">другими словами&nbsp;PEP8 помогает сделать код более читаемым, консистентным и устойчивым к ошибкам.</li><li>Причины игнорировать:</li><li class=\"ql-indent-1\">Применение PEP 8 в проекте сделает код менее читабельным, даже для тех, кто привык читать код, который следует этому PEP.</li><li class=\"ql-indent-1\">Рассматриваемый код похож по стилю с ранее написанным кодом, который также нарушает PEP 8 (возможно, по историческим причинам) - хотя это возможность привести чужой код в порядок.</li><li class=\"ql-indent-1\">Рассматриваемый код предшествует введению стандартов PEP8, и нет никаких других причин для изменения этого кода.</li><li class=\"ql-indent-1\">Когда код может остаться совместимым со старыми версиями Python, который не поддерживает функции, рекомендованную в PEP.</li></ol><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:07:09Z",
        "interviewCount": 25,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Что такое PEP8? Причины использования? Какие могут быть причины игнорирования PEP8?</span></p>",
        "time": 3,
        "title": "Что PEP8?"
    },
    {
        "ID": 1875,
        "answers": [
            {
                "content": "<p>Для решения задачи необходимо в классе Car реализовать методы _<em>hash</em>_ и _<em>eq</em>_</p><pre class=\"ql-syntax\" spellcheck=\"false\">class Car:\n    def __init__(self, name: str):\n        self.name = name    \n\n    def __hash__(self) -&gt; int:\n        return hash((self.name, self.__class__))\n\n    def __eq__(self, other) -&gt; bool:\n        if not isinstance(other, self.__class__):\n            return False\n        return self.name == other.name\n\n    def __repr__(self) -&gt; str:\n        return f'Car(\"{self.name}\")'\n\ncars = {Car(\"BMW\"), Car(\"Nissan\"), Car(\"BMW\")}\nprint(cars)\n</pre><p><br></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-10T11:44:58Z",
        "interviewCount": 32,
        "question": "<p>Есть множество cars, которое содержит объекты автомобильных марок. Внесите корректировки в код так, чтобы это множество содержала только уникальные объекты автомобильных марок.</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> Car:\n    def __init__(<span class=\"hljs-keyword\">self</span>, name: str):\n        <span class=\"hljs-keyword\">self</span>.name = name\n\n    def __repr__(<span class=\"hljs-keyword\">self</span>) -&gt; str:\n        <span class=\"hljs-keyword\">return</span> f<span class=\"hljs-string\">'Car(\"{self.name}\")'</span>\n\ncars = {Car(<span class=\"hljs-string\">\"BMW\"</span>), Car(<span class=\"hljs-string\">\"Nissan\"</span>), Car(<span class=\"hljs-string\">\"BMW\"</span>)}\nprint(cars)\n</pre><p><br></p>",
        "time": 15,
        "title": "Задача по работе с set(множество)"
    },
    {
        "ID": 1874,
        "additional": "<p>Расскажите про коллизии в множествах?</p><p><strong>Ответ:</strong></p><p>Ключом условно может быть любая строка, любой длины и содержания. Но есть одно противоречие:</p><ul><li>Все возможные ключи — это бесконечное множество, а в качестве результата хеш-функция выдает строку фиксированной длины, то есть все выходные значения — это конечное множество.</li><li>Из этого следует, что не для всех входных данных найдется уникальный хеш и могут появиться дубли: под одним хешем будут лежать несколько разных значений. Такую ситуацию называют коллизией.</li><li>Простейший способ разрешения коллизий — это открытая адресация. Она предполагает последовательное перемещение по слотам хеш-таблицы в поисках первого свободного слота, куда значение будет записано.</li></ul><p><br></p>",
        "answers": [
            {
                "content": "<p>Множество – это математический объект, являющийся набором, совокупностью, собранием каких-либо объектов, которые называются элементами этого множества. Элементами множества могут быть только хешируемые (Hashable) объекты, так как внутренняя реализация set основана на хеш-таблица. Хеш-таблица позволяет организовать данные ассоциативного массива удобным для хранения способом. Для этого хеш-таблица использует индексированный массив и функцию для хеширования ключей. При этом хеш-таблица — это не просто способ размещать данные в памяти, она включает в себя логику. Любая операция внутри хеш-таблицы начинается с того, что ключ преобразуется в индекс обычного массива. Для получения индекса из ключа нужно выполнить два действия:</p><ul><li>Найти хеш, то есть хешировать ключ</li><li>Привести ключ к индексу — например, через остаток от деления</li></ul><p>Исходя из выше сказанного при добавление элемента в set происходит следующее:</p><ol><li>Интерпритатор хеширует значение. Результатом хеширования становится число.</li><li>Число, полученное на предыдущем шаге, преобразуется в индекс множества</li></ol><p><br></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-10T11:39:29Z",
        "interviewCount": 18,
        "question": "<p>Расскажите, как работает множество(set) и что может являться элементами этого множества?</p>",
        "time": 10,
        "title": "Алгоритм работы set(множества)"
    },
    {
        "ID": 1873,
        "additional": "<p><span style=\"color: rgb(23, 43, 77);\">Чем отличается .symmetric_difference()(^) от .symmetric_difference_update()(^=)</span></p><p><strong style=\"color: rgb(23, 43, 77);\">Ответ:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">.symmetric_difference()(^) - множество не меняется</span></p><p><span style=\"color: rgb(23, 43, 77);\">. symmetric_difference_update()(^=) - множество меняется</span></p>",
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">print(list(set(x) ^ set(y)))\nили\nprint(x.symmetric_difference(y)\n</pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-10T11:35:31Z",
        "interviewCount": 11,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Есть два множества x и y. Выведите симметрическую разность двух списков.</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">x = [ \"a\", \"b\", \"c\" ,\"f\"]\ny =&nbsp;[\"b\", \"c\", \"d\" ,\"g\"]\n</pre>",
        "time": 5,
        "title": "Симметрическая разность двух списков"
    },
    {
        "ID": 1872,
        "additional": "<p><span style=\"color: rgb(23, 43, 77);\">Чем отличается .intersection()(&amp;) от .intersection_update()(&amp;=)</span></p><p><strong style=\"color: rgb(23, 43, 77);\">Ответ:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">.intersection()(&amp;) - множество не меняется</span></p><p><span style=\"color: rgb(23, 43, 77);\">.intersection_update()(&amp;=) - множество меняется</span></p>",
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-built_in\">print</span>(list(<span class=\"hljs-keyword\">set</span>(x) <span class=\"hljs-operator\">&amp;</span> <span class=\"hljs-keyword\">set</span>(y)))\nили\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-keyword\">set</span>(x).intersection(y))\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-10T11:29:40Z",
        "interviewCount": 69,
        "question": "<p>Есть два множества x и y. Выведите пересечение двух списков.</p><p><br></p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">x = [\"a\", \"b\", \"c\" ,\"f\"]\ny = [\"b\", \"c\", \"d\" ,\"g\"]\n</pre>",
        "time": 5,
        "title": "Пересечение двух списков"
    },
    {
        "ID": 1871,
        "additional": "<p>Задача №1</p><p>Есть массив colors. Выведите список уникальных цветов</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attribute\">colors</span> = [<span class=\"hljs-string\">\"red\"</span>,  <span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"purple\"</span>, <span class=\"hljs-string\">\"purple\"</span>]\n</pre><p>Ответ:</p><pre class=\"ql-syntax\" spellcheck=\"false\">unique_colors <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">set</span>(color_list)\n<span class=\"hljs-built_in\">print</span>(unique_colors)\n</pre><p><br></p><p>Задача №2</p><p>Напишите результат вывода и объясните почему так.</p><pre class=\"ql-syntax\" spellcheck=\"false\">x <span class=\"hljs-operator\">=</span> { <span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span> , <span class=\"hljs-string\">\"c\"</span> } \nx.difference_update(<span class=\"hljs-string\">\"ab\"</span>)\n<span class=\"hljs-built_in\">print</span>(x)\n</pre><p>Ответ:</p><pre class=\"ql-syntax\" spellcheck=\"false\">{c}\n</pre><p><br></p><p>Задача №3:</p><p>Напишите результат вывода и объясните почему так.</p><pre class=\"ql-syntax\" spellcheck=\"false\">x<span class=\"hljs-operator\">=</span> { <span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span> , <span class=\"hljs-string\">\"c\"</span> } \nx.difference_update([<span class=\"hljs-string\">\"ab\"</span>])\n<span class=\"hljs-built_in\">print</span>(x)\n</pre><p>Ответ:</p><pre class=\"ql-syntax\" spellcheck=\"false\">{ <span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span> }\n</pre>",
        "answers": [
            {
                "content": "<p>Множество - это неупорядоченная коллекция уникальных элементов.</p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-10T11:26:14Z",
        "interviewCount": 25,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Расскажите что такое set(множество)?</span></p>",
        "time": 5,
        "title": "Set (множество)"
    },
    {
        "ID": 1870,
        "additional": "<p><span style=\"color: rgb(23, 43, 77);\">1. Что делает функция callable?</span></p><p><span style=\"color: rgb(23, 43, 77);\">Ответ: Проверяет, является ли объект вызываемым</span></p><p><span style=\"color: rgb(23, 43, 77);\">2. Что делают функции hasattr, getattr и setattr?</span></p><p><span style=\"color: rgb(23, 43, 77);\">Ответ: </span></p><p><span style=\"color: rgb(23, 43, 77);\">hasattr - Определите, есть ли этот метод или переменная в объекте</span></p><p><span style=\"color: rgb(23, 43, 77);\">getattr - Возвращает значение именованного атрибута объекта. Если он не найден, он возвращает значение по умолчанию, предоставленное функции.</span></p><p><span style=\"color: rgb(23, 43, 77);\">setattr - Добавляет переменную или метод в объект.</span></p>",
        "answers": [
            {
                "content": "<p>Рефлексия — это процесс, который позволяет программе изменять свою структуру и поведение во время выполнения. В Python вы можете использовать рефлексию, чтобы создавать и изменять объекты, вызывать методы и модифицировать классы. Зачастую это необходимо когда по разным причинам мы не можем определить, существует ли этот метод или переменная в объекте.</p>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-10T11:06:31Z",
        "interviewCount": 8,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Что такое рефлексия и зачем она нужна?</span></p>",
        "time": 10,
        "title": "Рефлексия"
    },
    {
        "ID": 1869,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">def fib_gen():\n    yield 0\n    a, b = 1, 1\n    while True:\n        yield b\n        a, b = b, a+b\n\ndef print_fib(count):\n  fib = fib_gen()\n  for i in range(count):\n      print(next(fib))\n      \nprint_fib(20)\n</pre><p><br></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-10T10:29:42Z",
        "interviewCount": 32,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Реализуйте функцию генератор чисел Фибоначчи и функцию котороя выводит указанное количество этих чисел(Рекурсию использовать нельзя).</span></p>",
        "time": 15,
        "title": "Написать функцию генератор"
    },
    {
        "ID": 1868,
        "additional": "<p>Q: <em style=\"color: rgb(127, 140, 141);\">Что вернет </em><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\"><em>next(gen)</em></code><em style=\"color: rgb(127, 140, 141);\">?</em></p><p>A: Следующий элемент в списке</p><p>Q: <em style=\"color: rgb(127, 140, 141);\">Что будет, когда элементы закончатся?</em></p><p>A: Вернется exception <code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">StopIteration</code></p><p>Q: <em style=\"color: rgb(127, 140, 141);\">А достать N-th элемент по индексу можно?</em></p><p>A: Нет</p>",
        "answers": [
            {
                "content": "<p>Это функция, ее можно приостановить и продолжить ее выполнение, внутри нее <code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">yield</code> вместо <code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">return</code>. Нужна она как lazy итератор, чтобы более эффективно использовать память. Использовать - для генерации бесконечных последовательностей, итерации по большим данным etc.</p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">def gen(n):\n&nbsp; &nbsp; for i in range(n):\n&nbsp; &nbsp; &nbsp; &nbsp; yield i\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\ndef print_number(n):\n&nbsp; &nbsp; result = gen(n)\n&nbsp; &nbsp; while True:\n&nbsp; &nbsp; &nbsp; &nbsp; try:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(next(result))\n&nbsp; &nbsp; &nbsp; &nbsp; except StopIteration:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break\n&nbsp; &nbsp;&nbsp;\nprint_number(10)</span>\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-10T10:23:25Z",
        "interviewCount": 350,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Что такое генератор? </span></p><p><span style=\"color: rgb(52, 73, 94);\">Какие задачи решает генератор?</span></p><p>Чем отличается от итератора?</p>",
        "time": 2,
        "title": "Генератор в python"
    },
    {
        "ID": 1867,
        "additional": "<p>Здача №1 </p><p>Есть список my_list =&nbsp;[1,2,3,4,5,6]. Выведите список в обратном порядке при помощи срезов.</p><p>Ответ: print(my_list[::-1])</p><p>Здача №2&nbsp;<strong>:</strong></p><p>Есть список my_list =&nbsp;[1,2,3,4,5,6]. Выведите список начиная с 4 элемента при помощи срезов.</p><p>Ответ: print(my_list[3:])</p><p>Здача №3</p><p>Напишите результат вывода:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attribute\">my_list</span> = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>][<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">5</span>:<span class=\"hljs-number\">2</span>]\nprint(my_list)\n</pre><p>Ответ:&nbsp;[2, 4]</p>",
        "answers": [
            {
                "content": "<p>Срез - это объект класса slice.</p><p>Срезом называется неко­торая подпос­ледователь­ность. Принцип действия срезов очень прост: мы \"отрезаем\" кусок от исходной последовательности элемента, не меняя её при этом.</p><p>Есть три формы срезов:</p><ul><li>Взятие одного элемента итерируемого объекта по индексу. То есть если S = ‘Hi’, то S[0]=='H'</li><li>Срез с двумя параметрами. Возвращает элементы итерируемого объекта начиная с элемента c индексом start, до элемента с индексом stop. То есть если my_list =&nbsp;[1, 2, 3, 4, 5], то my_list[0:2]&nbsp;==&nbsp;[1, 2]</li><li>Срез с тремя параметрами. Возвращает множество в которое будут входить индексы элементов выбранные по формуле:</li><li>(START, START + STEP, START + 2 * STEP, .., STOP) # STOP не входит в срез. То есть если my_list =&nbsp;[1, 2, 3, 4, 5], то my_list[0:4:2]&nbsp;==&nbsp;[1, 3]</li></ul><p><br></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-10T10:10:18Z",
        "interviewCount": 27,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Что такое срезы? Перечислите формы срезов?</span></p>",
        "time": 5,
        "title": "Работа со слайсами последовательностей "
    },
    {
        "ID": 1808,
        "additional": "<h2><span style=\"color: rgb(0, 0, 0); background-color: transparent;\">Вопросы для расширения</span></h2><ul><li><strong style=\"background-color: transparent;\">Как ускорить обход?</strong><span style=\"background-color: transparent;\"> Ожидаем услышать про многопоточность и/или асинхронность, про них можно задать пару вопросов вглубь.</span></li><li><strong style=\"background-color: transparent;\">Как найти урлы на странице? </strong><span style=\"background-color: transparent;\">Ожидаем услышать про регулярные выражения или парсеры HTML (аля beautifulSoup).</span></li><li><strong style=\"background-color: transparent;\">Как сосчитать слова на странице?</strong><span style=\"background-color: transparent;\"> Ожидаем услышать про регулярные выражения и накопление в словаре, с сильным кандидатом можно зацепить тему нормализации слов - стемминг, лемматизация.</span></li><li><strong style=\"background-color: transparent;\">Как обрабатывать сетевые ошибки? </strong><span style=\"background-color: transparent;\">Ожидаем услышать про try/except и ретраи, другой подход - это забрасывать урл обратно в очередь.</span></li></ul><p><br></p><p><br></p><p><br></p><h2><span style=\"color: rgb(0, 0, 0); background-color: transparent;\">Предварительные критерии оценки</span></h2><ul><li><span style=\"background-color: transparent;\">Удалось ли получить работающее решение?</span></li><li><span style=\"background-color: transparent;\">Насколько бегло кандидат пишет код?</span></li><li><span style=\"background-color: transparent;\">Читаемый ли получился код?</span></li></ul>",
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">def process_wiki(root_url: str, filename: str):\n&nbsp;&nbsp;&nbsp;words = Counter()\n&nbsp;&nbsp;&nbsp;pages_to_visit = deque([root_url])\n&nbsp;&nbsp;&nbsp;visited = set()\n\n&nbsp;&nbsp;&nbsp;while pages_to_visit:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url = pages_to_visit.pop_front()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if url in visited:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visited.add(url)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;page = requests.get(url).text\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pages_to_visit += get_urls(page)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;page_words = count_words_in_page(page)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;words.update(page_words)\n\n&nbsp;&nbsp;&nbsp;with open(filename, \"w\") as f:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for w, c in words.most_common(100):\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.write(f\"{c} {w}<br/>\")\n</pre>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-06-20T18:39:28Z",
        "interviewCount": 51,
        "question": "<p><span style=\"color: rgb(0, 0, 0); background-color: transparent;\">Необходимо написать обход википедии и собрать статистику по частотности слов, top-100 из них вывести в файл в порядке убывания.</span></p><p><br></p><p><br></p><h2><span style=\"background-color: transparent; color: rgb(0, 0, 0);\">Что проверяем</span></h2><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><strong style=\"background-color: transparent;\">Способность осознать задачу и придумать решение</strong><span style=\"background-color: transparent;\"> - хороший кандидат сразу определяет в задаче обход графа.</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><strong style=\"background-color: transparent;\">Степень автоматизма при написании кода</strong><span style=\"background-color: transparent;\"> -</span><strong style=\"background-color: transparent;\"> </strong><span style=\"background-color: transparent;\">это видно по неймингу, использованию готовых структур вместо самописных (Counter вместо dict для накопления статистики, Set[str] вместо Dict[str, bool]) и тому подобному.</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><strong style=\"background-color: transparent;\">Время написание задачи</strong><span style=\"background-color: transparent;\"> - у сильного кандидата задача занимает около 20 минут.</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><strong style=\"background-color: transparent;\">Понимание концепции асимптотический сложности</strong><span style=\"background-color: transparent;\"> - O(nlogn) для сортировки, O(1) для словаря и множества.</span></li></ol><p><br></p><p><br></p><p><br></p><p><br></p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-string\">\"\"\"</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">Программа считает Top 100 самых частотных слов русской Википедии и записывает результат своей работы в файл.</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">Для реализации в коде предлагается функция process_wiki.</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">Остальные функции для обсуждения голосом в случае, если осталось свободное время.</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">\"\"\"</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">def get_urls(page_source: str) -&gt; list[str]:</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    \"\"\"</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    Функция получает на вход HTML-код страницы Википедии и возвращает список URL, найденных на этой странице.</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">  </span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">      Пример результата:</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">      [</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">            \"https://ru.wikipedia.org/wiki/Кочерга\",</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">            \"https://ru.wikipedia.org/wiki/Фотоэмульсия\",</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">            \"https://ru.wikipedia.org/wiki/Стамбул (канал)\",</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    ]</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    Писать код в этой функции не нужно. Функция выступает чёрным ящиком.</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    \"\"\"</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">def count_words(page_source: str) -&gt; dict[str, int]:</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    \"\"\"</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    Функция получает на вход HTML-код страницы Википедии и возвращает словарь, содержащий пары слово -&gt; частотность на этой странице.</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    Слова возвращаются нормализованными.</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    Пример результата:</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    {\"мама\" : 20, \"рама\": 5, \"мыть\": 10}</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    Писать код в этой функции не нужно. Функция выступает чёрным ящиком.</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    \"\"\"</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">def process_wiki(root_url: str, filename: str):</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    \"\"\"</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    Функция считает Top 100 самых частотных слов на Википедии и записывает    результат в файл.</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    В этой функции мы обходим все страницы Википедии вплоть до самой последней.</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    На вход функции передаётся точка входа (URL для начала обработки) и имя файла для вывода результата.</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    В результате выполнения в файл запишется Top 100 самых частотных слов в следующем формате:</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    20 мама</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    10 мыть</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    5 рама</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    Эту функцию НЕОБХОДИМО реализовать в коде.</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    \"\"\"</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    # Начало реализации</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    ...</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    # Окончание реализации</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">if __name__ == \"__main__\":</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    process_wiki(\"http://ru.wikipedia.org\", \"out.txt\")</span></div></pre>",
        "time": 30,
        "title": "Обход wiki"
    },
    {
        "ID": 2781,
        "answers": [
            {
                "content": "<p><span style=\"background-color: rgba(63, 67, 80, 0.04); color: rgb(63, 67, 80);\">Данное решение задачи неэффективное с точки зрения сложности алгоритмов ( O(N^2)), но показывает что кандидат умеет работать с коллекциями и строковыми значениями в базовом его понятии</span></p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def</span> <span class=\"ql-token hljs-title\">func</span>(<span class=\"ql-token hljs-params\">s</span>):</div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-comment\">#Создаем словарь для подсчета символов в строке</span></div><div class=\"ql-code-block\" data-language=\"python\">    count = {}</div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-comment\">#Прогоняем строку на кол-во уникальных символов</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-keyword\">for</span> i <span class=\"ql-token hljs-keyword\">in</span> s:</div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-comment\">#Проверяем что символ есть в словаре (Если нет. то дефолтом ставится 1, если есть прибавляет к ключу +1)</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">if</span> i <span class=\"ql-token hljs-keyword\">in</span> count:</div><div class=\"ql-code-block\" data-language=\"python\">            count[i] += <span class=\"ql-token hljs-number\">1</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">else</span>:</div><div class=\"ql-code-block\" data-language=\"python\">            count[i] = <span class=\"ql-token hljs-number\">1</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-comment\">#Создаем строку для результата</span></div><div class=\"ql-code-block\" data-language=\"python\">    result_str = <span class=\"ql-token hljs-string\">''</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-comment\"># Прогоняем ту же строку уже для собрания результата</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-keyword\">for</span> i <span class=\"ql-token hljs-keyword\">in</span> s:</div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-comment\"># Проверяем что символ уникален и вставляем в строку (</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">if</span> count[i] == <span class=\"ql-token hljs-number\">1</span>:</div><div class=\"ql-code-block\" data-language=\"python\">            result_str += <span class=\"ql-token hljs-string\">'('</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-comment\">#Иначе символ не уникален и вставляем в строку )</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">else</span>:</div><div class=\"ql-code-block\" data-language=\"python\">            result_str += <span class=\"ql-token hljs-string\">')'</span></div><div class=\"ql-code-block\" data-language=\"python\">     <span class=\"ql-token hljs-comment\">#Выводим результат</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-built_in\">print</span> result_str</div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\">func(<span class=\"ql-token hljs-string\">\"sunny string chapter\"</span>)</div></pre>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p><span style=\"background-color: rgba(63, 67, 80, 0.04); color: rgb(63, 67, 80);\">Данное решение показывает, что кандидат отлично знает работу алгоритмов и работу с ЯП Python (Решение задачи реализовано по сложности O(n))</span></p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def</span> <span class=\"ql-token hljs-title\">func</span>(<span class=\"ql-token hljs-params\">s</span>):</div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-comment\">#Создаем пустой словарь для подсчета символов в строке</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-built_in\">dict</span>= {}</div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-comment\">#Непосредственно сам подсчет (Если символы не найдены методом get то делаем +1(Уникальный) если символы уже ранее встречались, то кол-во символов будет 1(которое вернется по дефолту вначале) +1 найденый</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-keyword\">for</span> i <span class=\"ql-token hljs-keyword\">in</span> <span class=\"ql-token hljs-built_in\">str</span>:</div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-built_in\">dict</span>[i] = <span class=\"ql-token hljs-built_in\">dict</span>.get(i, <span class=\"ql-token hljs-number\">0</span>) + <span class=\"ql-token hljs-number\">1</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-comment\">#Далее мы с помощью функции join к пустой строке присоединяем наш массив из символов ( и ) а определяем какой вставить с помощью условия за каждый найденый символ с помощью цикла for) и выводим в консоль результат</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-built_in\">print</span>(<span class=\"ql-token hljs-string\">\"\"</span>.join(<span class=\"ql-token hljs-string\">'('</span> <span class=\"ql-token hljs-keyword\">if</span> word_dict[i] == <span class=\"ql-token hljs-number\">1</span> <span class=\"ql-token hljs-keyword\">else</span> <span class=\"ql-token hljs-string\">')'</span> <span class=\"ql-token hljs-keyword\">for</span> i <span class=\"ql-token hljs-keyword\">in</span> word))</div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\">s = <span class=\"ql-token hljs-string\">\"sunny string chapter\"</span></div><div class=\"ql-code-block\" data-language=\"python\">func(s)</div></pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2024-12-23T15:47:25Z",
        "interviewCount": 1,
        "question": "<p><span style=\"background-color: rgba(63, 67, 80, 0.04); color: rgb(63, 67, 80);\">Дана строка \"sunny string chapter\" (Или любая другая на вкус и цвет, главное чтобы несколько слов было), Необходимо преобразовать ее в набор символов состоящих из ( - Если символ уникальный и ) - Если символ повторяется в строке</span></p><p><br></p><p><br></p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def</span> <span class=\"ql-token hljs-title\">func</span>(<span class=\"ql-token hljs-params\">s</span>):</div><div class=\"ql-code-block\" data-language=\"python\">    ...</div></pre>",
        "time": 20,
        "title": "Замена символов в строке"
    },
    {
        "ID": 2524,
        "answers": [
            {
                "content": "<pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">import requests</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">import json</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">from typing import Optional</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">import time </span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def log(text: str):</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-built_in\">print(text)</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def parse() -&gt; Optional[list]:</span></div><div class=\"ql-code-block\" data-language=\"python\">    url = <span class=\"ql-token hljs-string\">\"https://company.local/api/v1/devices\"</span></div><div class=\"ql-code-block\" data-language=\"python\">    response = requests.get(url)</div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-keyword\">if response.status_code == 200:</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">try:</span></div><div class=\"ql-code-block\" data-language=\"python\">            <span class=\"ql-token hljs-keyword\">return json.loads(response.text)</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">except json.DecodeError:</span></div><div class=\"ql-code-block\" data-language=\"python\">            log(<span class=\"ql-token hljs-string\">\"Ошибка парсинга\")</span></div><div class=\"ql-code-block\" data-language=\"python\">            <span class=\"ql-token hljs-keyword\">return None</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">except Exception as e:</span></div><div class=\"ql-code-block\" data-language=\"python\">            log(<span class=\"ql-token hljs-string\">f\"Неизвестная ошибка: {e}\")</span></div><div class=\"ql-code-block\" data-language=\"python\">            <span class=\"ql-token hljs-keyword\">return None</span></div><div class=\"ql-code-block\" data-language=\"python\">            </div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-keyword\">return None</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def save(data: list, path: str):</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-keyword\">with open(path, \"w\") as f:</span></div><div class=\"ql-code-block\" data-language=\"python\">        f.write(<span class=\"ql-token hljs-string\">\"device_name,interface_name\")</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">for device in data:</span></div><div class=\"ql-code-block\" data-language=\"python\">            <span class=\"ql-token hljs-keyword\">for interface in device[\"interfaces\"]:</span></div><div class=\"ql-code-block\" data-language=\"python\">                f.write(<span class=\"ql-token hljs-string\">f\"{device['name']},{interface['name']}\")</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def schedule(path: str):</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-keyword\">while True:</span></div><div class=\"ql-code-block\" data-language=\"python\">        data = parse()</div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">if data:</span></div><div class=\"ql-code-block\" data-language=\"python\">            save(data, path)</div><div class=\"ql-code-block\" data-language=\"python\">        time.sleep(<span class=\"ql-token hljs-number\">60)</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\">schedule(<span class=\"ql-token hljs-string\">\"dump.csv\")</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div></pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2024-07-18T11:22:12Z",
        "interviewCount": 40,
        "question": "<p>Страница <a href=\"https://company.local/api/v1/devices\" rel=\"noopener noreferrer\" target=\"_blank\"><a href=\"https://company.local/api/v1/devices\" rel=\"noopener noreferrer\" target=\"_blank\">https://company.local/api/v1/devices</a></a> возвращает список устройств в JSON формате:</p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"json\"><span class=\"ql-token hljs-punctuation\">[</span></div><div class=\"ql-code-block\" data-language=\"json\">    <span class=\"ql-token hljs-punctuation\">{</span></div><div class=\"ql-code-block\" data-language=\"json\">        <span class=\"ql-token hljs-attr\">\"id\":</span> 1<span class=\"ql-token hljs-punctuation\">,</span></div><div class=\"ql-code-block\" data-language=\"json\">        <span class=\"ql-token hljs-attr\">\"name\":</span> \"Device1\"<span class=\"ql-token hljs-punctuation\">,</span></div><div class=\"ql-code-block\" data-language=\"json\">        <span class=\"ql-token hljs-attr\">\"interfaces\":</span> [</div><div class=\"ql-code-block\" data-language=\"json\">            <span class=\"ql-token hljs-punctuation\">{</span></div><div class=\"ql-code-block\" data-language=\"json\">                <span class=\"ql-token hljs-attr\">\"id\":</span> 101<span class=\"ql-token hljs-punctuation\">,</span></div><div class=\"ql-code-block\" data-language=\"json\">                <span class=\"ql-token hljs-attr\">\"name\":</span> \"Ethernet0\"</div><div class=\"ql-code-block\" data-language=\"json\">            <span class=\"ql-token hljs-punctuation\">},</span></div><div class=\"ql-code-block\" data-language=\"json\">            <span class=\"ql-token hljs-punctuation\">{</span></div><div class=\"ql-code-block\" data-language=\"json\">                <span class=\"ql-token hljs-attr\">\"id\":</span> 102<span class=\"ql-token hljs-punctuation\">,</span></div><div class=\"ql-code-block\" data-language=\"json\">                <span class=\"ql-token hljs-attr\">\"name\":</span> \"Ethernet1\"</div><div class=\"ql-code-block\" data-language=\"json\">            <span class=\"ql-token hljs-punctuation\">},</span></div><div class=\"ql-code-block\" data-language=\"json\">\t\t\t...</div><div class=\"ql-code-block\" data-language=\"json\">        <span class=\"ql-token hljs-punctuation\">]</span></div><div class=\"ql-code-block\" data-language=\"json\">    <span class=\"ql-token hljs-punctuation\">},</span></div><div class=\"ql-code-block\" data-language=\"json\">\t...</div><div class=\"ql-code-block\" data-language=\"json\"><span class=\"ql-token hljs-punctuation\">]</span></div></pre><p><br></p><p>Задача - получать ежеминутно список и записывать в csv-файл с заголовками</p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plaintext\">device_name,interface_name</div></pre>",
        "time": 15,
        "title": "Перекладывание джейсонов"
    },
    {
        "ID": 2480,
        "answers": [
            {
                "content": "<pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"python\">assert order == [\"session_fixture\", \"module_fixture\", \"autouse_fixture\", \"fixture_3\", \"fixture_1\", \"fixture_2\"]</div></pre><p><br></p><p><span style=\"color: rgb(63, 67, 80); background-color: rgba(63, 67, 80, 0.04);\">может с подсказками справиться с задачей. имеет понимание, что при autouse=True фикстура используется во всех тестах, знает, в каком порядке будут вызваны фикстуры </span><em style=\"color: rgb(63, 67, 80); background-color: rgba(63, 67, 80, 0.04);\">fixture_1, fixture_2, fixture_3, fixture_4</em><span style=\"color: rgb(63, 67, 80); background-color: rgba(63, 67, 80, 0.04);\">. упомянет, что </span><em style=\"color: rgb(63, 67, 80); background-color: rgba(63, 67, 80, 0.04);\">fixture_4</em><span style=\"color: rgb(63, 67, 80); background-color: rgba(63, 67, 80, 0.04);\"> будет вызвана после </span><em style=\"color: rgb(63, 67, 80); background-color: rgba(63, 67, 80, 0.04);\">fixture_3</em><span style=\"color: rgb(63, 67, 80); background-color: rgba(63, 67, 80, 0.04);\">.</span></p>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"python\">assert order == [\"session_fixture\", \"module_fixture\", \"autouse_fixture\", \"fixture_3\", \"fixture_1\", \"fixture_2\"]</div></pre><p><br></p><p><span style=\"color: rgb(63, 67, 80); background-color: rgba(63, 67, 80, 0.04);\">может самостоятельно решить задачу. знает, что в рамках скоупа autouse фикстуры вызываются раньше других, знает последовательность вызова фикстур session-module-function</span></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2024-06-20T13:18:31Z",
        "interviewCount": 71,
        "question": "<p><strong style=\"background-color: rgba(63, 67, 80, 0.04); color: rgb(63, 67, 80);\">Описание задачи</strong><span style=\"background-color: rgba(63, 67, 80, 0.04); color: rgb(63, 67, 80);\"> - Порядок выполнения фикстур</span></p><p><strong style=\"background-color: rgba(63, 67, 80, 0.04); color: rgb(63, 67, 80);\">Что проверяем</strong><span style=\"background-color: rgba(63, 67, 80, 0.04); color: rgb(63, 67, 80);\"> - знания кандидата в порядке очередности выполнения фикстур</span></p><p><strong style=\"background-color: rgba(63, 67, 80, 0.04); color: rgb(63, 67, 80);\">Задача</strong><span style=\"background-color: rgba(63, 67, 80, 0.04); color: rgb(63, 67, 80);\"> Проанализировать код и написать в тесте корректный assert для order</span></p><p><br></p><p><br></p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\">order = []</div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-meta\">@pytest.fixture(scope=\"session\")</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def</span> <span class=\"ql-token hljs-title\">session_fixture</span>():</div><div class=\"ql-code-block\" data-language=\"python\">    order.append(<span class=\"ql-token hljs-string\">\"session_fixture\"</span>)</div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-meta\">@pytest.fixture(scope=\"module\")</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def</span> <span class=\"ql-token hljs-title\">module_fixture</span>():</div><div class=\"ql-code-block\" data-language=\"python\">    order.append(<span class=\"ql-token hljs-string\">\"module_fixture\"</span>)</div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-meta\">@pytest.fixture</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def</span> <span class=\"ql-token hljs-title\">fixture_1</span>(<span class=\"ql-token hljs-params\">fixture_3, fixture_4</span>):</div><div class=\"ql-code-block\" data-language=\"python\">    order.append(<span class=\"ql-token hljs-string\">\"fixture_1\"</span>)</div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-meta\">@pytest.fixture(scope=\"function\")</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def</span> <span class=\"ql-token hljs-title\">fixture_3</span>():</div><div class=\"ql-code-block\" data-language=\"python\">    order.append(<span class=\"ql-token hljs-string\">\"fixture_3\"</span>)</div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-meta\">@pytest.fixture(autouse=True)</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def</span> <span class=\"ql-token hljs-title\">autouse_fixture</span>():</div><div class=\"ql-code-block\" data-language=\"python\">    order.append(<span class=\"ql-token hljs-string\">\"autouse_fixture\"</span>)</div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-meta\">@pytest.fixture</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def</span> <span class=\"ql-token hljs-title\">fixture_2</span>():</div><div class=\"ql-code-block\" data-language=\"python\">    order.append(<span class=\"ql-token hljs-string\">\"fixture_2\"</span>)</div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-meta\">@pytest.fixture</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def</span> <span class=\"ql-token hljs-title\">fixture_4</span>():</div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-keyword\">yield</span></div><div class=\"ql-code-block\" data-language=\"python\">    order.append(<span class=\"ql-token hljs-string\">\"fixture_4\"</span>)</div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">def</span> <span class=\"ql-token hljs-title\">test_order</span>(<span class=\"ql-token hljs-params\">fixture_1, module_fixture, fixture_2, session_fixture</span>):</div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-keyword\">pass</span></div></pre>",
        "time": 10,
        "title": "Порядок выполнения фикстур"
    },
    {
        "ID": 2328,
        "additional": "<p>18 грейд:</p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>написано работающее на представленной строке решение</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>нет избыточных проверок либо они скомбинированы после уточняющего вопроса</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>написаны тесты на:</li></ol><p>строку с одинаковыми числами</p><p>строку с пробелами</p><p>строку без чисел</p><p>строку с отрицательными числами</p><p>строку без букв</p><p>пустую строку</p><p>строку с числом, начинающимся на 0 – пример, 0123</p><p>строку с нецелыми числами (например, float)</p><p>строку с максимальным числом в начале, в середине, в конце</p><p><br></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>задача может быть решена без встроенной функции max, например, храним в переменной найденное число -&gt; сравниваем с новым найденным -&gt; если новое число больше, заменяем значение в переменной</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>для решения использованы регулярные выражения (понимает плюсы и минусы regex – скорость, сложность, читабельность)</li></ol><p><br></p><p>19+ грейд:</p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>всё, что указано для 18 грейда</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>ответил на вопрос про сложность реализованного решения (почти всегда это O(n))</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>в решении обработана строка с отрицательными числами</li></ol>",
        "answers": [
            {
                "content": "<pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-true\">import math</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-true\">def solution(example_string: str) -&gt; int | str:</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-true\">if not any(symbol.isdigit() for symbol in example_string):</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-true\">return \"There is no numbers in the string\"</span></div><div class=\"ql-code-block\" data-language=\"python\">    max_number = -math.inf</div><div class=\"ql-code-block\" data-language=\"python\">    current = <span class=\"ql-token hljs-true\">\"\"</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-true\">for symbol in example_string:</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-true\">if symbol == \"-\":</span></div><div class=\"ql-code-block\" data-language=\"python\">            <span class=\"ql-token hljs-true\">if current:</span></div><div class=\"ql-code-block\" data-language=\"python\">                max_number = <span class=\"ql-token hljs-true\">max(max_number, int(current))</span></div><div class=\"ql-code-block\" data-language=\"python\">            current = <span class=\"ql-token hljs-true\">\"-\"</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-true\">elif symbol.isdigit():</span></div><div class=\"ql-code-block\" data-language=\"python\">            current += symbol</div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-true\">else:</span></div><div class=\"ql-code-block\" data-language=\"python\">            max_number = <span class=\"ql-token hljs-true\">max(max_number, int(current))</span></div><div class=\"ql-code-block\" data-language=\"python\">            current = <span class=\"ql-token hljs-true\">\"\"</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-true\">if current:</span></div><div class=\"ql-code-block\" data-language=\"python\">        max_number = <span class=\"ql-token hljs-true\">max(max_number, int(current))</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-true\">return max_number</span></div></pre><p><br></p><p>Через регулярное выражение</p><p><br></p><p><br></p><p><br></p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"python\">import re</div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\">def solution4(string_with_numbers: str):</div><div class=\"ql-code-block\" data-language=\"python\">    return max(int(digits) for digits in re.findall(r\"\\d+\", string_with_numbers))</div></pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2024-03-05T12:20:30Z",
        "interviewCount": 286,
        "question": "<p>Есть строка из произвольных символов, нужно найти в ней максимальный int.</p><p>Пример строки:</p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">s = \"df122gk123dfgd124dfghjk1sdfg2db99\"</div></pre><p><br></p><p>Нужно протестировать своё решение, пример теста:</p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">assert solution(\"h33h23j1\") == 33, f\"Got {solution('h33h23j1')}, expected 33\"</div></pre>",
        "time": 15,
        "title": "Найти максимальное число в строке"
    },
    {
        "ID": 2193,
        "answers": [
            {
                "content": "<ul><li>% operator: <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">'Hello, %s' % (\"Ozon\")</code></li><li>format <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">'Hello, {}'.format(\"Ozon\")</code></li><li>f-строки <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">f'Hello, {\"Ozon\"}'</code></li></ul>",
                "difficulty": "GRADE_SCREENING"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T11:24:38Z",
        "interviewCount": 78,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Как собрать строку? Напишите несколько решений.</span></p>",
        "time": 5,
        "title": "Работа со строками: интерполяция строк"
    },
    {
        "ID": 2192,
        "additional": "<p>Q: <em style=\"color: rgb(127, 140, 141);\">Что можете рассказать про range(10)? Будет ли он хорошо работать, если там большое число?</em></p><p>A: Будет, в Python 3.* он работает как генератор, до Python 3.* для этого предназначался <code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">xrange()</code></p>",
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">[i*i for i in range(10)]\n</pre>",
                "difficulty": "GRADE_SCREENING"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T11:22:27Z",
        "interviewCount": 564,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Посчитайте однострочником квадраты чисел от 0 до 9</span></p>",
        "time": 5,
        "title": "Словари: квадраты чисел от 0 до 9"
    },
    {
        "ID": 2191,
        "additional": "<p>Q: <em style=\"color: rgb(127, 140, 141);\">Зачем в нем нужен dict()?</em></p><p>A: Без него мы увидим объект, возвращаемый zip</p><p>Q: <em style=\"color: rgb(127, 140, 141);\">Что будет, если длины кортежей не равны?</em></p><p>A: Ошибки не будет, zip возьмет одинаковое число элементов из обоих кортежей</p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">&gt;&gt;&gt; dict(zip(('a','b','c','d','e'),(1,2)))\n{'a': 1, 'b': 2}\n</pre>",
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">{'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n</pre><p><br></p>",
                "difficulty": "GRADE_SCREENING"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T11:17:16Z",
        "interviewCount": 224,
        "question": "<p>Представить результат команды zip. Что выведет выражение?</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">dict(zip(('a','b','c','d','e'),(1,2,3,4,5)))\n</pre>",
        "time": 5,
        "title": "Словари: zip"
    },
    {
        "ID": 2190,
        "additional": "<p>Q: <em style=\"color: rgb(127, 140, 141);\">Что такое sorted?</em></p><p>A: В питоне Batteries included - это встроенная функция</p>",
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">[1, 2, 3, 4, 5]\n</pre>",
                "difficulty": "GRADE_SCREENING"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T11:14:09Z",
        "interviewCount": 156,
        "question": "<p>Что выведет выражение?</p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">D = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nsorted([D[s] for s in D])\n</pre>",
        "time": 5,
        "title": "Словари: sorted и list comprehension"
    },
    {
        "ID": 2189,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">[<span class=\"hljs-meta\">1, 2</span>]\n</pre><p><br></p>",
                "difficulty": "GRADE_SCREENING"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T11:11:20Z",
        "interviewCount": 193,
        "question": "<p>Что выведет выражение?</p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">D = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n[i for i in range(3) if i in D.values()]\n</pre>",
        "time": 5,
        "title": "Словари: Условие в list comprehension"
    },
    {
        "ID": 2188,
        "additional": "<p>Q: <em style=\"color: rgb(127, 140, 141);\">Зачем это надо?</em></p><p>A: Функцию не нужно импортировать отдельно; легче читать и понимать, что функция относится к классу</p>",
        "answers": [
            {
                "content": "<p>Это декоратор для методов класса, которые не меняют его состояние/данные</p>",
                "difficulty": "GRADE_SCREENING"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T11:01:05Z",
        "interviewCount": 152,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Что такое и зачем нужен </span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">@staticmethod</code><span style=\"color: rgb(52, 73, 94);\">?</span></p>",
        "time": 5,
        "title": "Декораторы: @staticmethod"
    },
    {
        "ID": 2187,
        "additional": "<p><span style=\"color: rgb(0, 26, 52);\">Q: Напишите пример кода</span><em style=\"color: rgb(127, 140, 141);\">?</em></p><p>A:</p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">class MyComparableClass:\n\n  def __init__(self, val):\n     self.val = val\n\n  def __eq__(self, other):\n     return self.val == other.val\n</pre>",
        "answers": [
            {
                "content": "<p>Нужно описать магический метод <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">__eq__</code> Вообще методов для сравнения много - <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">__lt__, __le__</code> и так далее</p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T10:59:14Z",
        "interviewCount": 104,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Как сравнить два экземпляра класса?</span></p>",
        "time": 10,
        "title": "ООП: сравнение инстансов №2"
    },
    {
        "ID": 2186,
        "additional": "<p>Q: <em style=\"color: rgb(127, 140, 141);\">А если каскадным присвоением?</em></p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">a = b = C()\n\na == b\n</pre>",
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Будет </span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">False</code><span style=\"color: rgb(52, 73, 94);\">, это разные инстансы</span></p>",
                "difficulty": "GRADE_SCREENING"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T10:57:30Z",
        "interviewCount": 643,
        "question": "<p>Что будет результатом?</p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">class C:\n    pass\n \na = C()\nb = C()\n\na == b\n</pre>",
        "time": 5,
        "title": "ООП: сравнение инстансов №1"
    },
    {
        "ID": 2185,
        "additional": "<p>Q: <em style=\"color: rgb(127, 140, 141);\">Что такое </em><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\"><em>__repr__()</em></code><em style=\"color: rgb(127, 140, 141);\">?</em></p><p>A: Ещё одно строковое представление, отображается при добавлении в контейнеры (например в списки)</p><p><br></p><p>Q: <em style=\"color: rgb(127, 140, 141);\">В чем разница?</em></p><p>A: <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">__str__()</code> используется, например, при <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">print()</code> или <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">str()</code> - оно должна быть readable, <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">__repr__()</code> чаще используют для отладки;</p>",
        "answers": [
            {
                "content": "<p>Отладка/просто строковое представление инстанса</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">IPAddress</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, ip</span>):\n        self.ip = ip\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>):\n       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f\"IPAddress: <span class=\"hljs-subst\">{self.ip}</span>\"</span>\n</pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T10:53:34Z",
        "interviewCount": 31,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Для чего используется </span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">__str__</code><span style=\"color: rgb(52, 73, 94);\">?</span></p>",
        "time": 10,
        "title": "Магические методы: __str__"
    },
    {
        "ID": 2184,
        "additional": "<p>Q: <em style=\"color: rgb(127, 140, 141);\">Что изменится при присвоении?</em></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">x[0][3] = 10\n</pre><p>A: \"Python has names\" - у нас не три разных коробочки с числами</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">[[1, 2, 3, 10], [1, 2, 3, 10], [1, 2, 3, 10]]\n</pre><p>NB вот еще пример с инстансом, показывающий, как это работает</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">C</span>:\n    <span class=\"hljs-title\">pass</span>\n\n<span class=\"hljs-title\">a</span> = C()\n[<span class=\"hljs-meta\">a</span>] * <span class=\"hljs-number\">3</span>\n[&lt;__main__.C <span class=\"hljs-built_in\">object</span> at <span class=\"hljs-number\">0x110060670</span>&gt;, &lt;__main__.C <span class=\"hljs-built_in\">object</span> at <span class=\"hljs-number\">0x110060670</span>&gt;, &lt;__main__.C <span class=\"hljs-built_in\">object</span> at <span class=\"hljs-number\">0x110060670</span>&gt;]\n</pre><p><br></p>",
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">[[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T10:50:03Z",
        "interviewCount": 250,
        "question": "<p>Представить результат выражения</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attribute\">x</span> = [[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]] * <span class=\"hljs-number\">3</span>\n</pre>",
        "time": 10,
        "title": "Списки: list * 3"
    },
    {
        "ID": 2183,
        "additional": "<p>Q: <em style=\"color: rgb(127, 140, 141);\">Как проверить, что результат это </em><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\"><em>None</em></code><em style=\"color: rgb(127, 140, 141);\">?</em></p><p>A: Для этого есть ключевое слово <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">is</code></p><p><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">if pprinter(\"Hello, Ozon!\") is None: </code></p><p>Q: <em style=\"color: rgb(127, 140, 141);\">Какие реальные случаи применения могут быть?</em></p><p>A: Неуспешное подключение к БД, например - может вернуть <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">None</code></p>",
        "answers": [
            {
                "content": "<p>Она вернет <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">None</code></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">&gt;&gt;&gt; a = pprinter(\"Hi\")\nHi\n&gt;&gt;&gt; a\n&gt;&gt;&gt; type(a)\n&lt;class 'NoneType'&gt;\n</pre><p><br></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T10:46:38Z",
        "interviewCount": 131,
        "question": "<p>Что вернет функция без <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">return</code>?</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">def <span class=\"hljs-title function_ invoke__\">pprinter</span>(<span class=\"hljs-keyword\">string</span>):\n    print(string)\n</pre>",
        "time": 5,
        "title": "None"
    },
    {
        "ID": 2182,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">def func(name, company='Ozon'):\n    print(name, 'на собеседовании в', company)\n\nfunc(\"Guido\", \"Microsoft\")\n\nGuido на собеседовании в Microsoft\n</pre><p><br></p><p><br></p><p><span style=\"color: rgb(23, 43, 77);\">Знает что функция начинается \"def\" и закрывается \"():\"</span></p><p><span style=\"color: rgb(23, 43, 77);\">Могут быть вопросы по синтаксису</span></p><p><span style=\"color: rgb(23, 43, 77);\">Для вывода текста нужно использовать print()</span></p><p><br></p>",
                "difficulty": "GRADE_16"
            },
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">def func(name, company='Ozon'):\n    print(name, 'на собеседовании в', company)\n\nfunc(\"Guido\", \"Microsoft\")\n\nGuido на собеседовании в Microsoft\n</pre><p><br></p><p><br></p><p><span style=\"color: rgb(23, 43, 77);\">Синтаксис без подсказки</span></p><p><span style=\"color: rgb(23, 43, 77);\">Правильно прокинуть аргумент по умолчанию (кроме джавы), </span></p><p><span style=\"color: rgb(23, 43, 77);\">Может рассказать какие конкатенации строк есть</span></p><p><span style=\"color: rgb(23, 43, 77);\">Название аргументов и функции носят говорящее название</span></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T10:43:03Z",
        "interviewCount": 647,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Написать функцию, которая печататет строку </span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">&lt;Name&gt; на собеседовании в &lt;company&gt;</code><span style=\"color: rgb(52, 73, 94);\">, по-умолчанию считаем, что компания это Ozon, но можно и свою компанию создать.</span></p>",
        "time": 10,
        "title": "Аргументы по-умолчанию"
    },
    {
        "ID": 2181,
        "additional": "<p>Q: <em style=\"color: rgb(127, 140, 141);\">Зачем это проверять?</em></p><p>A: чтобы не выполнять какой-то код при импорте этого файла как модуля. Часто после этой проверки выполняются отладочные принты или что-то подобное.</p>",
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Это условие, которое проверит, запущен ли файл напрямую или нет</span></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T10:38:35Z",
        "interviewCount": 107,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Почему в скриптах есть это выражение </span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">if __name__ == \"__main__\"</code></p>",
        "time": 2,
        "title": "if __name__ == \"__main__\""
    },
    {
        "ID": 2180,
        "additional": "<p>Q: <em style=\"color: rgb(127, 140, 141);\">Что еще внутри может быть?</em></p><p>A: <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">pip</code> - пакетный менеджер, еще <code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">easy_install</code></p><p>Q: <em style=\"color: rgb(127, 140, 141);\">Зачем это?</em></p><p>A:</p><ul><li>избежать конфликты версий библиотек для разных проектов</li><li>держать несколько версий Python с разными библиотеками</li><li>изолировать окружение разработчика от хоста</li></ul><p>Q: <em style=\"color: rgb(127, 140, 141);\">Есть же докер/виртуалка?</em></p><p>A: venv это инструмент инкапсулирования только зависимостей, используйте его для этого, если ничего больше не нужно</p>",
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(24, 6, 32);\">Инструмент для работы с проектами на Python, обеспечивающий управление зависимостями и изоляцию проектов. Представляющий из себя </span>каталог, в который устанавливаются некоторые исполняемые файлы и скрипты.</p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T10:35:04Z",
        "interviewCount": 158,
        "question": "<p>Что из себя представляет python virtual environment и зачем он нужен?</p>",
        "time": 5,
        "title": "Python virtual environment"
    },
    {
        "ID": 2179,
        "additional": "<p>Q: <em style=\"color: rgb(127, 140, 141);\">А еще есть .egg?</em></p><p>A: Да, но это более старый формат, наверное его лучше избегать в современном окружении</p>",
        "answers": [
            {
                "content": "<p>platform wheel:</p><p><br></p><ul><li>сборка может включать бинарные файлы - например адаптер psycopg2 - тогда под каждую платформу будет свой пакет</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">psycopg2-2.8.6-cp27-cp27m-win32.whl\npsycopg2-2.8.6-cp27-cp27m-win_amd64.whl\n</pre><ul><li>сборка может зависеть так же от версии Python / abi</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">psycopg2-<span class=\"hljs-number\">2.8.6</span>-cp27-cp27m-win_amd64.<span class=\"hljs-property\">whl</span>\npsycopg2-<span class=\"hljs-number\">2.8.6</span>-cp34-cp34m-win_amd64.<span class=\"hljs-property\">whl</span>\n</pre><ul><li>но при этом Wheel не содержит .pyc файлов, если код совместим с Python 2 и 3 пакет может быть один и тот же - universal wheel</li><li>может быть так же пакет, который зависит от версии Python и только - pure-Python wheel</li></ul><p><br></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T10:24:21Z",
        "interviewCount": 2,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Рассказать про whl пакетирование, и то, какие задачи оно решает. В 2012 году вышел PEP 427, начиная с этого времени Wheel это стандарт пакетирования в Python. Когда для одного проекта собираютcя разные/одинаковые whl?</span></p>",
        "time": 10,
        "title": "Типы пакетов - .whl"
    },
    {
        "ID": 2178,
        "additional": "<p>Q: <em style=\"color: rgb(127, 140, 141);\">Какое отношение имеет к distutils?</em></p><p>A: Можно сказать, что Setuptools это удобная надстройка над более старым distutils</p><p>Q: <em style=\"color: rgb(127, 140, 141);\">Внутри проекта, который собирается Setuptools есть setup.cfg - зачем он?</em></p><p>A: Setuptools предлагает перейти от формата с setup.py к декларативной конфигурации</p><p>Q: <em style=\"color: rgb(127, 140, 141);\">В setup что может быть описано?</em></p><p>A:</p><p><br></p><ul><li>в нем есть метаданные - имя, версия пакета</li><li>описаны зависимости</li><li>могут быть описаны entry_points - скрипты, которые автоматически создадутся после установки</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">[<span class=\"hljs-meta\">options.entry_points</span>]\nconsole_scripts =\n    main = mypkg:some_func\n</pre><ul><li>могут быть data files (конфиги, например)</li></ul><p><br></p>",
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Пакет для сборки и дистрибуции других пакетов</span></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T10:19:22Z",
        "interviewCount": 9,
        "question": "<p><span style=\"color: rgb(0, 26, 52);\">Что такое Setuptools в двух словах?</span></p>",
        "time": 10,
        "title": "setuptools/distutils"
    },
    {
        "ID": 2177,
        "answers": [
            {
                "content": "<p>Нужна библиотека glob</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">import glob\n\nglob.glob('test[0-9].txt', recursive=True)\n</pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T10:11:28Z",
        "interviewCount": 1,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Как собрать файлы в папке (рекурсивно)?</span></p>",
        "time": 10,
        "title": "Сommon libs: файлы в папке"
    },
    {
        "ID": 2176,
        "answers": [
            {
                "content": "<p>Это модуль для сериализации и десереализации объектов. Например, чтобы передать объект или сохранить его между запусками.</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">import pickle\n\nd = {'a': 1}\n\nwith open('file.p', 'wb') as f:\n    pickle.dump(d, f)\n\nwith open('file.p', 'rb') as f:\n    loaded_d = pickle.load(f)\n\nprint(loaded_d)\n</pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T10:09:07Z",
        "interviewCount": 4,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Что такое pickle? Можете написать код?</span></p>",
        "time": 10,
        "title": "Common libs: pickle"
    },
    {
        "ID": 2175,
        "additional": "<p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">как запустить тест?</em></p><p>A: для запуска достаточно выполнить команду&nbsp;<code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">pytest</code>&nbsp;в директории с файлом или в родительских. Pytest находит файлы с префиксом test_*. Можно также указать файл как аргумент -&nbsp;<code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">pytest test_ozon.py</code>&nbsp;или запустить, вызвав модуль pytest&nbsp;<code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">python -m pytest test_ozon.py</code></p><p><br></p><p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">в чем разница между созданием файла в тесте и в фикстуре?</em></p><p>A: ошибка инициализации (например у нас файл уже существует) в фикстуре вернет&nbsp;<code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">ERROR test_ozon.py::...</code>, если это произойдет в тесте - тест будет помечен как FAIL.</p>",
        "answers": [
            {
                "content": "<p>Это фикстура (fixture) - механизм, который предлагает pytest для инициализации тестов, параметризации запуска и очистки окружения после них (в терминах arrange/act/assert/cleanup это arrange и cleanup). В предложенном коде создастся файл и управление вернется в тесты, после окончания тестов выполнится файл закроется и удалится.</p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-11-21T10:05:14Z",
        "interviewCount": 755,
        "question": "<p>Рассказать, что такое&nbsp;<code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">pseudo_lock()</code>&nbsp;в файле test_ozon.py:</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">import os, pytest\n\n\n@pytest.fixture\ndef pseudo_lock():\n    filename = \"file.lock\"\n    with open(filename, \"w+\") as f:\n        f.write(\"tests are going on\")\n        yield\n    os.remove(filename)\n\n\ndef test_open_base_url(pseudo_lock):\n    print(\"Hello, tests!\")\n    assert True == True\n</pre><p><br></p>",
        "time": 10,
        "title": "pytest: фикстуры"
    },
    {
        "ID": 2048,
        "answers": [
            {
                "content": "<p>Вариант реализации 1:</p><pre class=\"ql-syntax\" spellcheck=\"false\">\n<span class=\"hljs-keyword\">import</span>﻿ functools\n<span class=\"hljs-keyword\">import</span> time\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delayed</span>(<span class=\"hljs-params\">delay=<span class=\"hljs-number\">1</span></span>):\n    <span class=\"hljs-string\">\"\"\"Задержка перед вызовом функции\"\"\"</span><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decorator</span>(<span class=\"hljs-params\">func</span>):\n<span class=\"hljs-meta\">        @functools.wraps(<span class=\"hljs-params\">func</span>)def wrapper(<span class=\"hljs-params\">*args, **kwargs</span>):</span>\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f'Спим <span class=\"hljs-subst\">{delay}</span> сек.'</span>)\n            time.sleep(delay)\n            val = func(*args, **kwargs)\n            <span class=\"hljs-keyword\">return</span> val\n        <span class=\"hljs-keyword\">return</span> wrapper\n    <span class=\"hljs-keyword\">return</span> decorator\n\n<span class=\"hljs-meta\">@delayed(<span class=\"hljs-params\">delay=<span class=\"hljs-number\">0.5</span></span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">countdown</span>(<span class=\"hljs-params\">int_num</span>):\n    <span class=\"hljs-keyword\">if</span> int_num &lt; <span class=\"hljs-number\">1</span>:\n        exit(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-built_in\">print</span>(int_num)\n    countdown(int_num - <span class=\"hljs-number\">1</span>)    \n\ncountdown(<span class=\"hljs-number\">3</span>)\n\n<span class=\"hljs-comment\"># Спим 0.5 сек.</span>\n<span class=\"hljs-comment\"># 3</span>\n<span class=\"hljs-comment\"># Спим 0.5 сек.</span>\n<span class=\"hljs-comment\"># 2</span>\n<span class=\"hljs-comment\"># Спим 0.5 сек.</span>\n<span class=\"hljs-comment\"># 1</span>\n<span class=\"hljs-comment\"># Спим 0.5 сек. </span>\n</pre><p><br></p><p>Вариант реализации 2:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">from</span> functools <span class=\"hljs-keyword\">import</span> wraps\n<span class=\"hljs-keyword\">from</span> time <span class=\"hljs-keyword\">import</span> sleep\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Delayed</span>:\n    <span class=\"hljs-comment\"># запоминаем аргументы декоратора</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, delay=<span class=\"hljs-number\">1</span></span>):\n        self._delay = delay\n\n    <span class=\"hljs-comment\"># декоратор общего назначения</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__call__</span>(<span class=\"hljs-params\">self, func</span>):\n<span class=\"hljs-meta\">        @wraps(<span class=\"hljs-params\">func</span>)</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">wrapper</span>(<span class=\"hljs-params\">*args, **kwargs</span>):\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f'Спим <span class=\"hljs-subst\">{self._delay}</span> сек.'</span>)\n            sleep(self._delay)\n            val = func(*args, **kwargs)\n            <span class=\"hljs-keyword\">return</span> val\n        <span class=\"hljs-keyword\">return</span> wrapper\n\n<span class=\"hljs-meta\">@Delayed(<span class=\"hljs-params\">delay=<span class=\"hljs-number\">0.5</span></span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">countdown</span>(<span class=\"hljs-params\">int_num</span>):\n    <span class=\"hljs-keyword\">if</span> int_num &lt; <span class=\"hljs-number\">1</span>:\n        exit(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-built_in\">print</span>(int_num)\n    countdown(int_num - <span class=\"hljs-number\">1</span>)    \n        \ncountdown(<span class=\"hljs-number\">3</span>) \n<span class=\"hljs-comment\"># Спим 0.5 сек.</span>\n<span class=\"hljs-comment\"># 3</span>\n<span class=\"hljs-comment\"># Спим 0.5 сек.</span>\n<span class=\"hljs-comment\"># 2</span>\n<span class=\"hljs-comment\"># Спим 0.5 сек.</span>\n<span class=\"hljs-comment\"># 1</span>\n<span class=\"hljs-comment\"># Спим 0.5 сек. </span>\n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T15:22:11Z",
        "interviewCount": 192,
        "question": "<p>Реализуй декоратор с отложенным запуском.</p>",
        "time": 5,
        "title": "Реализация декоратора с отложенным запуском"
    },
    {
        "ID": 2047,
        "answers": [
            {
                "content": "<p>Реализовано не оптимально, просто работает.</p><p><strong>Подход</strong></p><ul><li>Проверьте, не пуст ли какой-либо из списков</li><li>Сначала нам нужно определить голову результирующего списка. Эта голова будет меньшей из голов заданных списков.</li><li>Перебирайте каждый узел списков, пока один из списков не будет полностью пройден.</li><li>При обходе списков определите меньший из узлов списков и добавьте его в результирующий список.</li><li>После завершения цикла может возникнуть случай, когда в списке останутся узлы. Мы добавим эти оставшиеся узлы в результирующий список</li></ul><p><br></p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Реализ<u>﻿</u>овано оптимально, соответственно, оценить сложность.</p><p><br></p><p><strong>Подход</strong></p><ul><li>Проверьте, не пуст ли какой-либо из списков</li><li>Сначала нам нужно определить голову результирующего списка. Эта голова будет меньшей из голов заданных списков.</li><li>Перебирайте каждый узел списков, пока один из списков не будет полностью пройден.</li><li>При обходе списков определите меньший из узлов списков и добавьте его в результирующий список.</li><li>После завершения цикла может возникнуть случай, когда в списке останутся узлы. Мы добавим эти оставшиеся узлы в результирующий список</li></ul><p><br></p><p><strong>Time Complexity</strong></p><p><strong><em>O(m + n)&nbsp;</em></strong></p><p><strong><em>m и n</em></strong>&nbsp; - число нод в каждом списке</p><p><br></p><p><strong>Space Complexity</strong></p><p><strong><em>O(1)</em></strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">\n<span class=\"hljs-attr\">class ListNode:</span>\n    <span class=\"hljs-string\">def</span> <span class=\"hljs-string\">__init__(self,</span> <span class=\"hljs-string\">val=0,</span> <span class=\"hljs-string\">nextNode=None):</span>\n        <span class=\"hljs-string\">self.val</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">val</span>\n        <span class=\"hljs-string\">self.next</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">nextNode</span>\n\n\n<span class=\"hljs-string\">def</span> <span class=\"hljs-string\">mergeTwoLists(list_one:</span> <span class=\"hljs-string\">ListNode,</span> <span class=\"hljs-attr\">list_two:</span> <span class=\"hljs-string\">ListNode)</span> <span class=\"hljs-string\">-&gt;</span> <span class=\"hljs-attr\">ListNode:</span>\n    <span class=\"hljs-comment\"># Check if either of the lists is null</span>\n    <span class=\"hljs-attr\">if list_one is None:</span>\n        <span class=\"hljs-string\">return</span> <span class=\"hljs-string\">list_two</span>\n    <span class=\"hljs-attr\">if list_two is None:</span>\n        <span class=\"hljs-string\">return</span> <span class=\"hljs-string\">list_one</span>\n    <span class=\"hljs-comment\"># Choose head which is smaller of the two lists</span>\n    <span class=\"hljs-string\">if</span> <span class=\"hljs-string\">list_one.val</span> <span class=\"hljs-string\">&lt;</span> <span class=\"hljs-attr\">list_two.val:</span>\n        <span class=\"hljs-string\">temp</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">head</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">ListNode(list_one.val)</span>\n        <span class=\"hljs-string\">list_one</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">list_one.next</span>\n    <span class=\"hljs-attr\">else:</span>\n        <span class=\"hljs-string\">temp</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">head</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">ListNode(list_two.val)</span>\n        <span class=\"hljs-string\">list_two</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">list_two.next</span>\n    <span class=\"hljs-comment\"># Loop until any of the list becomes null</span>\n    <span class=\"hljs-attr\">while list_one is not None and list_two is not None:</span>\n        <span class=\"hljs-string\">if</span> <span class=\"hljs-string\">list_one.val</span> <span class=\"hljs-string\">&lt;</span> <span class=\"hljs-attr\">list_two.val:</span>\n            <span class=\"hljs-string\">temp.next</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">ListNode(list_one.val)</span>\n            <span class=\"hljs-string\">list_one</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">list_one.next</span>\n        <span class=\"hljs-attr\">else:</span>\n            <span class=\"hljs-string\">temp.next</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">ListNode(list_two.val)</span>\n            <span class=\"hljs-string\">list_two</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">list_two.next</span>\n        <span class=\"hljs-string\">temp</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">temp.next</span>\n    <span class=\"hljs-comment\"># Add all the nodes in list_one, if remaining</span>\n    <span class=\"hljs-attr\">while list_one is not None:</span>\n        <span class=\"hljs-string\">temp.next</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">ListNode(list_one.val)</span>\n        <span class=\"hljs-string\">list_one</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">list_one.next</span>\n        <span class=\"hljs-string\">temp</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">temp.next</span>\n    <span class=\"hljs-comment\"># Add all the nodes in list_two, if remaining</span>\n    <span class=\"hljs-attr\">while list_two is not None:</span>\n        <span class=\"hljs-string\">temp.next</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">ListNode(list_two.val)</span>\n        <span class=\"hljs-string\">list_two</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">list_two.next</span>\n        <span class=\"hljs-string\">temp</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">temp.next</span>\n    <span class=\"hljs-string\">return</span> <span class=\"hljs-string\">head</span> \n</pre><p><br></p>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T15:19:31Z",
        "interviewCount": 24,
        "question": "<p>Объедините два отсортированных связанных списка и верните их как новый отсортированный список. Новый список должен быть составлен путем соединения узлов первых двух списков.</p><p><br></p><p><u>Ограничения</u>:</p><ul><li>Количество узлов в обоих списках находится в диапазоне&nbsp;[0, 50]</li><li>-100 ≤ Node.val ≤ 100</li><li>l1 и l2 отсортированы в неубывающем порядке.</li></ul><p><img src=\"https://jit.o3.ru/secure/attachment/2163674/2163674_image-2023-05-17-18-02-30-677.png\"></p>",
        "time": 25,
        "title": "Алгоритмическая подготовка"
    },
    {
        "ID": 2046,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">У таких интервью нет правильного ответа, суть в том, чтобы во время проектирования системы и решая определенных проблем и задач кандидат прошелся по основным технологиям и понятиям:</span></p><ul><li><strong>Scalability</strong>&nbsp;(Масштабируемость): способность системы справляться с растущими объемами нагрузки или трафика. Важно понимать различные подходы к масштабируемости, такие как горизонтальное масштабирование (добавление дополнительных машин в систему) и вертикальное масштабирование (добавление дополнительных ресурсов на одну машину).</li><li><strong>Fault tolerance (</strong>Отказоустойчивость): способность системы продолжать функционировать, несмотря на отказ одного или нескольких ее компонентов. Такие методы, как резервирование и балансировка нагрузки, могут помочь повысить отказоустойчивость системы.</li><li><strong>Load balancing (</strong>Балансировка нагрузки). Балансировщики нагрузки распределяют рабочие нагрузки между несколькими компьютерами, чтобы оптимизировать использование ресурсов и гарантировать, что ни один компьютер не будет перегружен.</li><li><strong>Caching</strong>&nbsp;(Кэширование): хранение часто используемых данных на уровне высокоскоростного хранилища для снижения нагрузки на базовое хранилище данных и повышения производительности системы.</li><li><strong>Availability</strong>&nbsp;(Доступность): способность системы своевременно реагировать на запросы. Это тесно связано с отказоустойчивостью и обычно измеряется в процентах от времени, в течение которого система находится в рабочем состоянии.</li><li><strong>Consistency</strong>&nbsp;(Непротиворечивость): Степень, в которой все узлы в распределенной системе видят одни и те же данные в одно и то же время. Согласованность можно разделить на различные уровни, такие как сильная согласованность, окончательная согласованность и отсутствие согласованности.</li><li><strong>Latency</strong>&nbsp;(Задержка): время, необходимое для обработки запроса и возврата ответа. Задержка является важным фактором при проектировании системы, особенно для систем, обрабатывающих данные в реальном времени.</li><li><strong>Throughput</strong>&nbsp;(Пропускная способность): количество запросов, которые система может обработать в единицу времени. Пропускная способность тесно связана с масштабируемостью и часто используется как мера производительности системы.</li><li><strong>Partition Tolerance</strong>&nbsp;(Устойчивость к разделению системы): Способность системы продолжать работу при возникновении сетевых разделов. В распределенных системах невозможно одновременно обеспечить согласованность и устойчивость к разделам, поэтому разработчик должен решить, какой из них более важен для варианта использования.</li><li><strong>CAP Theorem</strong>&nbsp;(Теорема CAP): Теорема утверждает, что распределенная система не может одновременно обеспечивать все три из следующих гарантий: непротиворечивость, доступность и устойчивость к разделению системы.</li><li><strong>ACID Properties</strong>&nbsp;(Свойства ACID): набор свойств, гарантирующих надежную обработку транзакций базы данных. Аббревиатура расшифровывается как атомарность, согласованность, изоляция и долговечность.</li></ul><p>&nbsp;</p><p>При проектировании системы нам 100% понадобится БД, так что тут кандидат должен будет выбрать в зависимости от задачи одну или несколько БД</p><ul><li><strong>Relational databases</strong></li><li><strong>NoSQL databases</strong></li><li><strong>Distributed key-value stores</strong></li><li><strong>Document databases</strong></li><li><strong>Graph databases</strong></li><li><strong>Time-series databases</strong></li></ul><p>&nbsp;</p><p><strong>Постановка задачи</strong></p><p>Спроектировать с нуля приложение&nbsp;<strong>Ozon.</strong></p><p>Далее нужно выбрать какую-нибудь отдельную тему, например «Система рекомендаций товаров», «Личный кабинет», «Заказ билетов», «Чат поддержки» и т.д.</p><p>&nbsp;</p><p>Например мы выбрали «Личный кабинет».</p><p><strong>&nbsp;</strong></p><p><strong>Функциональные требования</strong></p><ul><li>Должны получать каталог всей продукции и совершать покупки</li><li>и / или</li><li>Должен предоставлять функцию поиска</li><li>...</li></ul><p>&nbsp;</p><p><strong>Нефункциональные требования</strong></p><ul><li>Low latency (Низкая задержка)</li><li>High availability (Высокая доступность)</li><li>High consistency (Высокая консистенция)</li></ul><p>&nbsp;</p><p>&nbsp;</p><p>Далее кандидат должен, по идее начать задавать уточняющие вопросы например по нагрузке, если сразу двинется в бой — это плохо. По нагрузке мы можем сказать, что у нас 3000000 пользователей из них, например 5000000 ежедневно активных. Также можно накинуть цифр по заказам, продавцам, товарам. В общем, HighLoad.</p><p>&nbsp;</p><p>После этого начинаете рисовать архитектуру в каких-нибудь рисовалках.</p><p>Можете посоветовать кандидату начать с самой простой схемы и далее постепенно прорабатывать ее.</p><p><img src=\"https://jit.o3.ru/secure/attachment/2279221/2279221_image-2023-07-06-14-43-20-872.png\"></p><p><br></p><p><span style=\"color: rgb(23, 43, 77);\">Далее</span></p><p><img src=\"https://jit.o3.ru/secure/attachment/2279222/2279222_image-2023-07-06-14-43-42-108.png\"></p><p><br></p><p><span style=\"color: rgb(23, 43, 77);\">Затем</span></p><p><img src=\"https://jit.o3.ru/secure/attachment/2279223/2279223_image-2023-07-06-14-44-04-942.png\"></p><p><br></p><p><br></p><p>В общем, куда вас заведет общение.</p><p>Далее после верхнеуровнего проектирования вы можете перейти к конкретным компонентам, таким как: UI, проектированию API или схемы БД, или сосредоточится на алгоритме, а также поговорить о выборе инструментов.</p><p>В конце вы должны посмотреть на систему и проверить соответствует ли она функциональным и нефункциональным требованиям.</p>",
                "difficulty": "GRADE_20"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T15:04:36Z",
        "interviewCount": 43,
        "question": "<p>Необходимо спроектировать систему.</p><p><br></p><p>Собеседующий, должен выбрать тему, которая ему близка.</p><p>На просторах интернета много примеров «Design Interview», таких как: TinyURL, Dropbox, Distributed cache и т.д. Можно воспользоваться готовым примером или составить задачу самому.</p>",
        "time": 30,
        "title": "Проектирование систем"
    },
    {
        "ID": 2045,
        "answers": [
            {
                "content": "<p>Сложность O(log n)</p><pre class=\"ql-syntax\" spellcheck=\"false\">def search(nums, target):\n    # Устанавливаем границы поиска\n    # На первом этапе это весь массив\n\n    left = 0\n    right = len(nums) - 1\n\n    # До тех пор, пока поиск не сузится до 1 элемента, выполняем цикл\n    while left &lt;= right:\n        # Находим средний элемент списка\n        mid = int((left + right) / 2)\n        # Если средний элемент равен искомому - возвращаем его индекс\n        if nums[mid] == target:\n            return mid\n\n        # Если средний элемент меньше искомого значения, сдвигаем левую границу\n        # Следующий поиск будет на отрезке от среднего элемента до конца массива\n        # Если средний элемент больше искомого, сдвигаем правую границу\n        # Тогда следующий поиск будет от начала массива до середины\n\n        if nums[mid] &lt; target:\n            left = mid + 1\n        elif nums[mid] &gt; target:\n            right = mid - 1\n    # Если не найден искомый элемент при сужении области поиска до 1 элемента, вернется -1\n    return -1\n\n\nassert search([], -1) == -1\nassert search([-1, 0, 3, 5, 9, 12], 9) == 4\nassert search([-1, 0, 3, 5, 9], 0) == 1\nassert search([-1, 0, 3, 5, 9, 12], 2) == -1 \n</pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T14:58:14Z",
        "interviewCount": 46,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Дан массив целых чисел&nbsp;</span>nums<span style=\"color: rgb(23, 43, 77);\">, отсортированных по возрастанию, и целое число&nbsp;</span>target<span style=\"color: rgb(23, 43, 77);\">, необходимо написать функцию для поиска&nbsp;</span>target<span style=\"color: rgb(23, 43, 77);\">&nbsp;в&nbsp;</span>nums<span style=\"color: rgb(23, 43, 77);\">. Если&nbsp;</span>target<span style=\"color: rgb(23, 43, 77);\">&nbsp;существует, надо вернуть его индекс. В противном случае вернуть&nbsp;</span>-1.</p>",
        "time": 15,
        "title": "Бинарный поиск"
    },
    {
        "ID": 2044,
        "answers": [
            {
                "content": "<ul><li>Оба метода вызываются во время создания экземпляра класса.</li><li>__new__&nbsp;вызывается перед&nbsp;__init__</li><li>__new__&nbsp;по сути, конструктор,&nbsp;__init__ инициализатор&nbsp;</li><li>__new__&nbsp;статический метод класса запись&nbsp;__new__(cls, *args, **kwargs)</li><li>__new__&nbsp;возвращает инстанс класса,&nbsp;__init__ не возвращает ничего</li><li><br></li></ul><p>Пример использования&nbsp;__new__ singleton</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Singleton</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__new__</span>(<span class=\"hljs-params\">cls, *args, **kwargs</span>):\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">hasattr</span>(cls, <span class=\"hljs-string\">'instance'</span>):\n            cls.instance = <span class=\"hljs-built_in\">super</span>().__new__(cls, *args, **kwargs)\n        <span class=\"hljs-keyword\">return</span> cls.instance\n\n\nobj1 = Singleton()\nobj2 = Singleton()\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">id</span>(obj1), <span class=\"hljs-built_in\">id</span>(obj2), obj1 <span class=\"hljs-keyword\">is</span> obj2) \n</pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T14:51:13Z",
        "interviewCount": 38,
        "question": "<p>Расскажи об отличиях __new__ и __init__ .</p><p>Приведи пример использования __new__.</p><p><br></p><p><strong style=\"color: rgb(23, 43, 77);\">Дополнительный вопрос:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Что такое self?</span></p><p><strong>Ответ на дополнительный вопрос:</strong></p><p>self - это специальный параметр, который передается первым аргументом в метод класса и представляет собой ссылку на экземпляр класса</p>",
        "time": 7,
        "title": "Теоретический вопрос о отличиях __new__ и __init__"
    },
    {
        "ID": 2043,
        "answers": [
            {
                "content": "<p>Фикстуры в Pytest - это специальные функции, которые предоставляют подготовленное состояние или ресурсы для выполнения тестов. Они позволяют изолировать код тестов от деталей подготовки данных или настроек.</p><p>Пример:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">import</span> pytest\n\n\n<span class=\"hljs-meta\">@pytest.fixture</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">setup_data</span>():\n&nbsp; &nbsp; data = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> data\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_sum_values</span>(<span class=\"hljs-params\">setup_data</span>):\n&nbsp; &nbsp; total = <span class=\"hljs-built_in\">sum</span>(setup_data)\n&nbsp; &nbsp; assert total == 15 \n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T14:29:21Z",
        "interviewCount": 431,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Расскажите о фикстурах в Pytest и как их использовать.</span></p><p>Приведите пример.</p><p><br></p><p><strong style=\"color: rgb(0, 26, 52);\">Дополнительный вопрос 1:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">&nbsp;Какой декоратор используется для создания фикстур в Pytest , какие аргументы он принимает?</span></p><p><strong style=\"color: rgb(23, 43, 77);\">Ответ на доп. вопрос 1:</strong></p><p>Для создания фикстур используется декоратор `@pytest.fixture`, принимаемые аргументы:&nbsp;</p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>scope: Этот аргумент определяет область видимости фикстуры. Допустимые значения:&nbsp;'function'&nbsp;(по умолчанию),&nbsp;'class',&nbsp;'module',&nbsp;'session'. Например:&nbsp;@pytest.fixture(scope='module').</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>params: Позволяет параметризовать фикстуру, чтобы она могла предоставлять разные данные или ресурсы для разных тестов. Например:&nbsp;@pytest.fixture(params=[1, 2, 3]).</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>autouse: Если&nbsp;True, фикстура будет автоматически использоваться всеми тестами без явного указания в аргументах тестов. Например:&nbsp;@pytest.fixture(autouse=True). Добавить вопрос: \"Чем чревато использование&nbsp;autouse=True.\"</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>ids: Позволяет задать идентификаторы для параметризованных тестов, которые будут отображаться в отчетах о выполнении тестов.</li></ol><p><br></p><p><strong style=\"color: rgb(0, 26, 52);\">Дополнительный вопрос 2:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Что такое \"yield\" в контексте фикстур?</span></p><p><strong style=\"color: rgb(23, 43, 77);\">Ответ на доп. вопрос 2:</strong></p><p>Вместо того чтобы возвращать значение из фикстуры, вы можете использовать оператор&nbsp;yield&nbsp;внутри функции-фикстуры. Это позволяет выполнить код до и после выполнения теста, а затем вернуть значение после завершения теста. Это может быть полезно, например, для подготовки и очистки ресурсов.</p><p><br></p><p><br></p><p><br></p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">import pytest</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># Фикстура, создающая данные</div><div class=\"ql-code-block\" data-language=\"plain\">@pytest.fixture</div><div class=\"ql-code-block\" data-language=\"plain\">def data_fixture():</div><div class=\"ql-code-block\" data-language=\"plain\">    data = [1, 2, 3, 4, 5]</div><div class=\"ql-code-block\" data-language=\"plain\">    return data</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\"># Фикстура, использующая данные из другой фикстуры</div><div class=\"ql-code-block\" data-language=\"plain\">@pytest.fixture</div><div class=\"ql-code-block\" data-language=\"plain\">def process_data(data_fixture):</div><div class=\"ql-code-block\" data-language=\"plain\">    processed_data = [x * 2 for x in data_fixture]</div><div class=\"ql-code-block\" data-language=\"plain\">    return processed_data</div><div class=\"ql-code-block\" data-language=\"plain\"><br></div><div class=\"ql-code-block\" data-language=\"plain\">def test_data_processing(process_data):</div><div class=\"ql-code-block\" data-language=\"plain\">    assert len(process_data) == 5</div><div class=\"ql-code-block\" data-language=\"plain\">    assert process_data == [2, 4, 6, 8, 10] </div></pre>",
        "time": 4,
        "title": "Теоретический вопрос о фикстурах в Pytest"
    },
    {
        "ID": 2042,
        "answers": [
            {
                "content": "<p>Pytest - это фреймворк для тестирования в Python. Он позволяет создавать и запускать тесты с удобным синтаксисом. </p><p>Пример:</p><pre class=\"ql-syntax\" spellcheck=\"false\">def <span class=\"hljs-title function_\">test_addition</span><span class=\"hljs-params\">()</span>:\n&nbsp; &nbsp; result = <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">3</span>\n&nbsp; &nbsp; assert result == 5 \n</pre>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T14:20:48Z",
        "interviewCount": 185,
        "question": "<p>Расскажите про функционал Pytest.</p><p><br></p><p><strong>Дополнительный вопрос 1:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Как запустить все тесты в директории с помощью Pytest?</span></p><p><strong style=\"color: rgb(23, 43, 77);\">Ответ на доп. вопрос 1:</strong></p><p>Вы можете выполнить команду `pytest` в командной строке, указав путь к директории с тестами.</p><p><br></p><p><strong>Дополнительный вопрос 2:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Что такое фикстуры в Pytest и для чего они используются?</span></p><p><strong style=\"color: rgb(23, 43, 77);\">Ответ на доп. вопрос 2:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Фикстуры - это функции, которые создают предварительные условия для тестов. Они могут быть использованы для подготовки данных или настроек перед выполнением тестов.</span></p><p><br></p><p><strong>Дополнительный вопрос 3:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Как можно передать фикстуру в тестовую функцию?</span></p><p><strong style=\"color: rgb(23, 43, 77);\">Ответ на доп. вопрос 3:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Фикстуры передаются в тестовую функцию как аргументы. Название аргумента должно соответствовать имени фикстуры.</span></p><p><br></p><p><strong>Дополнительный вопрос 4:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Как можно параметризовать тесты с использованием Pytest?</span></p><p><strong style=\"color: rgb(23, 43, 77);\">Ответ на доп. вопрос 4:</strong></p><p>Для параметризации тестов можно использовать декоратор <em class=\"hljs-meta\">@pytest</em><em>.</em><em class=\"hljs-property\">mark</em><em>.</em><em class=\"hljs-property\">parametrize</em> и передать набор параметров и ожидаемых результатов.</p>",
        "time": 5,
        "title": "Теоретический вопрос про функционал Pytest"
    },
    {
        "ID": 2041,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Магические методы, также известные как специальные методы или методы перегрузки операторов, это методы с определенными именами, начинающимися и заканчивающимися двойным подчеркиванием (например,&nbsp;</span><em style=\"color: rgb(23, 43, 77);\">init</em><span style=\"color: rgb(23, 43, 77);\">,&nbsp;</span><em style=\"color: rgb(23, 43, 77);\">str</em><span style=\"color: rgb(23, 43, 77);\">,&nbsp;</span><em style=\"color: rgb(23, 43, 77);\">add</em>)<span style=\"color: rgb(23, 43, 77);\">. Они позволяют определить поведение объектов при выполнении определенных операций, таких как создание объекта, преобразование в строку или выполнение операций сложения.</span></p><p><br></p><p>Пример метода:</p><pre class=\"ql-syntax\" spellcheck=\"false\">class MyClass:\n&nbsp; &nbsp; def __init__(self, value):\n&nbsp; &nbsp; &nbsp; &nbsp; self.value = value&nbsp; &nbsp; \n    \n    def __add__(self, other):\n&nbsp; &nbsp; &nbsp; &nbsp; return self.value + other.value\n\nobj1 = MyClass(5)\nobj2 = MyClass(10)\nresult = obj1 + obj2\nprint(result) &nbsp;# Output: 15\n \n</pre><p><br></p>",
                "difficulty": "GRADE_SCREENING"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T14:14:06Z",
        "interviewCount": 184,
        "question": "<p>Что такое магические методы в Python?</p><p>Назови несколько из них, что они делают?</p>",
        "time": 4,
        "title": "Магические методы в Python"
    },
    {
        "ID": 2040,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Инкапсуляция в Python используется для скрытия данных и методов внутри класса и предоставления контролируемого доступа к ним. Она реализуется с помощью модификаторов доступа и соглашений о наименовании.</span></p><p><span style=\"color: rgb(23, 43, 77);\">Пример:</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">class MyClass:\n    _private_attr = 1  # Приватный атрибут класса\n    __protected_attr = 2  # Защищенный атрибут класса\n    \n    def __init__(self):\n        self._private_var = 10  # Приватная переменная\n\n    def public_method(self):\n        print(\"Public method\")\n\n    def _private_method(self):  # Приватный метод\n        print(\"Private method\") \n    \n    def __protected_method(self):  # Защищенный метод\n &nbsp; &nbsp; &nbsp; &nbsp;print(\"Protected method\") \n\nmy_class = MyClass()\nprint(my_class.__protected_attr) #AttributeError\n</pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T12:51:03Z",
        "interviewCount": 148,
        "question": "<p>Зачем нужна инкапсуляция и как реализовать ее на практике в Python?</p><p><span style=\"color: rgb(23, 43, 77);\">Можно попросить привести пример кода.</span></p><p><br></p><p><strong style=\"color: rgb(23, 43, 77);\">Дополнительный вопрос 1:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Какие модификаторы доступа используются в Python для реализации инкапсуляции?</span></p><p><strong style=\"color: rgb(23, 43, 77);\">Ответ на доп. вопрос 1:</strong></p><p>В Python используются модификаторы доступа: public, protected и private, хотя они основаны на соглашениях, а не на явных ограничениях языка.</p><p><br></p><p><strong style=\"color: rgb(23, 43, 77);\">Дополнительный вопрос 2:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Какие соглашения о наименовании применяются для обозначения приватных атрибутов и методов в Python?</span></p><p><strong style=\"color: rgb(23, 43, 77);\">Ответ на доп. вопрос 2:</strong></p><p>Приватные атрибуты и методы обычно именуются с префиксом \"_\".</p><p><br></p><p><strong style=\"color: rgb(23, 43, 77);\">Дополнительный вопрос 3:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Можно ли получить доступ к приватным атрибутам и методам извне класса?</span></p><p><strong style=\"color: rgb(23, 43, 77);\">Ответ на доп. вопрос 3:</strong></p><p>В Python приватные атрибуты и методы все равно доступны извне, но их использование считается неявным нарушением соглашений и может привести к ошибкам или неожиданным результатам.</p>",
        "time": 10,
        "title": "Инкапсуляция и реализация ее на практике"
    },
    {
        "ID": 2039,
        "answers": [
            {
                "content": "<p><strong>Компилятор</strong> - это программа, которая преобразует исходный код на языке программирования в машинный код или байт-код, создавая исполняемый файл. Компиляция происходит один раз перед запуском программы.</p><p><strong>Интерпретатор</strong> - это программа, которая читает и анализирует исходный код на языке программирования и выполняет его построчно во время выполнения программы, без создания отдельного исполняемого файла.</p><p><br></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T12:47:48Z",
        "interviewCount": 65,
        "question": "<p>Расскажите разницу между компилятором и интерпретатором.</p><p><br></p><p><strong style=\"color: rgb(23, 43, 77);\">Дополнительные вопрос 1:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Какой подход более эффективен с точки зрения производительности: компиляция или интерпретация?</span></p><p><strong>Ответ на доп. вопрос 1:</strong></p><p>Компиляция обычно более эффективна с точки зрения производительности, так как машинный код выполняется напрямую компьютером без дополнительных шагов интерпретации.</p><p><br></p><p><strong style=\"color: rgb(23, 43, 77);\">Дополнительные вопрос 2:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Какие языки программирования обычно компилируются, а какие интерпретируются?</span></p><p><strong>Ответ на доп. вопрос 2:</strong></p><p>Языки, такие как C, C++, Java, компилируются, тогда как Python, JavaScript, Ruby являются интерпретируемыми.</p><p><br></p><p><strong style=\"color: rgb(23, 43, 77);\">Дополнительные вопрос 3:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Существуют ли гибридные подходы, которые объединяют компиляцию и интерпретацию?</span></p><p><strong>Ответ на доп. вопрос 3:</strong></p><p>Да, существуют гибридные подходы, называемые JIT (Just-In-Time) компиляцией, где исходный код частично компилируется во время выполнения программы для повышения производительности.</p>",
        "time": 4,
        "title": "Разница между компилятором и интерпретатором"
    },
    {
        "ID": 2038,
        "answers": [
            {
                "content": "<pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">class Car:</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-keyword\">def</span> <span class=\"ql-token hljs-title\">__init__</span>(<span class=\"ql-token hljs-params\">self, color: str, price: float</span>):</div><div class=\"ql-code-block\" data-language=\"python\">        self.color = color</div><div class=\"ql-code-block\" data-language=\"python\">        self.price = price</div><div class=\"ql-code-block\" data-language=\"python\">    </div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-keyword\">def</span> <span class=\"ql-token hljs-title\">get_final_price</span>(<span class=\"ql-token hljs-params\">self</span>) -&gt; <span class=\"ql-token hljs-built_in\">float</span>:</div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">if self.color == \"красный\":</span></div><div class=\"ql-code-block\" data-language=\"python\">            <span class=\"ql-token hljs-keyword\">return self.price * 1.15</span></div><div class=\"ql-code-block\" data-language=\"python\">    </div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">return self.price</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-keyword\">class HeavyCar(Car):</span></div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-keyword\">def __init__(self, color: str, price: float, has_trailer: bool):</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-built_in\">super().__init__(color, price)</span></div><div class=\"ql-code-block\" data-language=\"python\">        self.has_trailer = has_trailer</div><div class=\"ql-code-block\" data-language=\"python\">    </div><div class=\"ql-code-block\" data-language=\"python\">    <span class=\"ql-token hljs-keyword\">def get_final_price(self) -&gt; float:</span></div><div class=\"ql-code-block\" data-language=\"python\">        koef = <span class=\"ql-token hljs-number\">1.0</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">if self.color == \"красный\":</span></div><div class=\"ql-code-block\" data-language=\"python\">            koef += <span class=\"ql-token hljs-number\">0.15</span></div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">if self.has_trailer is True:</span></div><div class=\"ql-code-block\" data-language=\"python\">            koef += <span class=\"ql-token hljs-number\">0.25</span></div><div class=\"ql-code-block\" data-language=\"python\">    </div><div class=\"ql-code-block\" data-language=\"python\">        <span class=\"ql-token hljs-keyword\">return self.price * koef</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div></pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T12:14:20Z",
        "interviewCount": 290,
        "question": "<ol><li data-list=\"ordered\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Написать класс Car, у которого есть свойства - color (текст), price (нецелое число) . Реализовать метод get_final_price - если цвет \"красный\", то цена на 15% дороже от базовой (price).</li><li data-list=\"ordered\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Создать класс HeavyCar, унаследованный от Car, Добавить новое свойство - has_trailer (признак того, есть прицеп; булево). Переопределить метод get_final_price: учесть, что если у автомобиля есть прицеп, то цена на 25% дороже от базовой (price).</li></ol>",
        "time": 15,
        "title": "Задача на знание ООП"
    },
    {
        "ID": 2037,
        "answers": [
            {
                "content": "<p>Объектно - ориентированное программирование (ООП) - методология программирования, основанная на представлении программы в виде совокупности объектов, каждый из которых является экземпляром определённого класса, а классы образуют иерархию наследования.</p><p><br></p><p><br></p><p>Основные принципы ООП:</p><p><span style=\"color: windowtext;\">Инкапсуляция </span><span style=\"color: rgb(17, 17, 17);\">— это контроль доступа к полям и методам объекта. Под контролем доступа подразумевается не только можно/нельзя, но и различные валидации, вычисления и прочее динамическое поведение. </span></p><p><span style=\"color: windowtext;\">Наследование</span><span style=\"color: rgb(17, 17, 17);\"> — это механизм системы, который позволяет наследовать одними классами свойства и поведение других классов для дальнейшего расширения или модификации. </span></p><p><span style=\"color: windowtext;\">Полиморфизм</span><span style=\"color: rgb(17, 17, 17);\"> — свойство системы, позволяющее иметь множество реализаций одного интерфейса.</span></p><p>Абстракция - для выделения в моделируемом предмете важного для решения конкретной задачи по предмету, в конечном счёте — контекстное понимание предмета, формализуемое в виде класса.</p><p><br></p>",
                "difficulty": "GRADE_16"
            },
            {
                "content": "<p>Может дополнить о плюсах ООП.</p><p>Преимущества ООП:</p><ul><li>Возможность легкой модификации, при грамотном анализе и проектировании</li><li>Возможность отката при наличии версий</li><li>Более легкая расширяемость</li><li>Более естественная декомпозиция программного обеспечения, которая существенно облегчает его разработку.</li><li>Сокращение количества межмодульных вызовов и уменьшение объемов информации, передаваемой между модулями.</li><li>Увеличивается показатель повторного использования кода.</li></ul><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T12:07:05Z",
        "interviewCount": 328,
        "question": "<p>Расскажите, что такое ООП?</p><p><span style=\"color: rgb(17, 17, 17);\">Расскажите основные принципы ООП</span></p>",
        "time": 3,
        "title": "Принципы ООП"
    },
    {
        "ID": 2036,
        "answers": [
            {
                "content": "<p>Зависит от типа данных передается в переменной.</p><p><br></p><p><strong>Неизменяемые</strong>&nbsp;объекты передаются по значению. Это значит, что при изменении значения переменной будет создан новый объект. К этому типу относятся:</p><ul><li>числовые данные (int, float, complex)</li><li>символьные строки (str)</li><li>кортежи (tuple)&nbsp;</li></ul><p><strong>Изменяемые</strong>&nbsp;объекты передаются по ссылке. Это значит, что при изменении значения переменной объект будет изменен. К этому типу относятся:</p><ul><li>списки (list)</li><li>множества (set)</li><li>словари (dict)</li></ul>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T12:03:36Z",
        "interviewCount": 117,
        "question": "<p>Какие переменные в python передаются по ссылке, а какие по значению?</p>",
        "time": 5,
        "title": "Теоретический вопрос о разнице между ссылкой и значением."
    },
    {
        "ID": 2035,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">def bubble_sort(arr):\n    n = len(arr)\n    \n    for i in range(n):\n        swapped = False\n        \n        for j in range(0, n-i-1):\n            if arr[j] &gt; arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                swapped = True\n        \n        if not swapped:\n            break\n    \n    return arr \n</pre><p><br></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T11:25:44Z",
        "interviewCount": 35,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Напишите простую функцию для сортировки массива простых чисел пузырьком.</span></p>",
        "time": 10,
        "title": "Сортировка массива чисел пузырьком."
    },
    {
        "ID": 2034,
        "answers": [
            {
                "content": "<p>Может описать/знает что это такое, может быть как работает.</p><p><br></p><p>Сортировка пузырьком - это простой алгоритм сортировки, который проходит по списку элементов и сравнивает пары соседних элементов. Если элементы находятся в неправильном порядке, то они меняются местами. Этот процесс повторяется до тех пор, пока весь список не будет отсортирован.</p><p>В процессе выполнения данного алгоритма элементы с большими значениями оказываются в конце списка, а элементы с меньшими значениями постепенно перемещаются по направлению к началу списка. Образно говоря, тяжелые элементы падают на дно, а легкие медленно всплывают подобно пузырькам воздуха. При этом в начале сортировки отсортированным становится конец списка, а не его начало.</p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T11:24:33Z",
        "interviewCount": 4,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Опишите сортировку пузырьком.</span></p>",
        "time": 10,
        "title": "Теоретический вопрос о сортировке пузырьком"
    },
    {
        "ID": 2033,
        "answers": [
            {
                "content": "<p>XML (eXtensible Markup Language) - это язык разметки, который используется для представления структурированных данных. Он представляет данные в виде дерева элементов с помощью тегов и атрибутов.&nbsp;</p><p>Преимущества XML по сравнению с JSON для сериализации и десериализации данных:</p><ol><li>Структурированность: XML позволяет представлять сложные структуры данных с использованием вложенных элементов и иерархии. Это особенно полезно, когда данные имеют сложную структуру или требуют дополнительной метаинформации.</li><li>Расширяемость: XML является расширяемым языком, что означает, что вы можете определить собственные теги и структуры данных, которые соответствуют вашим потребностям. Это делает XML гибким для различных сценариев и требований.</li><li>Читаемость: XML имеет человекочитаемый формат, который легко понять и интерпретировать. Это полезно при отладке, а также при сотрудничестве с другими разработчиками или при обмене данными между системами.</li></ol><p><br></p><p>Недостатки XML по сравнению с JSON для сериализации и десириализации данных:</p><ol><li>Объем данных: XML обычно имеет больший объем данных по сравнению с JSON из-за использования тегов и атрибутов. Это может привести к увеличению размера файлов или объему передаваемых данных.</li><li>Сложность: XML имеет более сложный синтаксис и требует строгой структуры данных. Это может усложнить процесс разработки и обработки данных.</li><li>Производительность: Обработка XML может быть более ресурсоемкой операцией по сравнению с JSON, особенно при работе с большими объемами данных. Это может повлиять на производительность приложений.</li></ol><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T11:20:57Z",
        "interviewCount": 5,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Что такое XML и какие преимущества и недостатки у него по сравнению с JSON для сериализации и десериализации данных?</span></p>",
        "time": 5,
        "title": "Сравнение XML и JSON для сериализации и десиреализации данных."
    },
    {
        "ID": 2032,
        "answers": [
            {
                "content": "<p>Сериализация и десериализация - это процессы преобразования данных в определенный формат для передачи или сохранения, а затем восстановления данных из этого формата обратно в исходную структуру данных. В Python для сериализации и десериализации данных можно использовать различные форматы данных, включая:</p><ol><li>JSON (JavaScript Object Notation): JSON - это легкий формат обмена данными, основанный на синтаксисе объектов JavaScript. Он широко используется для передачи данных между клиентом и сервером, а также для сохранения и загрузки данных.</li><li>XML (eXtensible Markup Language): XML - это язык разметки, который позволяет представлять данные в структурированном формате. В Python есть модуль&nbsp;xml.etree.ElementTree, который предоставляет функции для сериализации и десериализации данных в формате XML.</li><li>YAML (YAML Ain't Markup Language): YAML - это формат сериализации данных, который часто используется для конфигурационных файлов. В Python есть модуль&nbsp;pyyaml, который позволяет сериализовать и десериализовать данные в формате YAML.</li></ol><p><br></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T11:17:38Z",
        "interviewCount": 54,
        "question": "<p>Что такое сериализация и десериализация данных? Какие форматы данных можно использовать для сериализации и десериализации в Python?</p><p><br></p>",
        "time": 5,
        "title": "Теоретический вопрос по сериализации и десериализации данных."
    },
    {
        "ID": 2031,
        "answers": [
            {
                "content": "<p>Возможный ответ:</p><pre class=\"ql-syntax\" spellcheck=\"false\">import sys\n\n\ndef filter_strings(strings, is_unique):\n    filtered_strings = []\n\n    for string in strings:\n        unique_chars = set(string)\n\n        if is_unique and len(unique_chars) == len(string):\n            filtered_strings.append(string)\n        elif not is_unique and len(unique_chars) != len(string):\n            filtered_strings.append(string)\n\n    return filtered_strings\n\n\ndef main():\n    # Проверяем, были ли переданы аргументы командной строки\n    if len(sys.argv) &gt; 1:\n        # Получаем аргументы командной строки\n        strings = input(\"Введите список строк через запятую(пр. hello,world): \").split(\",\")\n        is_unique = sys.argv[1].lower() == \"true\"\n\n        # Фильтруем строки\n        filtered_strings = filter_strings(strings, is_unique)\n\n        # Выводим отфильтрованные строки на консоль\n        for string in filtered_strings:\n            print(string)\n    else:\n        print(\"Не были переданы аргументы командной строки.\")\n\n\nif __name__ == \"__main__\":\n    main()\n</pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T11:13:17Z",
        "interviewCount": 1,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Написать консольное приложение, которое принимает на вход список строк + аргумент is_unique(True или False) и выводит на экран только те строки, которые содержат только уникальные символы(при True) или только с неуникальными символами(при False)</span></p>",
        "time": 10,
        "title": "Написание консольного приложения (усложненная задача)"
    },
    {
        "ID": 2030,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Возможный ответ:</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">num1 = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Введите первое число: \"</span>))\nnum2 = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Введите второе число: \"</span>))\n\nresult = num1 + num2\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"Сумма чисел <span class=\"hljs-subst\">{num1}</span> и <span class=\"hljs-subst\">{num2}</span> равна <span class=\"hljs-subst\">{result}</span>\"</span>)\n \n</pre><p>Ответ д<span style=\"color: rgb(23, 43, 77);\">олжен проходить проверку:</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">assert num1 + num2 == result\n</pre><p><br></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T11:11:35Z",
        "interviewCount": 6,
        "question": "<p>Написать простое консольное приложение, которое просит пользователя ввести два числа и выводит на экран их сумму.</p>",
        "time": 10,
        "title": "Написание консольного приложения"
    },
    {
        "ID": 2029,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(0, 26, 52);\">Это хорошо знакомая конструкция</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'1.txt'</span>, <span class=\"hljs-string\">'w'</span>) <span class=\"hljs-keyword\">as</span> file:\n    file.write(<span class=\"hljs-string\">\"Hello, Ozon!\"</span>)\n</pre><p><span style=\"color: rgb(0, 26, 52);\">После завершения блока - файл \"закроется\" в любом случае, даже если будет внутри Exception.</span></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T11:03:23Z",
        "interviewCount": 243,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Что такое и зачем нужен менеджер контекста?</span></p><p><span style=\"color: rgb(23, 43, 77);\">Приведите пример и описание как работает выход из блока с ним.</span></p>",
        "time": 5,
        "title": "Теоретический вопрос о контекстном менеджере (contextmanager)"
    },
    {
        "ID": 2028,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Через магические методы </span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">__enter__, __exit__, __open__</code><span style=\"color: rgb(23, 43, 77);\">:</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyManager</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__enter__</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">pass</span>   \n \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__exit__</span>(<span class=\"hljs-params\">self, <span class=\"hljs-built_in\">type</span>, value, traceback</span>):\n        <span class=\"hljs-keyword\">pass</span>\n\n<span class=\"hljs-keyword\">with</span> MyManager <span class=\"hljs-keyword\">as</span> mgr:\n    <span class=\"hljs-keyword\">pass</span> \n</pre><p><br></p><p><span style=\"color: rgb(23, 43, 77);\">Через декоратор:</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">from</span> contextlib <span class=\"hljs-keyword\">import</span> contextmanager\n\n<span class=\"hljs-meta\">@contextmanager</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">tag</span>(<span class=\"hljs-params\">name</span>):\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f'&lt;<span class=\"hljs-subst\">{name}</span>&gt;'</span>)\n    yieldprint(<span class=\"hljs-string\">f'&lt;<span class=\"hljs-subst\">{name}</span>&gt;'</span>)\n\n<span class=\"hljs-keyword\">with</span> tag(<span class=\"hljs-string\">'h1'</span>):\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'Hello, Ozon!'</span>) \n\n<span class=\"hljs-comment\">#Результат выполнения:</span>\n<span class=\"hljs-comment\">#﻿&lt;h1&gt;</span>\n<span class=\"hljs-comment\">#Hello, Ozon!</span>\n<span class=\"hljs-comment\">#&lt;h1&gt;</span>\n\n\n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T10:59:51Z",
        "interviewCount": 300,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Рассказать что такое контекстный менеджер, какие задачи решает?</span></p><p><br></p><p><strong>Дополнительный вопрос 1:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Что делает метод&nbsp;</span><em style=\"color: rgb(23, 43, 77);\">enter</em><span style=\"color: rgb(23, 43, 77);\">&nbsp;в контекст-менеджере?</span></p><p><strong>Ответ на доп. вопрос 1:</strong></p><p>Метод&nbsp;<em>enter</em>&nbsp;выполняет код, который должен быть выполнен при входе в контекст, например, инициализацию ресурсов.</p><p><br></p><p><strong>Дополнительный вопрос 2:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Что делает метод&nbsp;</span><em style=\"color: rgb(23, 43, 77);\">exit</em><span style=\"color: rgb(23, 43, 77);\">&nbsp;в контекст-менеджере?</span></p><p><strong>Ответ на доп. вопрос 2:</strong></p><p>Метод&nbsp;<em>exit</em>&nbsp;выполняет код, который должен быть выполнен при выходе из контекста, например, освобождение ресурсов или обработку исключений.</p><p><br></p><p><strong>Дополнительный вопрос 3:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Какие преимущества использования контекст-менеджера?</span></p><p><strong>Ответ на доп. вопрос 3:</strong></p><p>Использование контекст-менеджера позволяет гарантировать корректное открытие и закрытие ресурсов, обработку исключений и упрощает код благодаря автоматическому выполнению определенных действий при входе и выходе из контекста.</p>",
        "time": 3,
        "title": "Рассказать про контекстный менеджер (contextmanager)"
    },
    {
        "ID": 2027,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-title class_\">Hi</span>\n(<span class=\"hljs-string\">'Ozon'</span>, {<span class=\"hljs-string\">'a'</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'b'</span>: <span class=\"hljs-number\">2</span>})\n{<span class=\"hljs-string\">'pi'</span>: <span class=\"hljs-number\">3.14</span>, <span class=\"hljs-string\">'e'</span>: <span class=\"hljs-number\">2.71</span>}&nbsp;\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T10:55:13Z",
        "interviewCount": 458,
        "question": "<p>Необходимо представить результат выражений:</p><pre class=\"ql-syntax\" spellcheck=\"false\">def <span class=\"hljs-keyword\">func</span>(val, <span class=\"hljs-operator\">*</span>args, <span class=\"hljs-operator\">**</span>kwargs):\n    <span class=\"hljs-built_in\">print</span>(val)\n    <span class=\"hljs-built_in\">print</span>(args)\n    <span class=\"hljs-built_in\">print</span>(kwargs)\n<span class=\"hljs-keyword\">\nfunc</span>(<span class=\"hljs-string\">\"Hi\"</span>, <span class=\"hljs-string\">\"Ozon\"</span>, {<span class=\"hljs-string\">\"a\"</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"b\"</span>: <span class=\"hljs-number\">2</span>}, pi<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">3.14</span>, e<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">2.71</span>) <span class=\"hljs-comment\">// code placeholder</span>\n</pre><p><br></p>",
        "time": 3,
        "title": "Распаковка аргументов в Python"
    },
    {
        "ID": 2026,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">func</span>(<span class=\"hljs-params\">val, *args, **kwargs</span>): \n    <span class=\"hljs-built_in\">print</span>(val)\n    <span class=\"hljs-built_in\">print</span>(args)\n    <span class=\"hljs-built_in\">print</span>(kwargs)\n</pre>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T10:52:05Z",
        "interviewCount": 195,
        "question": "<p>Необходимо написать функцию с переменным количеством аргументов, привести пример работы.</p>",
        "time": 5,
        "title": "Написание функции с переменным количество аргументов"
    },
    {
        "ID": 2025,
        "additional": "<p>Q: Исправьте скрипт, что бы получить корректный результат</p><p>A: </p><pre class=\"ql-syntax\" spellcheck=\"false\">func_list = [lambda x, i=i: x*i for i in range(9)]\nfor f in func_list:\n&nbsp; &nbsp; print(f(2))&nbsp;\n</pre>",
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">16\n16\n16\n16\n16\n16\n16\n16\n16\n</pre><p><br></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T10:48:47Z",
        "interviewCount": 83,
        "question": "<p>Имеется список сформированный с помощью лямбда функции, написать, что будет выведено на экран после запуска скрипта&nbsp;</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">func_list = [lambda x: x*i for i in range(9)]\nfor f in func_list:\n&nbsp; &nbsp; print(f(2)) \n</pre>",
        "time": 5,
        "title": "Работа с lambda-функциями"
    },
    {
        "ID": 2024,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">get_name = lambda d: d[<span class=\"hljs-string\">\"имя\"</span>] &nbsp;\nnames = list(<span class=\"hljs-keyword\">map</span>(get_name, people))\n\n<span class=\"hljs-built_in\">print</span>(names) # [<span class=\"hljs-string\">'Алексей'</span>, <span class=\"hljs-string\">'Борис'</span>, <span class=\"hljs-string\">'Валерия'</span>]\n</pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T10:46:40Z",
        "interviewCount": 39,
        "question": "<p>Написать лямбда-функцию для возврата значения ключа \"имя\" из словаря, и получить с помощью нее список имен.</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">people = [\n&nbsp; {\"имя\": \"Алексей\", \"возраст\": 32},\n&nbsp; {\"имя\": \"Борис\", \"возраст\": 27},\n&nbsp; {\"имя\": \"Валерия\", \"возраст\": 21}\n]\n \n</pre><p><br></p>",
        "time": 5,
        "title": "Использование lambda-функции для возврата значения ключа из словаря"
    },
    {
        "ID": 2023,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">is_even = lambda x: True if x % 2 == 0 else False\n\nПример использования:\n\nprint(is_even(4)) # True\nprint(is_even(7)) # False \n</pre><p><br></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T10:44:39Z",
        "interviewCount": 51,
        "question": "<p>Написать lambda-функцию для определения четности числа</p>",
        "time": 5,
        "title": "Использование lambda-функции для определения четности числа "
    },
    {
        "ID": 2022,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">import json\n\nstudents_json = '''{\n    \"students\": [\n        {\n            \"name\": \"John\",\n            \"age\": 18,\n            \"courses\": [\n                {\n                    \"name\": \"Math\",\n                    \"grade\": 4\n                },\n                {\n                    \"name\": \"English\",\n                    \"grade\": 5\n                }\n            ]\n        },\n        {\n            \"name\": \"Jane\",\n            \"age\": 19,\n            \"courses\": [\n                {\n                    \"name\": \"Math\",\n                    \"grade\": 5\n                },\n                {\n                    \"name\": \"English\",\n                    \"grade\": 4\n                }\n            ]\n        }\n    ]\n}'''\n\nstudents_dict = json.loads(students_json)\n\nnum_students = len(students_dict[\"students\"])\nprint(\"Количество студентов:\", num_students)\n\ntotal_age = 0\nfor student in students_dict[\"students\"]:\n    total_age += student[\"age\"]\n\navg_age = total_age / num_students\nprint(\"Средний возраст студентов:\", avg_age)\n\ncourse_grades = {}\nfor student in students_dict[\"students\"]:\n    for course in student[\"courses\"]:\n        course_name = course[\"name\"]\n        grade = course[\"grade\"]\n        if course_name not in course_grades:\n            course_grades[course_name] = [grade]\n        else:\n            course_grades[course_name].append(grade)\n\nfor course_name, grades in course_grades.items():\n    avg_grade = sum(grades) / len(grades)\n    print(\"Средний балл по курсу\", course_name + \":\", avg_grade)\n\nall_grades = []\nfor course_grades in course_grades.values():\n    all_grades += course_grades\navg_all = sum(all_grades) / len(all_grades)\nprint(\"Общий средний балл по всем курсам:\", avg_all) \n\nassert num_students == 2, \"Количество студентов != 2\"\nassert avg_age == 18.5, \"Средний возраст студентов != 18.5\"\nassert avg_all == 4.5, \"Общий средний балл по всем курсам != 4.5\"\n</pre><p><br></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T10:38:21Z",
        "interviewCount": 125,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Необходимо написать программу, которая принимает на вход JSON-строку с данными о студентах в формате:</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"students\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n        <span class=\"hljs-punctuation\">{</span>\n            <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"John\"</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"age\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">18</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"courses\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n                <span class=\"hljs-punctuation\">{</span>\n                    <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Math\"</span><span class=\"hljs-punctuation\">,</span>\n                    <span class=\"hljs-attr\">\"grade\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">4</span>\n                <span class=\"hljs-punctuation\">},</span>\n                <span class=\"hljs-punctuation\">{</span>\n                    <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"English\"</span><span class=\"hljs-punctuation\">,</span>\n                    <span class=\"hljs-attr\">\"grade\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">5</span>\n                <span class=\"hljs-punctuation\">}</span>\n            <span class=\"hljs-punctuation\">]</span>\n        <span class=\"hljs-punctuation\">},</span>\n        <span class=\"hljs-punctuation\">{</span>\n            <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Jane\"</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"age\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">19</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"courses\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n                <span class=\"hljs-punctuation\">{</span>\n                    <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Math\"</span><span class=\"hljs-punctuation\">,</span>\n                    <span class=\"hljs-attr\">\"grade\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">5</span>\n                <span class=\"hljs-punctuation\">},</span>\n                <span class=\"hljs-punctuation\">{</span>\n                    <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"English\"</span><span class=\"hljs-punctuation\">,</span>\n                    <span class=\"hljs-attr\">\"grade\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">4</span>\n                <span class=\"hljs-punctuation\">}</span>\n            <span class=\"hljs-punctuation\">]</span>\n        <span class=\"hljs-punctuation\">}</span>\n    <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</pre><p><br></p><p><span style=\"color: rgb(23, 43, 77);\">Затем вычисляет и выводит на экран</span></p><p><span style=\"color: rgb(23, 43, 77);\">• количество студентов</span></p><p><span style=\"color: rgb(23, 43, 77);\">• средний возраст студентов</span></p><p><span style=\"color: rgb(23, 43, 77);\">• средний балл по каждому курсу</span></p><p><span style=\"color: rgb(23, 43, 77);\">• общий средний балл по всем курсам</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">Количество студентов: <span class=\"hljs-number\">2</span>\nСредний возраст студентов: <span class=\"hljs-number\">18.5</span>\nСредний балл <span class=\"hljs-keyword\">по</span> курсу Math: <span class=\"hljs-number\">4.5</span>\nСредний балл <span class=\"hljs-keyword\">по</span> курсу English: <span class=\"hljs-number\">4.5</span>\nОбщий средний балл по всем курсам: 4.5 \n</pre>",
        "time": 15,
        "title": "Парсинг Json и вложенные циклы"
    },
    {
        "ID": 2021,
        "answers": [
            {
                "content": "<pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"plain\">while True:</div><div class=\"ql-code-block\" data-language=\"plain\">    word = input('введите слово: ')</div><div class=\"ql-code-block\" data-language=\"plain\">    if 'A' in word:</div><div class=\"ql-code-block\" data-language=\"plain\">        print(word)</div><div class=\"ql-code-block\" data-language=\"plain\">        break </div></pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T10:35:09Z",
        "interviewCount": 57,
        "question": "<p>Необходимо написать программу, которая содержит</p><pre class=\"ql-syntax\" spellcheck=\"false\"> <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">'введите слово: '</span>) \n</pre><p>и проверяет его. В случае если слово содержит букву \"А\" то цикл останавливается и слово печатается</p><p>иначе запрашивает заново input.</p>",
        "time": 7,
        "title": "Цикл WHILE"
    },
    {
        "ID": 2020,
        "answers": [
            {
                "content": "<p>Вариант 1:</p><pre class=\"ql-syntax\" spellcheck=\"false\">result = [<span class=\"hljs-built_in\">dict</span>(<span class=\"hljs-built_in\">zip</span>(columns, row)) <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> rows]\n</pre><p><br></p><p>Вариант 2:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attribute\">result</span> = []\nfor row in rows:\n    d = {}\n    <span class=\"hljs-attribute\">for</span> index, col in enumerate(columns):\n        d[columns[index]] = row[index]\n    result.append(d)\n</pre><p><br></p><p>Вариант 3 (через функцию):</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\">def <span class=\"hljs-title\">my_zip</span><span class=\"hljs-params\">(cols, row)</span>:\n    d =</span> {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> index in <span class=\"hljs-title\">range</span><span class=\"hljs-params\">(len(cols))</span>:\n        d[cols[index]] =</span> row[index]\n    <span class=\"hljs-keyword\">return</span> d\n\nresult = []\n<span class=\"hljs-keyword\">for</span> row in rows:\n    result.<span class=\"hljs-built_in\">append</span>(<span class=\"hljs-built_in\">my_zip</span>(columns, row))\n</pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T10:30:07Z",
        "interviewCount": 34,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Необходимо упаковать следующие данные в список словарей:</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">columns = 'id', 'item_name', 'price'\nrows =&nbsp;[(1, 'Coca-Cola', '100'), (2, 'Pants', '2000')]\n</pre><p>Ожидаемый результат:</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">[ {'id': 1, 'item_name': 'Coca-Cola', 'price': '100'}, {'id': 2, 'item_name': 'Pants', 'price': '2000'}]&nbsp;\n</pre>",
        "time": 8,
        "title": "Цикл FOR"
    },
    {
        "ID": 2019,
        "answers": [
            {
                "content": "<p><span class=\"hljs-number\">1</span>. Цикл <span class=\"hljs-keyword\">for</span> используется для перебора элементов в итерируемом объекте. </p><p>Каждый элемент присваивается переменной на каждой итерации цикла.&nbsp;</p><p><br></p><p>Пример:</p><pre class=\"ql-syntax\" spellcheck=\"false\">\n<span class=\"hljs-attribute\">fruits</span> = [<span class=\"hljs-string\">\"apple\"</span>, <span class=\"hljs-string\">\"banana\"</span>, <span class=\"hljs-string\">\"cherry\"</span>]\nfor fruit in fruits:\n&nbsp; &nbsp; print(fruit)\n\n</pre><p> </p><p><span class=\"hljs-number\">2</span>. Цикл <span class=\"hljs-keyword\">while</span> используется для повторения блока кода, пока условие истинно.&nbsp;</p><p><br></p><p>Пример:</p><pre class=\"ql-syntax\" spellcheck=\"false\">i <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">while</span> i <span class=\"hljs-operator\">&lt;</span> <span class=\"hljs-number\">6</span>:\n&nbsp; &nbsp; <span class=\"hljs-built_in\">print</span>(i)\n&nbsp; &nbsp; i <span class=\"hljs-operator\">+=</span> <span class=\"hljs-number\">1</span>\n\n</pre><p><span class=\"hljs-number\">3</span>. Цикл <span class=\"hljs-keyword\">do</span><span class=\"hljs-operator\">-</span><span class=\"hljs-keyword\">while</span> отсутствует в <span class=\"hljs-type\">Python</span>, </p><p>но его можно эмулировать, используя цикл <span class=\"hljs-keyword\">while</span> с проверкой условия в конце цикла.</p><p><br></p><p>Пример:</p><pre class=\"ql-syntax\" spellcheck=\"false\">i = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n&nbsp; &nbsp; <span class=\"hljs-built_in\">print</span>(i)\n&nbsp; &nbsp; i += <span class=\"hljs-number\">1</span>\n&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> i &gt; <span class=\"hljs-number\">5</span>:\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">break</span>\n</pre><p><br></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T10:25:27Z",
        "interviewCount": 87,
        "question": "<p>Расскажите о видах циклов в python.</p>",
        "time": 5,
        "title": "Теоретический вопрос о циклах в Python"
    },
    {
        "ID": 2018,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">import json\n\nuser_json = '''{\n    \"name\": \"John\",\n    \"age\": 30,\n    \"city\": \"New York\"\n}'''\n\nuser_dict = json.loads(user_json)\nfor k, v in user_dict.items():\n     print('{k}: {v}')\n</pre><p><br></p><p><br></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T10:22:39Z",
        "interviewCount": 20,
        "question": "<p>Написать программу, которая принимает на вход JSON-строку с данными о пользователе в формате:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"John\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"age\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">30</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"city\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"New York\"</span>\n<span class=\"hljs-punctuation\">}</span>\n</pre><p><br></p><p>Затем выводит на экран информацию о пользователе в виде через цикл:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">John</span> \n<span class=\"hljs-attr\">age:</span> <span class=\"hljs-number\">30</span> \ncity: New York \n</pre>",
        "time": 7,
        "title": "Цикл FOR"
    },
    {
        "ID": 2017,
        "answers": [
            {
                "content": "<p>Ошибку в первом случае - потому что строка неизменяемый объект; во втором случае False</p><pre class=\"ql-syntax\" spellcheck=\"false\">&gt;&gt;&gt; \"1234567890\"[6] = 7\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: 'str' object does not support item assignment\n&gt;&gt;&gt; \"1234567890\"[6] == 7\nFalse\n</pre><p><br></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T09:40:39Z",
        "interviewCount": 455,
        "question": "<p>Что выведут строки:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-string\">\"1234567890\"</span>[<span class=\"hljs-number\">6</span>] = <span class=\"hljs-number\">7</span>\n<span class=\"hljs-string\">\"1234567890\"</span>[<span class=\"hljs-number\">6</span>] == <span class=\"hljs-number\">7</span>\n</pre><p><br></p><p><strong>Дополнительный вопрос:</strong></p><p>Как получить <strong>True</strong>?</p><p><br></p><p><strong>Ответ на доп. вопрос:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">\"1234567890\"[6] == '7'\n</pre>",
        "time": 5,
        "title": "Работа со строками: символ в строке"
    },
    {
        "ID": 2016,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">([10, <span class=\"hljs-string\">'a'</span>], [123], [10, <span class=\"hljs-string\">'a'</span>])\n</pre><p>Во втором случае передается объект списка, изменяет он, в первом и третьем изменяется тот, что был создан по-умолчанию.</p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T09:37:01Z",
        "interviewCount": 446,
        "question": "<p>Есть следующая функция, испльзованная в определении переменных:</p><pre class=\"ql-syntax\" spellcheck=\"false\">def <span class=\"hljs-title function_\">append_list</span><span class=\"hljs-params\">(val, list=[])</span>:\n    list.append(val)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">list</span>\n\n<span class=\"hljs-variable\">list1</span> <span class=\"hljs-operator\">=</span> append_list(<span class=\"hljs-number\">10</span>)\nlist2 = append_list(<span class=\"hljs-number\">123</span>,[])\nlist3 = append_list(<span class=\"hljs-string\">'a'</span>)\n</pre><p>Представьте, что вернется при вызове переменных:</p><pre class=\"ql-syntax\" spellcheck=\"false\">list1, list2, list3\n</pre>",
        "time": 5,
        "title": "list append №2"
    },
    {
        "ID": 2015,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">['a', 'b', 2]\n</pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T09:31:18Z",
        "interviewCount": 40,
        "question": "<p>Представьте результаты выражений</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">append_list</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">list</span>=[]</span>):\n    <span class=\"hljs-built_in\">list</span>.append(<span class=\"hljs-built_in\">len</span>(<span class=\"hljs-built_in\">list</span>))\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>\n\nappend_list([<span class=\"hljs-string\">'a'</span>,<span class=\"hljs-string\">'b'</span>])\n</pre><p><br></p><p><strong>Дополнительный вопрос:</strong></p><p>Что вернется, если вызвать <strong><em>append_list() </em></strong>?</p><p><strong>Ответ на доп. вопрос:</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">[0]\n</pre>",
        "time": 4,
        "title": "list append"
    },
    {
        "ID": 2014,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Упадет, уже внутри функции - аннотации не проверяют типы. Python - язык с динамической типизацией. Но это нужно - чтобы статический анализатор мог найти ошибку.</span></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T09:25:57Z",
        "interviewCount": 85,
        "question": "<p>У нас новый питон, в нем можно писать аннотации типов, но они не избавляют нас от ошибок.</p><p>Что будет в результате выполнения?</p><pre class=\"ql-syntax\" spellcheck=\"false\">def sum(a: int, b: int) -&gt; int:\n    return a+b\n    \nsum(\"A\", 1)\n</pre><p><br></p>",
        "time": 3,
        "title": "Python 3.6+: аннотации типов"
    },
    {
        "ID": 2013,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">&gt;&gt;&gt; False and True\nFalse\n&gt;&gt;&gt; 7 &lt; 7 or True\nTrue\n&gt;&gt;&gt; not 2 == 2\nFalse\n</pre><p><br></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-04T09:23:31Z",
        "interviewCount": 533,
        "question": "<p>Представьте результаты выражений</p><pre class=\"ql-syntax\" spellcheck=\"false\">&gt;&gt;&gt; False and True\n&gt;&gt;&gt; 7 &lt; 7 or True\n&gt;&gt;&gt; not 2 == 2\n</pre>",
        "time": 3,
        "title": "False or True"
    },
    {
        "ID": 2012,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Это принципы для эффективного проектирования программных приложений.</span></p><p><span style=\"color: rgb(23, 43, 77);\">S – Принцип единственной ответственности (Single Responsibility Principle),</span></p><p><span style=\"color: rgb(23, 43, 77);\">O – Принцип открытости/закрытости (Open‐Closed Principle),</span></p><p><span style=\"color: rgb(23, 43, 77);\">L – Принцип подстановки Барбары Лисков (Liskov Substitution Principle),</span></p><p><span style=\"color: rgb(23, 43, 77);\">I – Принцип разделения интерфейсов (Interface Segregation Principle),</span></p><p><span style=\"color: rgb(23, 43, 77);\">D – Принцип инверсии зависимостей (Dependency Inversion Principle).</span></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-03T21:06:26Z",
        "interviewCount": 93,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Что такое SOLID? Как расшифровывается данная аббревиатура?</span></p>",
        "time": 4,
        "title": "Теоретический вопрос о принципах SOLID"
    },
    {
        "ID": 2011,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">The Principle of Least Surprise (or Astonishment) — не используйте решения, в которых есть непонятные моменты или которые могут завести в тупик.</span></p><p><span style=\"color: rgb(23, 43, 77);\">Keep It Simple Stupid (KISS) — используйте самое простое решение.</span></p><p><span style=\"color: rgb(23, 43, 77);\">You Ain’t Gonne Need It (YAGNI) — создавайте решения для текущих проблем, а не возможных в будущем.</span></p><p><span style=\"color: rgb(23, 43, 77);\">Don’t Repeat Yourself (DRY) — удаляйте дублирование в коде.</span></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-03T21:04:15Z",
        "interviewCount": 10,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Назовите основные принципы разработки</span></p>",
        "time": 3,
        "title": "Теоретический вопрос о основных принципах разработки"
    },
    {
        "ID": 2010,
        "additional": "<p>Q:&nbsp;<em style=\"color: rgb(127, 140, 141);\">Если мы хотим выполнить обработку исключения в&nbsp;</em><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\"><em>except</em></code><em style=\"color: rgb(127, 140, 141);\">?</em></p><p>A: То есть мы хотим выполнить его только при определенной ошибке? надо написать синтаксис:</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">except TypeError:\n    n = 1\n</pre><p><br></p>",
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(52, 73, 94);\">Напечатается 'Hi, Ozon', в n будет 1&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">finally</code><span style=\"color: rgb(52, 73, 94);\">&nbsp;выполнится в любом случае, блок except если что-то пойдет не так в&nbsp;</span><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\">try</code></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-03T21:02:05Z",
        "interviewCount": 329,
        "question": "<p>Представить результат выполнения кода Описать, как работает эта конструкция.</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">try</span>:\n    n = <span class=\"hljs-number\">1</span> + <span class=\"hljs-string\">'A'</span>\n<span class=\"hljs-keyword\">except</span>:\n    n = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">finally</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'Hi, Ozon'</span>)\n</pre><p><br></p>",
        "time": 7,
        "title": "Конструкция try/catch"
    },
    {
        "ID": 2009,
        "answers": [
            {
                "content": "<p>1. Композиция используется, когда нужно создать новый класс, который содержит другой класс в качестве поля. Это может быть полезно, когда вам нужно использовать функциональность одного класса в другом классе без наследования. Кроме того, композиция позволяет создавать более гибкие и модульные системы.</p><p>2. Наследование используется, когда нужно создать новый класс на основе уже существующего класса, чтобы унаследовать его свойства и методы. Это может быть полезно, когда вы хотите создать новый класс, который является расширением существующего класса. Наследование позволяет создавать более простые и понятные иерархии классов.</p><p>3. Агрегация используется, когда необходимо создать новый класс, который содержит несколько других классов. Это может быть полезно, когда вы хотите создать новый класс, который является коллекцией других классов. Агрегация позволяет создавать более сложные иерархии классов, чем композиция или наследование.</p><p><br></p><p>Выбор между композицией, наследованием и агрегацией зависит от конкретных требований к системе и задачи, которую необходимо решить. Важно понимать, что каждый из этих механизмов имеет свои преимущества и недостатки, которые следует учитывать при выборе подходящего решения.</p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-03T20:56:26Z",
        "interviewCount": 59,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Необходимо объяснить, когда следует использовать композицию, наследование, агрегацию в объектно-ориентированном программировании.</span></p>",
        "time": 5,
        "title": "Теоретический вопрос о принципах ООП."
    },
    {
        "ID": 2008,
        "answers": [
            {
                "content": "<p><strong>1. Типизация</strong>&nbsp;- это процесс определения типов данных, используемых в программировании. Она позволяет контролировать правильность использования переменных и функций, а также упрощает чтение и понимание кода.</p><p><strong>2. Существует два основных вида типизации</strong>: динамическая и статическая. Статическая типизация требует указания типов данных явно, в то время как динамическая типизация позволяет определять типы автоматически, на основе контекста.</p><p><strong>3 &amp; 4. В Python существует возможность явной типизации, которая была добавлена в версии 3.5</strong>. Она позволяет указывать типы данных для аргументов функций, а также для переменных, используемых в программе.</p><p><strong>5. Mypy</strong>&nbsp;- это инструмент для статической проверки типов в Python. Он позволяет обнаруживать ошибки, связанные с неправильным использованием типов данных, еще до запуска программы. Mypy использует синтаксис языка Python для определения типов данных и может быть использован вместе с явной типизацией в Python.</p><p>&nbsp;</p><p><strong>6. Плюсы типизации:</strong></p><ol><li>Упрощает чтение кода и позволяет быстрее понимать, какие переменные используются в программе.</li><li>Помогает избежать ошибок, связанных с неправильным использованием переменных.</li><li>Позволяет быстрее обнаруживать ошибки в программе.</li><li>Упрощает документирование кода.</li></ol><p><strong>Минусы типизации</strong>:</p><ol><li>Требует больше кода для объявления переменных и указания их типов.</li></ol>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-03T20:54:14Z",
        "interviewCount": 24,
        "question": "<p>1. Что такое типизация?</p><p>2. Какие виды типизации существуют?</p><p>3. Какие особенности имеет типизация в Python?</p><p>4. С какой версии Python поддерживает типизацию?</p><p>5. Что такое mypy и как он связан с типизацией в Python?</p><p>6. Возможные плюсы и минусы типизации</p>",
        "time": 5,
        "title": "Теоретический вопрос о типизации."
    },
    {
        "ID": 2007,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Программа работает. Добавлено логирование с обычным print'ом.</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">def my_decorator(func): &nbsp; &nbsp; \n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        print(\"Before function call\")\n        res = func(*args, **kwargs)\n        print(\"After function call\")\n        return res\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print(\"Hello!\")\n\n\nsay_hello()\n</pre>",
                "difficulty": "GRADE_16"
            },
            {
                "content": "<p>Программа работает корректно при любых допустимых входных данных, за исключением случаев, когда введенные данные не соответствуют ожидаемому типу.</p><pre class=\"ql-syntax\" spellcheck=\"false\">def my_decorator(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        print(\"Before function call\")\n        res = func(*args, **kwargs)\n        print(\"After function call\")\n        return res\n    return wrapper\n\ntry:\n    @my_decorator\n    def say_hello(name: str):\n        print(f\"Hello, {name}!\")\n    say_hello(\"Peter\")\nexcept TypeError:\n    print(\"Ошибка: неверный тип данных.\")\n</pre>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Программа работает корректно при допустимых входных данных, но может выдавать некорректный результат или ошибку при некоторых недопустимых входных данных.</span></p><pre class=\"ql-syntax\" spellcheck=\"false\">def my_decorator(func):\n&nbsp; &nbsp; @functools.wraps(func)\n&nbsp; &nbsp; def wrapper(*args, **kwargs):\n&nbsp; &nbsp; &nbsp; &nbsp; if not all(isinstance(arg, int) for arg in args):\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(\"Ошибка: неверный тип аргументов.\")\n&nbsp; &nbsp; &nbsp; &nbsp; else:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(\"Before function call\")\n&nbsp; &nbsp; &nbsp; &nbsp; res = func(*args, **kwargs)\n&nbsp; &nbsp; &nbsp; &nbsp; print(\"After function call\")\n&nbsp; &nbsp; &nbsp; &nbsp; return res\n&nbsp; &nbsp; return wrapper\n\n@my_decorator\ndef sum_numbers(a, b, c=None):\n&nbsp; &nbsp; if c is not None:\n&nbsp; &nbsp; &nbsp; &nbsp; print(f\"{a} + {b} + {c} = {a + b + c}\")\n&nbsp; &nbsp; else:\n&nbsp; &nbsp; &nbsp; &nbsp; print(f\"{a} + {b} = {a + b}\")\n\nsum_numbers(2, 3)\nsum_numbers(2, \"3\")\nsum_numbers(2, 3, c=4) \n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-03T20:51:10Z",
        "interviewCount": 315,
        "question": "<p>Напишите программу на Python, которая принимает на вход функцию и декоратор, и применяет декоратор к функции.</p><p><br></p><p><strong>Примечание</strong>: Декоратор должен изменять поведение функции, например, добавлять логирование или проверку аргументов.</p>",
        "time": 10,
        "title": "Написание декоратора"
    },
    {
        "ID": 2006,
        "answers": [
            {
                "content": "<p><strong>Ответ на теоретическую часть:</strong></p><p>В Python есть несколько стандартных типов данных:</p><p><br></p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Numbers (числа)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Strings (строки)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Lists (списки)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Dictionaries (словари)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Tuples (кортежи)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Sets (множества)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>Boolean (логический тип данных)</li></ol><p>Будет плюсом, если кандидат упомянул про frozenset()</p><p><br></p><p>Эти типы данных можно, в свою очередь, классифицировать по нескольким признакам:</p><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>изменяемые (списки, словари и множества)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>неизменяемые (числа, строки и кортежи)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>упорядоченные (списки, кортежи, строки и словари)</li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span>неупорядоченные (множества)</li></ol>",
                "difficulty": "GRADE_SCREENING"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-03T20:47:51Z",
        "interviewCount": 291,
        "question": "<p>Какие типы данных существуют в Python?</p>",
        "time": 3,
        "title": "Типы данных"
    },
    {
        "ID": 2005,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Возможные варианты: pycodestyle, pylint, pyflakes, flake8</span></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-03T20:40:19Z",
        "interviewCount": 3,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Какие python линтеры вы знаете?</span></p><p><br></p><p><strong style=\"color: rgb(23, 43, 77);\">Дополнительный вопрос 1:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Какие правила можно не соблюдать&nbsp;?</span></p><p><strong>Ответ на доп. вопрос 1:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Зависит от договоренностей в команде/проекте - часто вместо максимальной длины строки 79 берется другое значение</span></p><p><br></p><p><strong style=\"color: rgb(23, 43, 77);\">Дополнительный вопрос 2:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Как можно настроить/изменить поведение линтера</span></p><p><strong>Ответ на доп. вопрос 2:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Зависит от линтера - можно создать конфигурационный файл, в котором указать или изменит нужные/ненужные нам опции, либо передать в опции при запуске</span></p>",
        "time": 3,
        "title": "Виды python-линтеров."
    },
    {
        "ID": 2004,
        "answers": [
            {
                "content": "<p>Линтеры, форматтеры.</p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-03T20:37:23Z",
        "interviewCount": 20,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Что может помочь соблюдать принятый в компании или команде кодстайл?</span></p><p><br></p><p><strong style=\"color: rgb(23, 43, 77);\">Дополнительный вопрос:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Как мы можем гарантировать, что код в репозитории соответствует принятому кодстайлу?</span></p><p><strong style=\"color: rgb(23, 43, 77);\">Ответ на дополнительный вопрос:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Джоба с линтером в пайплайне.</span></p>",
        "time": 3,
        "title": "Вопрос по кодстайл"
    },
    {
        "ID": 2003,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Namedtuple - неизменяемый, более простая структура данных, занимает меньше памяти.</span></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-03T20:31:04Z",
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Чем namedtuple отличается от dataclass?</span></p><p><br></p><p><strong style=\"color: rgb(23, 43, 77);\">Дополнительный вопрос: </strong></p><p>Когда следует использовать namedtuple?</p><p><strong>Ответ на дополнительный вопрос:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">Когда нужен кортеж (распаковка, итерация)</span></p>",
        "time": 3,
        "title": "Теоретический вопрос о namedtuple"
    },
    {
        "ID": 2002,
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Коллекции - это специальные типы данных (контейнеров), выступающие альтернативами встроенным контейнерам (list, set, tuple, dict). Они могут хранить в себе различные типы данных, к которым можно обращаться, а также специальные функции и методы для работы с этими данными (в зависимости от коллекции).</span></p><p><span style=\"color: rgb(23, 43, 77);\">Коллекции: namedtuple(), deque, ChainMap, Counter, OrderedDict, defaultdict, UserDict, UserList, UserString</span></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-03T20:28:44Z",
        "interviewCount": 10,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Что представляют из себя коллекции (collections) в python. Назовите какие коллекции вы знаете?</span></p>",
        "time": 4,
        "title": "Теоретический вопрос о коллекциях"
    },
    {
        "ID": 2001,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">from collections import namedtuple\n\n\nUserEmails = namedtuple('UserEmails', ['main', 'home', 'work'], defaults=(None, None))\nnew_user = UserEmails(main='main@user.com', work='work@user.com')\n\nsend_message(email=new_user.main, text='email for main')\n\nfor email in new_user:\n    if email:\n        send_message(email=email, text='email for all')\n</pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-09-03T20:24:16Z",
        "interviewCount": 1,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Необходимо реализовать dataclass User в виде namedtuple и скорректировать логику</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">from</span> dataclasses <span class=\"hljs-keyword\">import</span> dataclass, astuple\n\n\n<span class=\"hljs-meta\">@dataclass</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserEmails</span>:\n    main: <span class=\"hljs-built_in\">str</span>\n    home: <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-literal\">None</span>\n    work: <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-literal\">None</span>\n\nnew_user = UserEmails(main=<span class=\"hljs-string\">'main@user.com'</span>, work=<span class=\"hljs-string\">'work@user.com'</span>)\n\nsend_message(email=new_user.main, text=<span class=\"hljs-string\">'email for main'</span>)\n\n<span class=\"hljs-keyword\">for</span> email <span class=\"hljs-keyword\">in</span> astuple(new_user):\n    <span class=\"hljs-keyword\">if</span> email:\n        send_message(email=email, text=<span class=\"hljs-string\">'email for all'</span>)\n</pre><p><br></p><p><strong>Дополнительные вопросы:</strong></p><p><br></p><p>1. Чем namedtuple отличается от dataclass?</p><ul><li>Неизменяемый, более простая структура данных, занимает меньше памяти</li></ul><p>2. <span style=\"color: rgb(23, 43, 77);\">Когда следует использовать?</span></p><ul><li>Когда нужен кортеж (распаковка, итерация)</li></ul>",
        "time": 7,
        "title": "Методы работы с коллекциями"
    },
    {
        "ID": 1959,
        "answers": [
            {
                "content": "<p>Проверяем, что кандидат знает библиотеки <strong>request</strong>, <strong>urllib</strong> или любую другую для создания запросов в <strong>python</strong>. Убедится, что знает <strong>retry</strong> и понимает, что http-взаимодействие не гарантирует стопроцентное получение данных.</p><p>Примерный каркас, как должен выглядеть набросок клиента:</p><pre class=\"ql-syntax\" spellcheck=\"false\">import functools\nimport time\nimport requests\n\nURL = \"https://petstore.swagger.io/\"\n\n\nclass RequestNotOk(Exception):\n    pass\n\n\ndef retry(exceptions=(Exception, ), tries=-1, delay=1, back_off=1, exception_handler=None):\n    \"\"\"Декоратор позволяет сделать несколько запросов к апи с экспоненциальным ростом\n    времени ожидания между запросами.\n\n    :param exceptions: список обрабатываемых исключений.\n    :param tries: количество попыток\n    :param delay: количество секунд для ожидания\n    :param back_off: значение для увеличения времени ожидания после каждой ошибки\n    :param exception_handler: функция для кастомной обработки ошибок\n    \"\"\"\n    def _wrap(func):\n        @functools.wraps(func)\n        def _inner(*args, **kwargs):\n            _tries, _delay = tries, delay\n            while True:\n                try:\n                    return func(*args, **kwargs)\n                except exceptions as ex:\n                    _tries -= 1\n                    is_retry_possible = _tries &gt;= 0\n                    if exception_handler is not None:\n                        exception_handler(ex, is_retry_possible, retry_delay=_delay)\n                    if not is_retry_possible:\n                        raise\n                    time.sleep(_delay)\n                    _delay *= back_off\n        return _inner\n    return _wrap\n\n\n@retry(\n    exceptions=(RequestNotOk, ConnectionError, BrokenPipeError),\n    tries=5,\n    back_off=2,\n)\ndef get_data(url, **params):\n    result = requests.get(url, params=params)\n    if result.ok:\n        return result\n    raise RequestNotOk(\"Fail to get data\", result.text)\n\n\n@retry(\n    exceptions=(RequestNotOk, ConnectionError, BrokenPipeError),\n    tries=5,\n    back_off=2,\n)\ndef post_new_pet(**data):\n    result = requests.post(URL, json=data)\n    if result.ok:\n        return result\n    raise RequestNotOk(\"Fail to post data\", result.text)\n\n\ndef get_pets(**params):\n    first_batch = get_data(URL, **params)\n    data = first_batch.json()['data']\n    if len(data.json()['data']):\n        yield from data\n    while data['next']:\n        batch = get_data(data['next'], **params)\n        if len(batch.json()['data']):\n            yield from batch.json()['data']\n\n\n# Пример вызовов:\npost_new_pet({\n    'name': 'oleg',\n    'age': 23\n})\n\nfor i in get_pets():\n    print(i)\n</pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T09:39:21Z",
        "interviewCount": 17,
        "question": "<p>Есть API с информацией о питомцах&nbsp;<a href=\"https://petstore.swagger.io/#/\" rel=\"noopener noreferrer\" target=\"_blank\">https://petstore.swagger.io/#/</a></p><p>Написать клиент у которого будет метод получения и создания питомцев.</p><p>Метод получения должен быть с генератором и лимитом offset-a.</p>",
        "time": 15,
        "title": "Написание клиента для сервиса"
    },
    {
        "ID": 1958,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">from typing import Any\n\n\nclass ListNode:\n    def <span class=\"hljs-built_in\">__init__</span>(self, val=None, next_element=None):\n        self.val = val\n        self.next = next_element\n\nclass LinkedList:\n    def <span class=\"hljs-built_in\">__init__</span>(self):\n        self.head = None\n\n    def <span class=\"hljs-built_in\">add_to_front</span>(self, val: Any):\n        new_node = <span class=\"hljs-built_in\">ListNode</span>(val)\n        new_node.next = self.head\n        self.head = new_node\n\n    def <span class=\"hljs-built_in\">add_to_end</span>(self, val: Any) -&gt; None:\n        pointer = self.head\n        if pointer is None:\n            self.<span class=\"hljs-built_in\">add_to_front</span>(val)\n        else:\n            while pointer.next:\n                pointer = pointer.next\n            pointer.next = <span class=\"hljs-built_in\">ListNode</span>(val)\n\n    def <span class=\"hljs-built_in\">print_list</span>(self):\n        temp = self.head\n        if (temp != None):\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Список содержит:\"</span>, end=<span class=\"hljs-string\">\" \"</span>)\n            while (temp != None):\n                <span class=\"hljs-built_in\">print</span>(temp.val, end=<span class=\"hljs-string\">\" \"</span>)\n                temp = temp.next\n            <span class=\"hljs-built_in\">print</span>() # этот принт для красоты принтования \n&nbsp; &nbsp; &nbsp; &nbsp; else:\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Список пустой.\"</span>)\n</pre><p>Пример вызовов:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attribute\">ll</span> = LinkedList()\nll.add_to_front(<span class=\"hljs-string\">'23'</span>)\nll.add_to_front(<span class=\"hljs-string\">'oleg'</span>)\nll.print_list()\n\nll.add_to_end(<span class=\"hljs-string\">'рыжий'</span>)\nll.add_to_end(<span class=\"hljs-string\">'пыжий'</span>)\nll.print_list()\n</pre><p>Ответ:</p><pre class=\"ql-syntax\" spellcheck=\"false\">Список содержит: oleg 23\nСписок содержит: oleg 23 рыжий пыжий\n</pre>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Дополнительный вопрос для 19: </span></p><p><span style=\"color: rgb(23, 43, 77);\">Дополнительно реализовать добавление элемента в переданную позицию связанного списка (</span><strong style=\"color: rgb(23, 43, 77);\">add_to_position</strong><span style=\"color: rgb(23, 43, 77);\">).</span></p><p><br></p><p>Ответ:</p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">from typing import Any\n\n\nclass ListNode:\n    def <span class=\"hljs-built_in\">__init__</span>(self, val=None, next_element=None):\n        self.val = val\n        self.next = next_element\n\nclass LinkedList:\n    def <span class=\"hljs-built_in\">__init__</span>(self):\n        self.head = None\n\n    def <span class=\"hljs-built_in\">add_to_front</span>(self, val: Any):\n        new_node = <span class=\"hljs-built_in\">ListNode</span>(val)\n        new_node.next = self.head\n        self.head = new_node\n\n    def <span class=\"hljs-built_in\">add_to_end</span>(self, val: Any) -&gt; None:\n        pointer = self.head\n        if pointer is None:\n            self.<span class=\"hljs-built_in\">add_to_front</span>(val)\n        else:\n            while pointer.next:\n                pointer = pointer.next\n            pointer.next = <span class=\"hljs-built_in\">ListNode</span>(val)\n\n    def <span class=\"hljs-built_in\">add_to_position</span>(self, position: int, val: Any):\n        pointer = self.head\n        i = <span class=\"hljs-number\">1</span>\n        while i != position-<span class=\"hljs-number\">1</span> and pointer.next:\n            i+=<span class=\"hljs-number\">1</span>\n            pointer = pointer.next\n        new = <span class=\"hljs-built_in\">ListNode</span>(val)\n        new.next = pointer.next\n        pointer.next = new\n\n\n    def <span class=\"hljs-built_in\">print_list</span>(self):\n        temp = self.head\n        if (temp != None):\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Список содержит:\"</span>, end=<span class=\"hljs-string\">\" \"</span>)\n            while (temp != None):\n                <span class=\"hljs-built_in\">print</span>(temp.val, end=<span class=\"hljs-string\">\" \"</span>)\n                temp = temp.next\n            <span class=\"hljs-built_in\">print</span>() # этот принт для красоты принтования \n&nbsp; &nbsp; &nbsp; &nbsp; else:\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Список пустой.\"</span>)\n</pre><p>Пример вызовов:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attribute\">ll</span> = LinkedList()\nll.add_to_front(<span class=\"hljs-string\">'23'</span>)\nll.add_to_front(<span class=\"hljs-string\">'oleg'</span>)\nll.print_list()\n\nll.add_to_end(<span class=\"hljs-string\">'рыжий'</span>)\nll.add_to_end(<span class=\"hljs-string\">'пыжий'</span>)\nll.print_list()\n\nll.add_to_position(<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">\"пёс\"</span>)\nll.print_list()\n</pre><p>Ответ:</p><pre class=\"ql-syntax\" spellcheck=\"false\">Список содержит: oleg 23\nСписок содержит: oleg 23 рыжий пыжий\nСписок содержит: oleg 23 пёс рыжий пыжий\n</pre><p><br></p>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T09:30:47Z",
        "interviewCount": 9,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Есть элемент связанного списка (</span><strong style=\"color: rgb(23, 43, 77);\">ListNode</strong><span style=\"color: rgb(23, 43, 77);\">).</span></p><p><span style=\"color: rgb(23, 43, 77);\">Реализовать для него методы добавления элемента в начало(</span><strong style=\"color: rgb(23, 43, 77);\">add_to_front</strong><span style=\"color: rgb(23, 43, 77);\">) и конец(</span><strong style=\"color: rgb(23, 43, 77);\">add_to_end</strong><span style=\"color: rgb(23, 43, 77);\">).</span></p>",
        "time": 15,
        "title": "Связанные списки"
    },
    {
        "ID": 1957,
        "answers": [
            {
                "content": "<p>Понимает как написать.</p><pre class=\"ql-syntax\" spellcheck=\"false\">def generate_item() -&gt; int:\n&nbsp; &nbsp; return random.<span class=\"hljs-built_in\">randint</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">20</span>)\n\ndef <span class=\"hljs-built_in\">remove_items</span>(item_ids):\n&nbsp; &nbsp; pass\n\n@pytest.fixture\ndef <span class=\"hljs-built_in\">setup_items</span>():\n&nbsp; &nbsp; item_ids = []\n&nbsp; &nbsp; def <span class=\"hljs-built_in\">callback</span>(count):\n&nbsp; &nbsp; &nbsp; &nbsp; for i in <span class=\"hljs-built_in\">range</span>(count):\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; item_ids.<span class=\"hljs-built_in\">append</span>(<span class=\"hljs-built_in\">generate_item</span>())\n&nbsp; &nbsp; &nbsp; &nbsp; return item_ids\n&nbsp; &nbsp; yield callback\n&nbsp; &nbsp; <span class=\"hljs-built_in\">remove_items</span>(item_ids)\n\n\ndef <span class=\"hljs-built_in\">test_a</span>(setup_items):\n&nbsp; &nbsp; ...\n&nbsp; &nbsp; item_ids = <span class=\"hljs-built_in\">setup_items</span>(count=<span class=\"hljs-number\">3</span>) # [<span class=\"hljs-number\">123</span>,<span class=\"hljs-number\">321</span>,<span class=\"hljs-number\">213</span>]\n&nbsp; &nbsp; ...\n</pre>",
                "difficulty": "GRADE_17"
            },
            {
                "content": "<p>Помимо возможности написать, может еще и объяснить как это работает и почему. Может реализовать с использованием <strong>request.addfinalizer</strong></p>",
                "difficulty": "GRADE_18"
            },
            {
                "content": "<p>Кандидат может рассказать о нюансах.</p><p>Например, что будет, если для хранения результата использовать простой тип (int, str), после yield данные будут пустые и так далее.</p>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T09:14:31Z",
        "interviewCount": 60,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Есть фикстура, которая создает товары в БД.</span></p><p><span style=\"color: rgb(23, 43, 77);\">Необходимо дополнить/изменить данную фикстуру, добавив очистку данных из БД.</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-function\">def <span class=\"hljs-title\">generate_item</span>() -&gt; <span class=\"hljs-built_in\">int</span>:\n&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> random.<span class=\"hljs-title\">randint</span>(<span class=\"hljs-params\"><span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">20</span></span>)\n\n@pytest.fixture\ndef <span class=\"hljs-title\">setup_items</span>():\n&nbsp; &nbsp; def <span class=\"hljs-title\">callback</span>(<span class=\"hljs-params\">count</span>):\n&nbsp; &nbsp; &nbsp; &nbsp; item_ids</span> = []\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">range</span>(<span class=\"hljs-params\">count</span>):\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; item_ids.<span class=\"hljs-title\">append</span>(<span class=\"hljs-params\">generate_item(</span>))\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> item_ids\n&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> callback\n\ndef <span class=\"hljs-title\">test_a</span>(<span class=\"hljs-params\">setup_items</span>):\n&nbsp; &nbsp; ...\n&nbsp; &nbsp; item_ids</span> = setup_items(count=<span class=\"hljs-number\">3</span>) <span class=\"hljs-meta\"># [123,321,213]</span>\n&nbsp; &nbsp; ... \n</pre><p><br></p><p><strong><u>Дополнительный вопрос для 19-го грейда:</u></strong></p><p><span style=\"color: rgb(23, 43, 77);\">В чем принципиальное отличие </span><strong style=\"color: rgb(23, 43, 77);\">yeild</strong><span style=\"color: rgb(23, 43, 77);\"> от </span><strong style=\"color: rgb(23, 43, 77);\">request.addfinalizer</strong><span style=\"color: rgb(23, 43, 77);\"> и в каких ситуациях какой из подходов лучше использовать?</span></p><p><strong><u>Ответ на доп. вопрос</u></strong>:</p><ol><li>Разница в том, что с помощью addfinalizer можно зарегистрировать тирдаун сразу после определения фикстуры и далее уже писать сетап фикстуры. Если в такой ситуации использовать yield, то выполнение программы до yield может даже не дойти, а часть данных может уже создаться, поэтому при падении в сетап секции данные не почистятся, а в случае с addfinalizer эти данные буду очищены.</li><li>В addfinalizer сложнее управлять областью видимости переменных.</li></ol><p><br></p>",
        "time": 15,
        "title": " Использование teardown в фикстурах."
    },
    {
        "ID": 1956,
        "additional": "<p><em style=\"color: rgb(51, 51, 51);\">Какие подходы можно использовать для снижения цикломатической сложности?</em></p><p><br></p><ul><li><strong><em>ответ:</em></strong></li><li>Разбиение сложных функций на несколько более мелких функций с целью уменьшения количества условных конструкций и циклов в каждой из них.</li><li>Применение раннего выхода из функций или методов, чтобы избежать глубокой вложенности условных операторов.</li><li>Использование более понятных и простых алгоритмов, где это возможно.</li><li>Внимательное проектирование кода с целью уменьшения избыточных проверок и излишних циклов.</li><li>Регулярный рефакторинг кода для улучшения его структуры и снижения сложности.</li></ul><p><br></p><p><br></p><p><em style=\"color: rgb(51, 51, 51);\">Задача. Вычислите цикломатическую сложность следующей функции:</em></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">python\ndef calculate_grade(score):\n    if score &gt;= 90:\n        grade = 'A'elif score &gt;= 80:\n        grade = 'B'elif score &gt;= 70:\n        grade = 'C'else:\n        grade = 'D'return grade\n</pre><p><br></p><p><strong style=\"color: rgb(23, 43, 77);\"><em>ответ:</em></strong></p><p><span style=\"color: rgb(23, 43, 77);\">E = 4 (4 условных ветвления)</span></p><p><span style=\"color: rgb(23, 43, 77);\">N = 4 (4 базовых блока)</span></p><p><span style=\"color: rgb(23, 43, 77);\">P = 1 (1 компонент связности)</span></p><p><span style=\"color: rgb(23, 43, 77);\">M = E - N + 2P = 4 - 4 + 2*1 = 2</span></p>",
        "answers": [
            {
                "content": "<ul><li>Увеличение сложности понимания кода, что делает его менее читаемым и поддерживаемым.</li><li>Увеличение количества возможных путей выполнения, усложняющее тестирование и повышающее вероятность ошибок.</li><li>Снижение производительности программы из-за избыточных условных проверок и циклов.</li><li>Увеличение вероятности наличия скрытых ошибок и проблем в коде.</li></ul><p><br></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T09:10:21Z",
        "interviewCount": 6,
        "question": "<p><span style=\"color: rgb(51, 51, 51);\">Какие проблемы могут возникнуть при высокой цикломатической сложности кода?</span></p>",
        "time": 8,
        "title": "Цикломатическая сложность"
    },
    {
        "ID": 1955,
        "additional": "<p><em style=\"color: rgb(51, 51, 51);\">Как вычисляется цикломатическая сложность функции или метода?</em></p><p><strong style=\"color: rgb(23, 43, 77);\"><em>ответ:</em></strong></p><p><span style=\"color: rgb(23, 43, 77);\">Цикломатическая сложность может быть вычислена по формуле М = E - N + 2P, где:</span></p><p><span style=\"color: rgb(23, 43, 77);\">М - цикломатическая сложность</span></p><p><span style=\"color: rgb(23, 43, 77);\">E - количество ребер в графе потока управления (количество переходов между узлами в коде)</span></p><p><span style=\"color: rgb(23, 43, 77);\">N - количество узлов в графе потока управления (количество базовых блоков кода)</span></p><p><span style=\"color: rgb(23, 43, 77);\">P - количество компонент связности (независимых путей) в графе потока управления</span></p><p><br></p><p><br></p><p><em style=\"color: rgb(51, 51, 51);\">Какие значения цикломатической сложности указывают на более сложный код, а какие на менее сложный?</em></p><p><br></p><ul><li><strong><em>﻿ответ:</em></strong></li><li>Обычно, чем выше значение цикломатической сложности, тем более сложным считается код. Ниже приведены общие интерпретации значений:</li><li>Значение цикломатической сложности равное 1 означает отсутствие условных конструкций и циклов - самый простой код.</li><li>Значения в диапазоне 2-5 говорят о низкой до умеренной сложности кода.</li><li>Значения в диапазоне 6-10 указывают на код средней сложности.</li><li>Значения выше 10 считаются высокой сложностью и сигнализируют о том, что код, возможно, нуждается в упрощении и рефакторинге</li></ul>",
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Цикломатическая сложность - это метрика программного кода, используемая для количественной оценки сложности кода. Она позволяет определить количество линейно независимых путей выполнения в программе, что дает представление о количестве тестовых случаев, необходимых для полного покрытия кода. Основная цель цикломатической сложности заключается в выявлении сложных и малочитаемых участков кода, что может помочь улучшить качество программы и облегчить её тестирование.</span></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T09:07:28Z",
        "interviewCount": 32,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Что такое цикломатическая сложность и какова её основная цель?</span></p>",
        "time": 7,
        "title": "Цикломатическая сложность"
    },
    {
        "ID": 1954,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">import pytest\nimport requests\n\n\n@pytest.fixture(scope='session')\ndef uuid_response():\n    response = requests.get('https://httpbin.org/uuid')\n    assert response.ok, 'GET /uuid failed'\n    return response.json()['uuid']\n\ndef test_post_anything(uuid_response):\n    response = requests.post(url='https://httpbin.org/anything',\n                             json={'uuid': uuid_response})\n    assert response.ok, 'POST /anything failed'\n    assert response.json()['json']['uuid'] == uuid_response, 'response not equal request'\n\ndef test_get_anything(uuid_response):\n    response = requests.get(url='https://httpbin.org/anything',\n                            params={'uuid': uuid_response})\n    assert response.ok, 'GET /anything failed'\n    assert response.json()['args']['uuid'] == uuid_response, 'response not equal request'\n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T09:05:01Z",
        "interviewCount": 220,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Во фрагменте кода представлен шаблон теста. </span></p><p>Необходимо добавить логику фикстуры и тестов в соответствии с описанием в докстрингах.</p><pre class=\"ql-syntax\" spellcheck=\"false\">@pytest.fixture\ndef uuid_from_response():\n    \"\"\"\n    вызывает GET \"https://httpbin.org/uuid\n    возвращает uuid из ответа\n    запускается один раз за прогон\n    \"\"\"\n    pass\n\ndef test_post_anything():\n    \"\"\"\n    вызывает POST https://httpbin.org/anything c json телом запроса {\"uuid\": &lt;uuid из фикстуры&gt;}\n    проверяет, что код ответа успешный\n    проверяет, что в теле ответа поле json соответствует отправленному телу запроса\n    \"\"\"\n    pass\n\ndef test_get_anything():\n    \"\"\"\n    вызывает GET https://httpbin.org/anything c параметром uuid=&lt;uuid из фикстуры&gt;\n    проверяет, что код ответа успешный\n    проверяет, что в теле ответа поле args соответствует отправленному параметру в формате {'param_name': param_value}\n    \"\"\"\n    pass\n</pre><p><br></p><p><br></p><p><br></p>",
        "time": 15,
        "title": "Реализация логики фикстур"
    },
    {
        "ID": 1953,
        "additional": "<p><span style=\"color: rgb(23, 43, 77);\">Какой scoup по дефолту стоит?</span></p><p><strong>Ответ:</strong></p><p>function</p>",
        "answers": [
            {
                "content": "<p>1) Фикстура — это ресурс или объект, который можно рассматривать как набор условий или предопределенное состояние, необходимое тесту для правильного выполнения, зачастую фикстуры создаются, чтобы генерировать какие-то данные еще до теста и возвращать их для использования в тесте или перед тестом.</p><p>2) Да, может. </p><p>3) <strong>yield</strong> используется если есть постусловие (teardown) после выполнения теста.</p><p><strong>return</strong> используется в случае, когда постусловия выполнения теста нет.</p><p>4) Область видимости фикстур указывается параметром scope. Области видимости бывают:</p><ul><li>(scope=”function”) один раз для каждой функции теста</li><li>(scope=”class”) Выполняется один раз для каждого тестового класса, независимо от количества тестовых методов в классе.</li><li>(scope='module') Выполняется один раз для каждого модуля, независимо от того, сколько тестовых функций или методов или других фикстур при использовании модуля.</li><li>(scope='session') Выполняется один раз за сеанс. Все методы и функции тестирования, использующие фикстуру области сеанса, используют один вызов setup и teardown.</li></ul><p>&nbsp;</p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T09:00:06Z",
        "interviewCount": 78,
        "question": "<p>Ответить на теоретические вопросы:</p><p>1) Что такое фикстура и зачем она нужна?</p><p>2) Может ли фикстура использоваться другими фикстурами?</p><p>3) В каких случаях желательно использовать yield и return?</p><p>4) Какие бывают области видимости фикстур и каким параметром он указывается?</p>",
        "time": 5,
        "title": "Теоретические знания по фикстурам"
    },
    {
        "ID": 1952,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">def <span class=\"hljs-title function_\">divider</span><span class=\"hljs-params\">(a, b)</span>:\n&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span> b <span class=\"hljs-title function_\">and</span> <span class=\"hljs-params\">(a / b)</span> ** <span class=\"hljs-number\">3</span> or <span class=\"hljs-string\">'Нули в знаменателе не приветствуются'</span>\n</pre><p>Проверка данной функции:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-meta prompt_\">&gt;</span>&gt;&gt; <span class=\"hljs-built_in\">print</span>(divider(10, 4))\n15.625\n\n&gt;&gt;&gt; print(divider(10, 0))\nНули в знаменателе не приветствуются\n\n\n&gt;&gt;&gt; print(divider(-12.2, 2))\n-226.98099999999997\n\n\n&gt;&gt;&gt; print(divider(-6.4, 0))\nНули в знаменателе не приветствуются{code}\n</pre><p><br></p><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:56:44Z",
        "question": "<p>Напишите функцию <strong>divider(a: int, b: int)</strong>, принимающую 2 числовых параметра.&nbsp;</p><p>Задача функции: разделить a на b (где a-числитель, b-знаменатель) и возвести в куб.</p><p>Если в b (знаменателе) будет ноль, нужно вернуть: «Нули в знаменателе не приветствуются».&nbsp;</p><p>Решите задание без использования условия if, применяя свойства логических операторов.</p>",
        "time": 10,
        "title": "Использование логических операторов и сравнения при написании кода"
    },
    {
        "ID": 1951,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">True\n</pre>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:53:00Z",
        "interviewCount": 5,
        "question": "<p>Представьте результат выражения:</p><pre class=\"ql-syntax\" spellcheck=\"false\">not 2 and 2 &lt; 5 or set(([1, 2, 3])) &amp; set(([2])) and {1} - {2} == {1}\n</pre>",
        "time": 4,
        "title": "Логические операторы"
    },
    {
        "ID": 1950,
        "additional": "<ol><li>Можно ли получить доступ к приватному атрибуту из вне класса? Если да, то как? Напиши пример.&nbsp;</li></ol><p><strong><em>ответ:</em></strong></p><ol><li>Да.</li><li>Для доступа&nbsp;к приватному атрибуту используются префиксное подчеркивание и имя класса. Пример&nbsp;</li></ol><pre class=\"ql-syntax\" spellcheck=\"false\">class MyClass:\n&nbsp; &nbsp; def __init__(self):\n&nbsp; &nbsp; &nbsp; &nbsp; self.__private_attribute = \"Private\"\n\nobj = MyClass()\nprint(obj._MyClass__private_attribute) &nbsp;# Выводит \"Private\"\n</pre>",
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Модификаторы доступа в Python определяют уровень доступности атрибутов и методов класса. Они позволяют контролировать, какие части программы имеют доступ к определенным атрибутам и методам, обеспечивая инкапсуляцию и безопасность кода.</span></p><p><span style=\"color: rgb(23, 43, 77);\">Модификаторы бывают:</span></p><p><strong style=\"color: rgb(23, 43, 77);\">private</strong><span style=\"color: rgb(23, 43, 77);\">&nbsp;- Приватные атрибуты и методы объявляются с использованием двойного подчеркивания __ в начале именования, например, {</span><em style=\"color: rgb(23, 43, 77);\">}private_attribute</em><span style=\"color: rgb(23, 43, 77);\">.</span></p><p><strong style=\"color: rgb(23, 43, 77);\">protected</strong><span style=\"color: rgb(23, 43, 77);\">&nbsp;- Защищенные атрибуты и методы объявляются с использованием одного подчеркивания _ в начале именования, например,&nbsp;</span><em style=\"color: rgb(23, 43, 77);\">{</em><span style=\"color: rgb(23, 43, 77);\">}protected_attribute{_}.</span></p><p><strong style=\"color: rgb(23, 43, 77);\">public</strong><span style=\"color: rgb(23, 43, 77);\">&nbsp;- Публичные атрибуты и методы не имеют явного модификатора доступа и объявляются без использования подчеркиваний, например,&nbsp;</span><em style=\"color: rgb(23, 43, 77);\">public_attribute</em><span style=\"color: rgb(23, 43, 77);\">&nbsp;или&nbsp;</span><em style=\"color: rgb(23, 43, 77);\">public_method</em><span style=\"color: rgb(23, 43, 77);\">.</span></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:48:30Z",
        "interviewCount": 13,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Что такое модификаторы доступа в Python и зачем они нужны и какие бывают?</span></p>",
        "time": 6,
        "title": "Понимание модификаторов доступа в Python и как их применять"
    },
    {
        "ID": 1949,
        "additional": "<p><span style=\"color: rgb(23, 43, 77);\">Какие типы паттернов проектирования ООП можете перечислить?</span></p><p><strong style=\"color: rgb(23, 43, 77);\"><em><span class=\"ql-cursor\">﻿</span>ответ:</em></strong></p><p><span style=\"color: rgb(23, 43, 77);\">Ожидается, что назовет несколько: Порождающего типа, Структурного типа, Поведенческого типа</span></p>",
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">Ожидается, что назовет несколько, например: сингелтон, билдер, стратегия strategy, адаптер adapter, декоратор decorator, фабрика factory method, фасад facade, цепочка обязанностей chain of responsibility, посредник mediator, наблюдатель observer</span></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:45:34Z",
        "interviewCount": 69,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Какие паттерны проектирования ООП знаете/можете назвать?</span></p>",
        "time": 3,
        "title": "Знает основные паттерны ООП"
    },
    {
        "ID": 1948,
        "answers": [
            {
                "content": "<p>пример кода на 3 вопрос:</p><pre class=\"ql-syntax\" spellcheck=\"false\">import multiprocessing\n\ndef calculate_square_sum(n):\n    square_sum = 0\n    for i in range(1, n + 1):\n        square_sum += i ** 2\n    return square_sum\n\nif __name__ == '__main__':\n    n = int(input(\"Введите значение N: \"))\n\n    # Создаем пул процессов\n    pool = multiprocessing.Pool()\n\n    # Распределяем задачи между процессами\n    results = pool.map(calculate_square_sum, [n])\n\n    # Закрываем пул процессов\n    pool.close()\n    pool.join()\n\n    # Выводим результат\n    print(\"Сумма квадратов чисел от 1 до\", n, \":\", results[0]) \n</pre>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:44:06Z",
        "interviewCount": 30,
        "question": "<ol><li>Расскажите о проектах/задачах в которых вы использовали многопоточность или многопроцессорность? Какие проблемы помогли решить модули multiprocessing и threading.</li><li>С каким проблемами/сложностями вы сталкивались при работе с многопоточностью или многопроцессорностью и как решали эти проблемы?&nbsp;</li><li>Напишите программу, используя модуль multiprocessing, которая рассчитывает сумму квадратов чисел от 1 до N, где N - целое.</li></ol>",
        "time": 10,
        "title": "Опыт работы с модулями multiprocessing, threading"
    },
    {
        "ID": 1947,
        "answers": [
            {
                "content": "<p><strong style=\"color: rgb(23, 43, 77);\">\"Фабрика\" (Factory pattern)</strong></p><ol><li>Кандидат должен распознать паттерн проектирования \"Фабрика\" (Factory pattern) как подходящее решение для данной проблемы. Он должен объяснить, что данный паттерн позволяет абстрагировать процесс создания объектов и делегировать его наследникам фабричного класса. Выбор паттерна обусловлен необходимостью создания различных типов заказов с уникальными свойствами и специальной логикой.</li><li>Кандидат должен предложить реализацию паттерна \"Фабрика\" в контексте создания заказов. Например, можно создать абстрактный класс \"Order\" с методом \"process_order\", который будет реализован в наследниках, представляющих конкретные типы заказов (например, \"RegularOrder\", \"WholesaleOrder\", \"ScheduledOrder\"). Кроме того, можно создать фабричный класс \"OrderFactory\", у которого будет метод \"create_order\" для создания нужного типа заказа в зависимости от переданных параметров.</li><li>Кандидат должен объяснить, что использование паттерна \"Фабрика\" позволяет облегчить создание различных типов заказов в будущем. При необходимости добавления новых типов заказов, достаточно создать новый класс, наследующийся от абстрактного класса \"Order\" и реализовать соответствующую логику. Фабричный класс \"OrderFactory\" не требует изменений, так как он работает с абстрактными типами заказов и создает их на основе переданных параметров. Это позволяет легко добавлять новые типы заказов без внесения изменений в существующий код и облегчает поддержку системы</li></ol>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:39:01Z",
        "interviewCount": 2,
        "question": "<p>Вы разрабатываете систему управления заказами в интернет-магазине. Вам требуется реализовать механизм создания различных типов заказов: обычных заказов, оптовых заказов и заказов с доставкой на определенную дату. Каждый тип заказа имеет свои уникальные свойства и требует специальной логики для создания.</p><p><strong><em>Задание:</em></strong></p><p>Объясните, какой паттерн проектирования можно использовать для решения данной проблемы и почему выбор пал на него.</p><p>Продемонстрируйте пример реализации этого паттерна в контексте создания заказов.</p><p>Объясните преимущества использования выбранного паттерна и как он облегчает создание различных типов заказов в будущем.</p>",
        "time": 10,
        "title": "Понимание где и какие стоит применять паттерны проектирования (Factory pattern)"
    },
    {
        "ID": 1946,
        "answers": [
            {
                "content": "<p><strong>\"Наблюдатель\" (Observer pattern)</strong></p><ol><li>Кандидат должен понять, что речь о паттерне проектирования \"Наблюдатель\" (Observer pattern) как подходящее решение для данной проблемы. Он должен объяснить, что данный паттерн позволяет установить однонаправленную связь между наблюдателями (компоненты интерфейса) и субъектом (активность продавцов). Выбор паттерна обусловлен необходимостью мгновенного обновления информации о действиях пользователей на различных компонентах интерфейса приложения.</li><li>Кандидат должен предложить реализацию паттерна \"Наблюдатель\" в контексте отслеживания активности пользователей. Например, можно создать класс \"Observer\" с методами \"update\", который будет представлять интерфейс для всех наблюдателей и реализован компонентами интерфейса (наблюдателями), и класс \"UserActivity\" (субъект), который будет содержать список наблюдателей и методы для добавления/удаления наблюдателей и оповещения их об активности продавцов.</li><li>Кандидат должен объяснить, что использование паттерна \"Наблюдатель\" позволяет облегчить отслеживание активности продавцов в будущем. При добавлении новых компонентов интерфейса, требующих отображения активности продавцов, необходимо просто добавить их в список наблюдателей субъекта.</li></ol>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:37:15Z",
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Вы разрабатываете приложение интернет магазина и столкнулись с задачей отслеживания активности продавцов. Вам необходимо обновлять информацию о действиях продавцов (например, публикации нового товара, изменения цены, изменения количества товара) в режиме реального времени на различных компонентах интерфейса приложения.</span></p><p><strong style=\"color: rgb(23, 43, 77);\"><em>Задание:</em></strong></p><p><span style=\"color: rgb(23, 43, 77);\">Объясните, какой паттерн проектирования можно использовать для решения данной проблемы и почему выбор пал на него. Продемонстрируйте пример реализации этого паттерна в контексте отслеживания активности продавцов(пользователей). Объясните преимущества использования выбранного паттерна и как он облегчает отслеживание активности продавцов в будущем.</span></p>",
        "time": 10,
        "title": "Понимание где и какие стоит применять паттерны проектирования (Observer pattern)"
    },
    {
        "ID": 1945,
        "answers": [
            {
                "content": "<p><strong style=\"color: rgb(23, 43, 77);\">\"Singleton pattern\"</strong></p><ol><li><span style=\"color: rgb(23, 43, 77);\">Кандидат должен предложить реализацию паттерна \"Singleton\" в контексте журнала активности. </span></li><li><span style=\"color: rgb(23, 43, 77);\">Кандидат должен объяснить, что использование паттерна&nbsp;\"Singleton\" обеспечивает гарантию единственности экземпляра журнала активности в системе.</span></li></ol>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:34:54Z",
        "interviewCount": 11,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Вы разрабатываете систему управления журналом активности пользователей в веб-приложении. Вам требуется реализовать механизм записи активности пользователей в журнал и обеспечить доступ к этому журналу из разных частей системы. Однако, вы хотите, чтобы в системе существовал только один экземпляр журнала активности, чтобы избежать несогласованности данных.</span></p><p><strong style=\"color: rgb(23, 43, 77);\"><em>Задание:</em></strong></p><p><span style=\"color: rgb(23, 43, 77);\">Объясните, какой паттерн проектирования можно использовать для решения данной проблемы и почему выбор пал на него.</span></p><p><span style=\"color: rgb(23, 43, 77);\">Продемонстрируйте пример реализации этого паттерна в контексте журнала активности.</span></p><p><span style=\"color: rgb(23, 43, 77);\">Объясните преимущества использования выбранного паттерна и как он обеспечивает гарантию единственности экземпляра журнала активности в системе</span></p>",
        "time": 10,
        "title": "Понимание где и какие стоит применять паттерны проектирования(\"Singleton pattern\")"
    },
    {
        "ID": 1944,
        "answers": [
            {
                "content": "<p><strong style=\"color: rgb(23, 43, 77);\">\"Декоратор\" (Decorator pattern)</strong></p><ol><li><span style=\"color: rgb(23, 43, 77);\">Кандидат должен предложить реализацию паттерна \"Декоратор\" в контексте обработки и отображения данных в различных форматах.</span></li><li><span style=\"color: rgb(23, 43, 77);\">Кандидат должен объяснить, что использование паттерна \"Декоратор\" позволяет добавлять новый функционал к объектам динамически. В данном случае, новые форматы данных или дополнительные операции могут быть добавлены путем создания новых декораторов, которые оборачивают базовый объект</span></li></ol>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:34:08Z",
        "interviewCount": 6,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Вы разрабатываете систему для обработки и отображения данных в различных форматах (например, текстовом, XML, JSON).&nbsp;</span></p><p><span style=\"color: rgb(23, 43, 77);\">Ваша задача состоит в добавлении дополнительного функционала к основному объекту, который позволяет изменять или расширять&nbsp;</span></p><p><span style=\"color: rgb(23, 43, 77);\">его поведение без необходимости изменения существующего кода.</span></p><p><strong style=\"color: rgb(23, 43, 77);\"><em>Задание:</em></strong></p><p><span style=\"color: rgb(23, 43, 77);\">Объясните, какой паттерн проектирования можно использовать для решения данной проблемы и почему выбор пал на него.Продемонстрируйте пример реализации этого паттерна в контексте обработки и отображения данных в различных форматах.Объясните преимущества использования выбранного паттерна и как он облегчает добавление нового функционала в будущем.</span></p>",
        "time": 10,
        "title": "Понимание где и какие стоит применять паттерны проектирования(Decorator pattern)"
    },
    {
        "ID": 1943,
        "additional": "<p>Доп вопрос:</p><p><em style=\"color: rgb(23, 43, 77);\">Как решаются проблемы GIL с CPU-bout операциями в многопоточных программах?</em></p><p><span style=\"color: rgb(23, 43, 77);\">ответ:</span></p><p><span style=\"color: rgb(23, 43, 77);\">Использовать процессы вместо потоков multiprocessing. Использование библиотек Numba, NumPy или SciPy.</span></p>",
        "answers": [
            {
                "content": "<p><span style=\"color: rgb(23, 43, 77);\">В данном случае многопоточная реализация не даст прироста к производительности</span></p>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:26:37Z",
        "interviewCount": 95,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">1. Есть 2 реализации, в один поток и многопоточная(изображения ниже). Какой прирост производительности мы получим при многопоточном запуске? (показать 2 картинки с реализацией</span>, или приведённые нижу куски кода<span style=\"color: rgb(23, 43, 77);\">)</span></p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">from threading import Thread\n\nCOUNT = 50000000\n\n\ndef countdown(n):\n    while n &gt; 0:\n        n -= 1\n\n\ncountdown(COUNT) \n</pre><p><br></p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">from threading import Thread\n\nCOUNT = 50000000\n\n\ndef countdown(n):\n    while n &gt; 0:\n        n -= 1\n\n\nt1 = Thread(target=countdown, args=(COUNT // 2,))\nt2 = Thread(target=countdown, args=(COUNT // 2,))\n\nt1.start()\nt2.start()\nt1.join()\nt2.join() \n</pre><p><br></p><p><br></p><p><img src=\"https://jit.o3.ru/secure/attachment/2143593/2143593_image-2023-05-11-10-53-07-173.png\"></p><p><img src=\"https://jit.o3.ru/secure/attachment/2143598/2143598_image-2023-05-11-10-53-42-076.png\"></p>",
        "time": 2,
        "title": "Понимание GIL"
    },
    {
        "ID": 1942,
        "answers": [
            {
                "content": "<p><strong style=\"color: rgb(23, 43, 77);\">1.ответ на первый вопросы:</strong></p><p>\t<span style=\"color: rgb(23, 43, 77);\">Global Interpreter Lock (Глобальная блокировка интерпретатора) его </span>\t\t\t<span style=\"color: rgb(23, 43, 77);\">задача состоит в том, чтобы сделать интерпретатор CPython </span>\t<span style=\"color: rgb(23, 43, 77);\">потокобезопасным.</span></p><p>\t<span style=\"color: rgb(23, 43, 77);\">GIL позволяет только одному потоку ОС выполнять байт-код Python в любой момент времени. Следствием этого является невозможность&nbsp;ускорить выполнение кода Python с интенсивным использованием процессора путем распределения работы между несколькими потоками.</span></p><p><strong style=\"color: rgb(23, 43, 77);\">2.ответ на первый вопросы:</strong></p><p><span style=\"color: rgb(23, 43, 77);\"><span class=\"ql-cursor\">﻿</span>GIL не сильно влияет на производительность I/O-операций в многопоточных программах, т. к. в процессе ожидания от I/O блокировка распространяется по потокам. Когда Python вызывает любую операционную систему, прием передачу данных, чтение запись файла и т.д. он для потока который вызвал функцию отключает GIL, после получения ответа GIL возвращается. Однако программа, потоки которой будут работать исключительно с процессором (например обработка изображения по частям), из-за блокировки не только станет однопоточной, но и на её выполнение будет затрачиваться больше времени, чем если бы она изначально была строго однопоточной.</span></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:23:44Z",
        "interviewCount": 115,
        "question": "<ol><li><span style=\"color: rgb(23, 43, 77);\">Что такое GIL? Зачем он нужен?</span></li><li><span style=\"color: rgb(23, 43, 77);\"><span class=\"ql-cursor\">﻿</span>В чем разница влияния GIL на I/O-bout и CPU-bound операции?</span></li></ol>",
        "time": 2,
        "title": "GIL и зачем он нужен"
    },
    {
        "ID": 1941,
        "answers": [
            {
                "content": "<p>Кандидат назовет несколько:</p><p>Импорты</p><p>Константы</p><p>Нейминги</p><p>Пробелы </p><p>Длина строки</p><p>Отступы</p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:20:13Z",
        "interviewCount": 18,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Есть кусок скрипта(картинка ниже). Есть ли какие-то несоответствия с PEP8 ?</span></p><p><img src=\"https://jit.o3.ru/secure/attachment/2143437/2143437_image-2023-05-11-10-38-56-502.png\"></p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">import requests, os, datetime\nimport sys, MyPackage\nfrom wath import *\n\nConst1 = 3\nCONST2 = 4\na = 25\nb = \"John\"\n\n\n\ndef numbersSum(nums):\n    return sum(nums)\nx=2+3\ny = ( 1 + 2 ) * 3\nstring = \"This is a very long story, consisting of a large number of symbols, words. They are written in one line, although they do not fit in length.\"\nif a == 1:\n    print(\"x is 1\") \n</pre>",
        "time": 4,
        "title": "Несоответствия с PEP8"
    },
    {
        "ID": 1940,
        "answers": [
            {
                "content": "<p>Ожидаем что назовет линтеры c несколькими примерами:</p><ol><li>pylint&nbsp;</li><li>flake8</li><li>PyCharm&nbsp;</li></ol><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:14:20Z",
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Какие инструменты помогают следовать стандартам PEP8?</span></p>",
        "time": 3,
        "title": "Инструменты для PEP8?"
    },
    {
        "ID": 1939,
        "answers": [
            {
                "content": "<ol><li><strong>Отступы</strong>&nbsp;(использовать 4 пробела на каждом уровне отступов)</li><li>Пробелы - самый предпочтительный&nbsp;<strong>метод отступов</strong>.</li><li>Ограничьте&nbsp;<strong>длину строки</strong>&nbsp;максимум 79 символами. Для более длинных блоков текста с меньшими структурными ограничениями (строки документации или комментарии), длину строки следует ограничить 72 символами.</li><li><strong>Пустые строки.</strong>&nbsp;Отделяйте функции верхнего уровня и определения классов двумя пустыми строками.Определения методов внутри класса разделяются одной пустой строкой.</li><li><strong>Именование</strong></li><li><strong>Импорты</strong>&nbsp;Импортируйте модули в алфавитном порядке, разделяйте группы импортов пустой строкой и избегайте использования символа *.</li><li><strong>Пробелы вокруг операторов.</strong>&nbsp;Используйте пробелы вокруг операторов (=, +, -, *, /, //, %, и т. д.), но не используйте пробелы вокруг символа индексирования или среза.</li><li><strong>Названия функций и методов.</strong>&nbsp;Используйте глаголы в названиях функций и методов, используйте нижнее подчеркивание для разделения слов..</li></ol><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:09:31Z",
        "interviewCount": 14,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Какие основные правила </span>PEP8<span style=\"color: rgb(23, 43, 77);\">, можете перечислить?</span></p>",
        "time": 2,
        "title": "Основные правила PEP8"
    },
    {
        "ID": 1938,
        "answers": [
            {
                "content": "<ol><li>PEP8 — это руководство по стилю кода для языка программирования Python.Он описывает рекомендации и правила для написания читаемого, понятного и консистентного кода на Python.</li><li>Причин соблюдать:</li><li class=\"ql-indent-1\">Код читается гораздо чаще, чем пишется</li><li class=\"ql-indent-1\">PEP8 помогает сделать код более читаемым и понятным для других программистов, которые могут работать с вашим кодом.</li><li class=\"ql-indent-1\">соблюдение стандартов PEP8 может помочь сделать код более консистентным</li><li class=\"ql-indent-1\">соблюдение стандартов PEP8 может помочь обнаружить ошибки и потенциальные проблемы в коде.</li><li class=\"ql-indent-1\">другими словами&nbsp;PEP8 помогает сделать код более читаемым, консистентным и устойчивым к ошибкам.</li><li>Причины игнорировать:</li><li class=\"ql-indent-1\">Применение PEP 8 в проекте сделает код менее читабельным, даже для тех, кто привык читать код, который следует этому PEP.</li><li class=\"ql-indent-1\">Рассматриваемый код похож по стилю с ранее написанным кодом, который также нарушает PEP 8 (возможно, по историческим причинам) - хотя это возможность привести чужой код в порядок.</li><li class=\"ql-indent-1\">Рассматриваемый код предшествует введению стандартов PEP8, и нет никаких других причин для изменения этого кода.</li><li class=\"ql-indent-1\">Когда код может остаться совместимым со старыми версиями Python, который не поддерживает функции, рекомендованную в PEP.</li></ol><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-18T08:07:09Z",
        "interviewCount": 25,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Что такое PEP8? Причины использования? Какие могут быть причины игнорирования PEP8?</span></p>",
        "time": 3,
        "title": "Что PEP8?"
    },
    {
        "ID": 1875,
        "answers": [
            {
                "content": "<p>Для решения задачи необходимо в классе Car реализовать методы _<em>hash</em>_ и _<em>eq</em>_</p><pre class=\"ql-syntax\" spellcheck=\"false\">class Car:\n    def __init__(self, name: str):\n        self.name = name    \n\n    def __hash__(self) -&gt; int:\n        return hash((self.name, self.__class__))\n\n    def __eq__(self, other) -&gt; bool:\n        if not isinstance(other, self.__class__):\n            return False\n        return self.name == other.name\n\n    def __repr__(self) -&gt; str:\n        return f'Car(\"{self.name}\")'\n\ncars = {Car(\"BMW\"), Car(\"Nissan\"), Car(\"BMW\")}\nprint(cars)\n</pre><p><br></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-10T11:44:58Z",
        "interviewCount": 32,
        "question": "<p>Есть множество cars, которое содержит объекты автомобильных марок. Внесите корректировки в код так, чтобы это множество содержала только уникальные объекты автомобильных марок.</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">class</span> Car:\n    def __init__(<span class=\"hljs-keyword\">self</span>, name: str):\n        <span class=\"hljs-keyword\">self</span>.name = name\n\n    def __repr__(<span class=\"hljs-keyword\">self</span>) -&gt; str:\n        <span class=\"hljs-keyword\">return</span> f<span class=\"hljs-string\">'Car(\"{self.name}\")'</span>\n\ncars = {Car(<span class=\"hljs-string\">\"BMW\"</span>), Car(<span class=\"hljs-string\">\"Nissan\"</span>), Car(<span class=\"hljs-string\">\"BMW\"</span>)}\nprint(cars)\n</pre><p><br></p>",
        "time": 15,
        "title": "Задача по работе с set(множество)"
    },
    {
        "ID": 1874,
        "additional": "<p>Расскажите про коллизии в множествах?</p><p><strong>Ответ:</strong></p><p>Ключом условно может быть любая строка, любой длины и содержания. Но есть одно противоречие:</p><ul><li>Все возможные ключи — это бесконечное множество, а в качестве результата хеш-функция выдает строку фиксированной длины, то есть все выходные значения — это конечное множество.</li><li>Из этого следует, что не для всех входных данных найдется уникальный хеш и могут появиться дубли: под одним хешем будут лежать несколько разных значений. Такую ситуацию называют коллизией.</li><li>Простейший способ разрешения коллизий — это открытая адресация. Она предполагает последовательное перемещение по слотам хеш-таблицы в поисках первого свободного слота, куда значение будет записано.</li></ul><p><br></p>",
        "answers": [
            {
                "content": "<p>Множество – это математический объект, являющийся набором, совокупностью, собранием каких-либо объектов, которые называются элементами этого множества. Элементами множества могут быть только хешируемые (Hashable) объекты, так как внутренняя реализация set основана на хеш-таблица. Хеш-таблица позволяет организовать данные ассоциативного массива удобным для хранения способом. Для этого хеш-таблица использует индексированный массив и функцию для хеширования ключей. При этом хеш-таблица — это не просто способ размещать данные в памяти, она включает в себя логику. Любая операция внутри хеш-таблицы начинается с того, что ключ преобразуется в индекс обычного массива. Для получения индекса из ключа нужно выполнить два действия:</p><ul><li>Найти хеш, то есть хешировать ключ</li><li>Привести ключ к индексу — например, через остаток от деления</li></ul><p>Исходя из выше сказанного при добавление элемента в set происходит следующее:</p><ol><li>Интерпритатор хеширует значение. Результатом хеширования становится число.</li><li>Число, полученное на предыдущем шаге, преобразуется в индекс множества</li></ol><p><br></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-10T11:39:29Z",
        "interviewCount": 18,
        "question": "<p>Расскажите, как работает множество(set) и что может являться элементами этого множества?</p>",
        "time": 10,
        "title": "Алгоритм работы set(множества)"
    },
    {
        "ID": 1873,
        "additional": "<p><span style=\"color: rgb(23, 43, 77);\">Чем отличается .symmetric_difference()(^) от .symmetric_difference_update()(^=)</span></p><p><strong style=\"color: rgb(23, 43, 77);\">Ответ:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">.symmetric_difference()(^) - множество не меняется</span></p><p><span style=\"color: rgb(23, 43, 77);\">. symmetric_difference_update()(^=) - множество меняется</span></p>",
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">print(list(set(x) ^ set(y)))\nили\nprint(x.symmetric_difference(y)\n</pre><p><br></p>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-10T11:35:31Z",
        "interviewCount": 11,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Есть два множества x и y. Выведите симметрическую разность двух списков.</span></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">x = [ \"a\", \"b\", \"c\" ,\"f\"]\ny =&nbsp;[\"b\", \"c\", \"d\" ,\"g\"]\n</pre>",
        "time": 5,
        "title": "Симметрическая разность двух списков"
    },
    {
        "ID": 1872,
        "additional": "<p><span style=\"color: rgb(23, 43, 77);\">Чем отличается .intersection()(&amp;) от .intersection_update()(&amp;=)</span></p><p><strong style=\"color: rgb(23, 43, 77);\">Ответ:</strong></p><p><span style=\"color: rgb(23, 43, 77);\">.intersection()(&amp;) - множество не меняется</span></p><p><span style=\"color: rgb(23, 43, 77);\">.intersection_update()(&amp;=) - множество меняется</span></p>",
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-built_in\">print</span>(list(<span class=\"hljs-keyword\">set</span>(x) <span class=\"hljs-operator\">&amp;</span> <span class=\"hljs-keyword\">set</span>(y)))\nили\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-keyword\">set</span>(x).intersection(y))\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-10T11:29:40Z",
        "interviewCount": 69,
        "question": "<p>Есть два множества x и y. Выведите пересечение двух списков.</p><p><br></p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">x = [\"a\", \"b\", \"c\" ,\"f\"]\ny = [\"b\", \"c\", \"d\" ,\"g\"]\n</pre>",
        "time": 5,
        "title": "Пересечение двух списков"
    },
    {
        "ID": 1871,
        "additional": "<p>Задача №1</p><p>Есть массив colors. Выведите список уникальных цветов</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attribute\">colors</span> = [<span class=\"hljs-string\">\"red\"</span>,  <span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>, <span class=\"hljs-string\">\"purple\"</span>, <span class=\"hljs-string\">\"purple\"</span>]\n</pre><p>Ответ:</p><pre class=\"ql-syntax\" spellcheck=\"false\">unique_colors <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">set</span>(color_list)\n<span class=\"hljs-built_in\">print</span>(unique_colors)\n</pre><p><br></p><p>Задача №2</p><p>Напишите результат вывода и объясните почему так.</p><pre class=\"ql-syntax\" spellcheck=\"false\">x <span class=\"hljs-operator\">=</span> { <span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span> , <span class=\"hljs-string\">\"c\"</span> } \nx.difference_update(<span class=\"hljs-string\">\"ab\"</span>)\n<span class=\"hljs-built_in\">print</span>(x)\n</pre><p>Ответ:</p><pre class=\"ql-syntax\" spellcheck=\"false\">{c}\n</pre><p><br></p><p>Задача №3:</p><p>Напишите результат вывода и объясните почему так.</p><pre class=\"ql-syntax\" spellcheck=\"false\">x<span class=\"hljs-operator\">=</span> { <span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span> , <span class=\"hljs-string\">\"c\"</span> } \nx.difference_update([<span class=\"hljs-string\">\"ab\"</span>])\n<span class=\"hljs-built_in\">print</span>(x)\n</pre><p>Ответ:</p><pre class=\"ql-syntax\" spellcheck=\"false\">{ <span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span> }\n</pre>",
        "answers": [
            {
                "content": "<p>Множество - это неупорядоченная коллекция уникальных элементов.</p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-10T11:26:14Z",
        "interviewCount": 25,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Расскажите что такое set(множество)?</span></p>",
        "time": 5,
        "title": "Set (множество)"
    },
    {
        "ID": 1870,
        "additional": "<p><span style=\"color: rgb(23, 43, 77);\">1. Что делает функция callable?</span></p><p><span style=\"color: rgb(23, 43, 77);\">Ответ: Проверяет, является ли объект вызываемым</span></p><p><span style=\"color: rgb(23, 43, 77);\">2. Что делают функции hasattr, getattr и setattr?</span></p><p><span style=\"color: rgb(23, 43, 77);\">Ответ: </span></p><p><span style=\"color: rgb(23, 43, 77);\">hasattr - Определите, есть ли этот метод или переменная в объекте</span></p><p><span style=\"color: rgb(23, 43, 77);\">getattr - Возвращает значение именованного атрибута объекта. Если он не найден, он возвращает значение по умолчанию, предоставленное функции.</span></p><p><span style=\"color: rgb(23, 43, 77);\">setattr - Добавляет переменную или метод в объект.</span></p>",
        "answers": [
            {
                "content": "<p>Рефлексия — это процесс, который позволяет программе изменять свою структуру и поведение во время выполнения. В Python вы можете использовать рефлексию, чтобы создавать и изменять объекты, вызывать методы и модифицировать классы. Зачастую это необходимо когда по разным причинам мы не можем определить, существует ли этот метод или переменная в объекте.</p>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-10T11:06:31Z",
        "interviewCount": 8,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Что такое рефлексия и зачем она нужна?</span></p>",
        "time": 10,
        "title": "Рефлексия"
    },
    {
        "ID": 1869,
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">def fib_gen():\n    yield 0\n    a, b = 1, 1\n    while True:\n        yield b\n        a, b = b, a+b\n\ndef print_fib(count):\n  fib = fib_gen()\n  for i in range(count):\n      print(next(fib))\n      \nprint_fib(20)\n</pre><p><br></p>",
                "difficulty": "GRADE_18"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-10T10:29:42Z",
        "interviewCount": 32,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Реализуйте функцию генератор чисел Фибоначчи и функцию котороя выводит указанное количество этих чисел(Рекурсию использовать нельзя).</span></p>",
        "time": 15,
        "title": "Написать функцию генератор"
    },
    {
        "ID": 1868,
        "additional": "<p>Q: <em style=\"color: rgb(127, 140, 141);\">Что вернет </em><code style=\"color: rgb(233, 105, 0); background-color: rgb(248, 248, 248);\"><em>next(gen)</em></code><em style=\"color: rgb(127, 140, 141);\">?</em></p><p>A: Следующий элемент в списке</p><p>Q: <em style=\"color: rgb(127, 140, 141);\">Что будет, когда элементы закончатся?</em></p><p>A: Вернется exception <code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">StopIteration</code></p><p>Q: <em style=\"color: rgb(127, 140, 141);\">А достать N-th элемент по индексу можно?</em></p><p>A: Нет</p>",
        "answers": [
            {
                "content": "<p>Это функция, ее можно приостановить и продолжить ее выполнение, внутри нее <code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">yield</code> вместо <code style=\"background-color: rgb(248, 248, 248); color: rgb(233, 105, 0);\">return</code>. Нужна она как lazy итератор, чтобы более эффективно использовать память. Использовать - для генерации бесконечных последовательностей, итерации по большим данным etc.</p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">def gen(n):\n&nbsp; &nbsp; for i in range(n):\n&nbsp; &nbsp; &nbsp; &nbsp; yield i\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\ndef print_number(n):\n&nbsp; &nbsp; result = gen(n)\n&nbsp; &nbsp; while True:\n&nbsp; &nbsp; &nbsp; &nbsp; try:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(next(result))\n&nbsp; &nbsp; &nbsp; &nbsp; except StopIteration:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break\n&nbsp; &nbsp;&nbsp;\nprint_number(10)</span>\n</pre>",
                "difficulty": "GRADE_17"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-10T10:23:25Z",
        "interviewCount": 350,
        "question": "<p><span style=\"color: rgb(52, 73, 94);\">Что такое генератор? </span></p><p><span style=\"color: rgb(52, 73, 94);\">Какие задачи решает генератор?</span></p><p>Чем отличается от итератора?</p>",
        "time": 2,
        "title": "Генератор в python"
    },
    {
        "ID": 1867,
        "additional": "<p>Здача №1 </p><p>Есть список my_list =&nbsp;[1,2,3,4,5,6]. Выведите список в обратном порядке при помощи срезов.</p><p>Ответ: print(my_list[::-1])</p><p>Здача №2&nbsp;<strong>:</strong></p><p>Есть список my_list =&nbsp;[1,2,3,4,5,6]. Выведите список начиная с 4 элемента при помощи срезов.</p><p>Ответ: print(my_list[3:])</p><p>Здача №3</p><p>Напишите результат вывода:</p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-attribute\">my_list</span> = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>][<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">5</span>:<span class=\"hljs-number\">2</span>]\nprint(my_list)\n</pre><p>Ответ:&nbsp;[2, 4]</p>",
        "answers": [
            {
                "content": "<p>Срез - это объект класса slice.</p><p>Срезом называется неко­торая подпос­ледователь­ность. Принцип действия срезов очень прост: мы \"отрезаем\" кусок от исходной последовательности элемента, не меняя её при этом.</p><p>Есть три формы срезов:</p><ul><li>Взятие одного элемента итерируемого объекта по индексу. То есть если S = ‘Hi’, то S[0]=='H'</li><li>Срез с двумя параметрами. Возвращает элементы итерируемого объекта начиная с элемента c индексом start, до элемента с индексом stop. То есть если my_list =&nbsp;[1, 2, 3, 4, 5], то my_list[0:2]&nbsp;==&nbsp;[1, 2]</li><li>Срез с тремя параметрами. Возвращает множество в которое будут входить индексы элементов выбранные по формуле:</li><li>(START, START + STEP, START + 2 * STEP, .., STOP) # STOP не входит в срез. То есть если my_list =&nbsp;[1, 2, 3, 4, 5], то my_list[0:4:2]&nbsp;==&nbsp;[1, 3]</li></ul><p><br></p>",
                "difficulty": "GRADE_16"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-08-10T10:10:18Z",
        "interviewCount": 27,
        "question": "<p><span style=\"color: rgb(23, 43, 77);\">Что такое срезы? Перечислите формы срезов?</span></p>",
        "time": 5,
        "title": "Работа со слайсами последовательностей "
    },
    {
        "ID": 1808,
        "additional": "<h2><span style=\"color: rgb(0, 0, 0); background-color: transparent;\">Вопросы для расширения</span></h2><ul><li><strong style=\"background-color: transparent;\">Как ускорить обход?</strong><span style=\"background-color: transparent;\"> Ожидаем услышать про многопоточность и/или асинхронность, про них можно задать пару вопросов вглубь.</span></li><li><strong style=\"background-color: transparent;\">Как найти урлы на странице? </strong><span style=\"background-color: transparent;\">Ожидаем услышать про регулярные выражения или парсеры HTML (аля beautifulSoup).</span></li><li><strong style=\"background-color: transparent;\">Как сосчитать слова на странице?</strong><span style=\"background-color: transparent;\"> Ожидаем услышать про регулярные выражения и накопление в словаре, с сильным кандидатом можно зацепить тему нормализации слов - стемминг, лемматизация.</span></li><li><strong style=\"background-color: transparent;\">Как обрабатывать сетевые ошибки? </strong><span style=\"background-color: transparent;\">Ожидаем услышать про try/except и ретраи, другой подход - это забрасывать урл обратно в очередь.</span></li></ul><p><br></p><p><br></p><p><br></p><h2><span style=\"color: rgb(0, 0, 0); background-color: transparent;\">Предварительные критерии оценки</span></h2><ul><li><span style=\"background-color: transparent;\">Удалось ли получить работающее решение?</span></li><li><span style=\"background-color: transparent;\">Насколько бегло кандидат пишет код?</span></li><li><span style=\"background-color: transparent;\">Читаемый ли получился код?</span></li></ul>",
        "answers": [
            {
                "content": "<pre class=\"ql-syntax\" spellcheck=\"false\">def process_wiki(root_url: str, filename: str):\n&nbsp;&nbsp;&nbsp;words = Counter()\n&nbsp;&nbsp;&nbsp;pages_to_visit = deque([root_url])\n&nbsp;&nbsp;&nbsp;visited = set()\n\n&nbsp;&nbsp;&nbsp;while pages_to_visit:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url = pages_to_visit.pop_front()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if url in visited:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visited.add(url)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;page = requests.get(url).text\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pages_to_visit += get_urls(page)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;page_words = count_words_in_page(page)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;words.update(page_words)\n\n&nbsp;&nbsp;&nbsp;with open(filename, \"w\") as f:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for w, c in words.most_common(100):\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f.write(f\"{c} {w}<br/>\")\n</pre>",
                "difficulty": "GRADE_19"
            }
        ],
        "blocks": [
            {
                "ID": 711,
                "title": "Python"
            }
        ],
        "createdAt": "2023-06-20T18:39:28Z",
        "interviewCount": 51,
        "question": "<p><span style=\"color: rgb(0, 0, 0); background-color: transparent;\">Необходимо написать обход википедии и собрать статистику по частотности слов, top-100 из них вывести в файл в порядке убывания.</span></p><p><br></p><p><br></p><h2><span style=\"background-color: transparent; color: rgb(0, 0, 0);\">Что проверяем</span></h2><ol><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><strong style=\"background-color: transparent;\">Способность осознать задачу и придумать решение</strong><span style=\"background-color: transparent;\"> - хороший кандидат сразу определяет в задаче обход графа.</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><strong style=\"background-color: transparent;\">Степень автоматизма при написании кода</strong><span style=\"background-color: transparent;\"> -</span><strong style=\"background-color: transparent;\"> </strong><span style=\"background-color: transparent;\">это видно по неймингу, использованию готовых структур вместо самописных (Counter вместо dict для накопления статистики, Set[str] вместо Dict[str, bool]) и тому подобному.</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><strong style=\"background-color: transparent;\">Время написание задачи</strong><span style=\"background-color: transparent;\"> - у сильного кандидата задача занимает около 20 минут.</span></li><li data-list=\"bullet\"><span class=\"ql-ui\" contenteditable=\"false\"></span><strong style=\"background-color: transparent;\">Понимание концепции асимптотический сложности</strong><span style=\"background-color: transparent;\"> - O(nlogn) для сортировки, O(1) для словаря и множества.</span></li></ol><p><br></p><p><br></p><p><br></p><p><br></p><pre class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-string\">\"\"\"</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">Программа считает Top 100 самых частотных слов русской Википедии и записывает результат своей работы в файл.</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">Для реализации в коде предлагается функция process_wiki.</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">Остальные функции для обсуждения голосом в случае, если осталось свободное время.</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">\"\"\"</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">def get_urls(page_source: str) -&gt; list[str]:</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    \"\"\"</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    Функция получает на вход HTML-код страницы Википедии и возвращает список URL, найденных на этой странице.</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">  </span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">      Пример результата:</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">      [</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">            \"https://ru.wikipedia.org/wiki/Кочерга\",</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">            \"https://ru.wikipedia.org/wiki/Фотоэмульсия\",</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">            \"https://ru.wikipedia.org/wiki/Стамбул (канал)\",</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    ]</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    Писать код в этой функции не нужно. Функция выступает чёрным ящиком.</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    \"\"\"</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">def count_words(page_source: str) -&gt; dict[str, int]:</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    \"\"\"</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    Функция получает на вход HTML-код страницы Википедии и возвращает словарь, содержащий пары слово -&gt; частотность на этой странице.</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    Слова возвращаются нормализованными.</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    Пример результата:</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    {\"мама\" : 20, \"рама\": 5, \"мыть\": 10}</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    Писать код в этой функции не нужно. Функция выступает чёрным ящиком.</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    \"\"\"</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">def process_wiki(root_url: str, filename: str):</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    \"\"\"</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    Функция считает Top 100 самых частотных слов на Википедии и записывает    результат в файл.</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    В этой функции мы обходим все страницы Википедии вплоть до самой последней.</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    На вход функции передаётся точка входа (URL для начала обработки) и имя файла для вывода результата.</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    В результате выполнения в файл запишется Top 100 самых частотных слов в следующем формате:</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    20 мама</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    10 мыть</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    5 рама</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    Эту функцию НЕОБХОДИМО реализовать в коде.</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    \"\"\"</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    # Начало реализации</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    ...</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    # Окончание реализации</span></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><br></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">if __name__ == \"__main__\":</span></div><div class=\"ql-code-block\" data-language=\"python\"><span class=\"ql-token hljs-undefined\">    process_wiki(\"http://ru.wikipedia.org\", \"out.txt\")</span></div></pre>",
        "time": 30,
        "title": "Обход wiki"
    }
]